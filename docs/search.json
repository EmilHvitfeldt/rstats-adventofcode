{
  "articles": [
    {
      "path": "2015.html",
      "title": "My 2015 Solutions",
      "author": [],
      "contents": "\n\n\n\n\n\nDay 1\nPart 1\n\n\ninput <- readLines(\"2015/01-input\")\nchars <- strsplit(input, \"\")[[1]]\n\nkey <- c(\"(\" = 1, \")\" = -1)\n\nsum(key[chars])\n\n\n\n[1] 74\n0.003 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/01-input\")\nchars <- strsplit(input, \"\")[[1]]\n\nkey <- c(\"(\" = 1, \")\" = -1)\n\nmin(which(cumsum(key[chars]) < 0))\n\n\n\n[1] 1795\n0.004 sec elapsed\n\nDay 2\nPart 1\n\n\ninput <- readLines(\"2015/02-input\")\n\nchars <- strsplit(input, \"x\")\n\npackage_surface <- function(x) {\n  x <- as.numeric(x)\n  side <- x[1] * x[2]\n  front <- x[1] * x[3]\n  top <- x[2] * x[3]\n\n  sum(2 * c(side, front, top), min(side, front, top))\n}\n\nsum(vapply(chars, package_surface, numeric(1)))\n\n\n\n[1] 1606483\n0.024 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/02-input\")\n\nchars <- strsplit(input, \"x\")\n\nribbon_length <- function(x) {\n  x <- as.numeric(x)\n  short_sides <- sort(x)[1:2]\n  sum(short_sides) * 2 + prod(x)\n}\n\nsum(vapply(chars, ribbon_length, numeric(1)))\n\n\n\n[1] 3842356\n0.115 sec elapsed\n\nDay 3\nPart 1\n\n\ninput <- readLines(\"2015/03-input\")\n\nchars <- strsplit(input, \"\")[[1]]\n\nx_key <- c(\"^\" = 0, \"v\" = 0, \">\" = 1, \"<\" = -1)\ny_key <- c(\"^\" = 1, \"v\" = -1, \">\" = 0, \"<\" = 0)\n\npath <- data.frame(\n  x = cumsum(x_key[chars]),\n  y = cumsum(y_key[chars])\n)\n\nnrow(unique(path))\n\n\n\n[1] 2565\n0.013 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/03-input\")\n\nchars <- strsplit(input, \"\")[[1]]\n\npath_santa <- data.frame(\n  x = cumsum(x_key[chars][seq_along(chars) %% 2 == 1]),\n  y = cumsum(y_key[chars][seq_along(chars) %% 2 == 1])\n)\n\npath_robosanta <- data.frame(\n  x = cumsum(x_key[chars][seq_along(chars) %% 2 == 0]),\n  y = cumsum(y_key[chars][seq_along(chars) %% 2 == 0])\n)\n\nnrow(unique(rbind(path_santa, path_robosanta)))\n\n\n\n[1] 2639\n0.016 sec elapsed\n\nDay 4\nPart 1\n\n\ninput <- \"ckczppom\"\nnumber <- seq_len(1000000)\n\nmd5 <- digest::getVDigest()\n\nhash <- vapply(\n  paste0(input, number),\n  md5,\n  FUN.VALUE = character(1),\n  serialize = FALSE\n)\n\nwhich(substr(hash, 1, 5) == \"00000\")\n\n\n\nckczppom117946 \n        117946 \n10.485 sec elapsed\n\nPart 2\n\n\ninput <- \"ckczppom\"\nnumber <- seq(3000000, 4000000)\n\nmd5 <- digest::getVDigest()\n\nhash <- vapply(\n  paste0(input, number),\n  md5,\n  FUN.VALUE = character(1),\n  serialize = FALSE\n)\n\nwhich(substr(hash, 1, 6) == \"000000\")\n\n\n\nckczppom3938038 \n         938039 \n11.336 sec elapsed\n\nDay 5\nPart 1\n\n\ninput <- readLines(\"2015/05-input\")\n\ncon1 <- stringr::str_count(input, \"[aeiou]\") >= 3\n\nfind_repeat <- function(x) {\n  any(rle(x)$lengths > 1)\n}\n\ncon2 <- vapply(strsplit(input, \"\"), find_repeat, logical(1))\ncon3 <- !(grepl(\"ab\", input)) &\n  !(grepl(\"cd\", input)) &\n  !(grepl(\"pq\", input)) &\n  !(grepl(\"xy\", input))\n\nsum(con1 & con2 & con3)\n\n\n\n[1] 236\n0.023 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/05-input\")\n\npairs <- tokenizers::tokenize_character_shingles(input, n = 2)\n\nx <- pairs[[1]]\n\ncon1_fun <- function(x) {\n  pairs <- names(which(table(x)>1))\n\n  if (length(pairs) == 0) return(FALSE)\n\n  for (i in seq_along(pairs)) {\n    if (any(diff(which(pairs[i] == x)) > 1)) return(TRUE)\n  }\n\n  FALSE\n}\n\ncon1 <- vapply(pairs, con1_fun, FUN.VALUE = logical(1))\n\ntriplets <- tokenizers::tokenize_character_shingles(input, n = 3)\n\ncon2_fun <- function(x) {\n  any(substr(x, 1, 1) == substr(x, 3, 3))\n}\n\ncon2 <- vapply(triplets, con2_fun, FUN.VALUE = logical(1))\n\nsum(con1 & con2)\n\n\n\n[1] 50\n0.765 sec elapsed\n\nDay 6\nPart 1\n\n\ninput <- readLines(\"2015/06-input\")\n\nmat <- matrix(FALSE, 1000, 1000)\n\nfor (direction in input) {\n  coord <- stringr::str_extract_all(direction, \"[0-9]+\")[[1]]\n  coord <- as.numeric(coord) + 1\n\n  command <- stringr::str_extract(direction, \"(turn on|toggle|turn off)\")\n\n  x_range <- coord[1]:coord[3]\n  y_range <- coord[2]:coord[4]\n\n  if (command == \"toggle\") {\n    mat[x_range, y_range] <-!mat[x_range, y_range]\n  } else if (command == \"turn on\") {\n    mat[x_range, y_range] <- TRUE\n  } else if (command == \"turn off\") {\n    mat[x_range, y_range] <- FALSE\n  }\n}\n\nsum(mat)\n\n\n\n[1] 569999\n0.178 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/06-input\")\n\nmat <- matrix(0, 1000, 1000)\n\nfor (direction in input) {\n  coord <- stringr::str_extract_all(direction, \"[0-9]+\")[[1]]\n  coord <- as.numeric(coord) + 1\n\n  command <- stringr::str_extract(direction, \"(turn on|toggle|turn off)\")\n\n  x_range <- coord[1]:coord[3]\n  y_range <- coord[2]:coord[4]\n\n  if (command == \"toggle\") {\n    mat[x_range, y_range] <- mat[x_range, y_range] + 2\n  } else if (command == \"turn on\") {\n    mat[x_range, y_range] <- mat[x_range, y_range] + 1\n  } else if (command == \"turn off\") {\n    mat[x_range, y_range] <- pmax(mat[x_range, y_range] - 1, 0)\n  }\n}\n\nsum(mat)\n\n\n\n[1] 17836115\n0.97 sec elapsed\n\nDay 7\nPart 1\n\n\nlibrary(magrittr)\nlibrary(stringr)\n\ninput <- readLines(\"2015/07-input\")\n\nint_2_16 <- function(x) {\n  as.logical(intToBits(x)[1:16])\n}\n\nint_2_16_rev <- function(x) {\n  sum(2 ^ (0:15) * x)\n}\n\n`%AND%` <- function(x, y) {\n  int_2_16_rev(int_2_16(x) & int_2_16(y))\n}\n\n`%OR%` <- function(x, y) {\n  int_2_16_rev(int_2_16(x) | int_2_16(y))\n}\n\n`%LSHIFT%` <- function(x, y) {\n  int_2_16_rev(c(rep(FALSE, y), int_2_16(x)[seq(1, 16 - y)]))\n}\n\n`%RSHIFT%` <- function(x, y) {\n  int_2_16_rev(c(int_2_16(x)[seq(y + 1, 16)], rep(FALSE, y)))\n}\n\n`%NOT%` <- function(temp, x) {\n  int_2_16_rev(!int_2_16(x))\n}\n\neval_fun <- function(x) {\n  as.character(eval(parse(text = x)))\n}\n\ninstructions <- strsplit(input, \" -> \")\n\nlhs <- purrr::map_chr(instructions, ~.x[1]) %>%\n  str_replace_all(\n    c(\n      \"OR\" = \"%OR%\",\n      \"AND\" = \"%AND%\",\n      \"RSHIFT\" = \"%RSHIFT%\",\n      \"LSHIFT\" = \"%LSHIFT%\",\n      \"NOT\" = \"1 %NOT%\"\n    )\n  ) %>%\n  paste0(\"( \", ., \" )\")\n\nlhs[which(str_detect(lhs, \"^\\\\( [0-9]* \\\\)$\"))] <- str_extract(\n  lhs[which(str_detect(lhs, \"^\\\\( [0-9]* \\\\)$\"))],\n  \"[0-9]+\"\n)\n\nrhs <- purrr::map_chr(instructions, ~.x[2])\n\nrepeat {\n  numbers_ind <- which(str_detect(lhs, \"^[0-9]*$\"))\n\n  if (length(numbers_ind) == length(lhs)) break\n\n  replacement <- str_extract(lhs[numbers_ind], \"[0-9]+\")\n  names(replacement) <- paste0(\" \", rhs[numbers_ind], \" \")\n\n  lhs <- lhs %>%\n    str_replace_all(replacement)\n\n  can_evaluate <- !lhs %>% str_detect(\"[a-z]+\")\n\n  lhs[can_evaluate] <- purrr::map_chr(lhs[can_evaluate], eval_fun)\n}\n\nlhs[rhs == \"a\"]\n\n\n\n[1] \"956\"\n5.678 sec elapsed\n\nPart 2\n\n\nlibrary(magrittr)\nlibrary(stringr)\n\ninput <- readLines(\"2015/07-input\")\n\nint_2_16 <- function(x) {\n  as.logical(intToBits(x)[1:16])\n}\n\nint_2_16_rev <- function(x) {\n  sum(2 ^ (0:15) * x)\n}\n\n`%AND%` <- function(x, y) {\n  int_2_16_rev(int_2_16(x) & int_2_16(y))\n}\n\n`%OR%` <- function(x, y) {\n  int_2_16_rev(int_2_16(x) | int_2_16(y))\n}\n\n`%LSHIFT%` <- function(x, y) {\n  int_2_16_rev(c(rep(FALSE, y), int_2_16(x)[seq(1, 16 - y)]))\n}\n\n`%RSHIFT%` <- function(x, y) {\n  int_2_16_rev(c(int_2_16(x)[seq(y + 1, 16)], rep(FALSE, y)))\n}\n\n`%NOT%` <- function(temp, x) {\n  int_2_16_rev(!int_2_16(x))\n}\n\neval_fun <- function(x) {\n  as.character(eval(parse(text = x)))\n}\n\n\ninstructions <- strsplit(input, \" -> \")\n\nlhs <- purrr::map_chr(instructions, ~.x[1]) %>%\n  str_replace_all(\n    c(\n      \"OR\" = \"%OR%\",\n      \"AND\" = \"%AND%\",\n      \"RSHIFT\" = \"%RSHIFT%\",\n      \"LSHIFT\" = \"%LSHIFT%\",\n      \"NOT\" = \"1 %NOT%\"\n    )\n  ) %>%\n  paste0(\"( \", ., \" )\")\n\nlhs[which(str_detect(lhs, \"^\\\\( [0-9]* \\\\)$\"))] <- str_extract(\n  lhs[which(str_detect(lhs, \"^\\\\( [0-9]* \\\\)$\"))],\n  \"[0-9]+\"\n)\n\nrhs <- purrr::map_chr(instructions, ~.x[2])\n\nlhs[rhs == \"b\"] <- \"956\"\n\nrepeat {\n  numbers_ind <- which(str_detect(lhs, \"^[0-9]*$\"))\n\n  if (length(numbers_ind) == length(lhs)) break\n\n  replacement <- str_extract(lhs[numbers_ind], \"[0-9]+\")\n  names(replacement) <- paste0(\" \", rhs[numbers_ind], \" \")\n\n  lhs <- lhs %>%\n    str_replace_all(replacement)\n\n  can_evaluate <- !lhs %>% str_detect(\"[a-z]+\")\n\n  lhs[can_evaluate] <- purrr::map_chr(lhs[can_evaluate], eval_fun)\n}\n\nlhs[rhs == \"a\"]\n\n\n\n[1] \"40149\"\n5.447 sec elapsed\n\nDay 8\nPart 1\n\n\ninput <- readLines(\"2015/08-input\")\n\nsum(purrr::map_int(input, nchar)) -\n  sum(purrr::map_int(input, ~nchar(eval(parse(text = .x)), type = \"bytes\")))\n\n\n\n[1] 1333\n0.007 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/08-input\")\n\nsum(purrr::map_int(stringi::stri_escape_unicode(input), nchar) + 2) -\n  sum(purrr::map_int(input, nchar))\n\n\n\n[1] 2046\n0.004 sec elapsed\n\nDay 9\nPart 1\n\n\ninput <- readLines(\"2015/09-input\")\n\nlibrary(dplyr)\nlibrary(tidyr)\n\ninput_tbl <- tibble(input) %>%\n  separate(input, c(\"destinations\", \"distance\"), \" = \", convert = TRUE) %>%\n  separate(destinations, c(\"to\", \"from\"), \" to \")\n\nall_paths <- input_tbl %>%\n  select(-distance) %>%\n  unlist() %>%\n  unique() %>%\n  combinat::permn()\n\ndistances <- bind_rows(\n  input_tbl,\n  input_tbl %>% rename(from = to, to = from)\n)\n\ncalc_distance <- function(x) {\n  tibble(\n    from = x[-length(x)],\n    to = x[-1]\n  ) %>%\n    left_join(distances, by = c(\"from\", \"to\")) %>%\n    summarise(sum = sum(distance)) %>%\n    pull(sum)\n}\n\npurrr::map_int(all_paths, calc_distance) %>%\n  min()\n\n\n\n[1] 207\n185.082 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/09-input\")\n\nlibrary(dplyr)\nlibrary(tidyr)\n\ninput_tbl <- tibble(input) %>%\n  separate(input, c(\"destinations\", \"distance\"), \" = \", convert = TRUE) %>%\n  separate(destinations, c(\"to\", \"from\"), \" to \")\n\nall_paths <- input_tbl %>%\n  select(-distance) %>%\n  unlist() %>%\n  unique() %>%\n  combinat::permn()\n\ndistances <- bind_rows(\n  input_tbl,\n  input_tbl %>% rename(from = to, to = from)\n)\n\ncalc_distance <- function(x) {\n  tibble(\n    from = x[-length(x)],\n    to = x[-1]\n  ) %>%\n    left_join(distances, by = c(\"from\", \"to\")) %>%\n    summarise(sum = sum(distance)) %>%\n    pull(sum)\n}\n\npurrr::map_int(all_paths, calc_distance) %>%\n  max()\n\n\n\n[1] 804\n181.645 sec elapsed\n\nDay 10\nPart 1\n\n\ninput <- \"1113122113\"\n\nlook_and_say <- function(x) {\n  x <- strsplit(x, \"\")[[1]]\n  x <- rle(x)\n  x <- unlist(x)\n  x <- matrix(x, nrow = 2, byrow = TRUE)\n  x <- as.numeric(x)\n  paste0(x, collapse = \"\")\n}\n\nfor (i in seq_len(40)) {\n  input <- look_and_say(input)\n}\n\nnchar(input)\n\n\n\n[1] 360154\n1.364 sec elapsed\n\nPart 2\n\n\ninput <- \"1113122113\"\n\nlook_and_say <- function(x) {\n  x <- strsplit(x, \"\")[[1]]\n  x <- rle(x)\n  x <- unlist(x)\n  x <- matrix(x, nrow = 2, byrow = TRUE)\n  x <- as.numeric(x)\n  paste0(x, collapse = \"\")\n}\n\nfor (i in seq_len(50)) {\n  input <- look_and_say(input)\n}\nnchar(input)\n\n\n\n[1] 5103798\n27.016 sec elapsed\n\nDay 11\nPart 1\n\n\ninput <- \"hxbxwxba\"\n\npass <- match(strsplit(input, \"\")[[1]], letters)\n\nincrement0 <- function(x, i) {\n\n  x[i] <- x[i] + 1\n\n  if (any(x %in% c(9, 15, 12))) {\n\n    which_min <- min(which(x %in% c(9, 15, 12)))\n\n    x[which_min] <- x[which_min] + 1\n    if (which_min < 8) {\n      x[seq(min(which_min + 1, 8), 8)] <- 1\n    }\n  }\n\n  if (x[i] == 27) {\n\n    x[i] <- 1\n    if (i > 1) {\n      x <- increment0(x, i - 1)\n    }\n\n  }\n  x\n}\n\nchecker <- function(x) {\n  rle1 <- rle(diff(x))\n\n  check1 <- any(rle1$lengths[rle1$values == 1] >= 2)\n  check2 <- all(!c(9, 15, 12) %in% x)\n  check3 <- sum(rle(x)$lengths >= 2) >= 2\n\n  check1 & check2 & check3\n}\n\nrepeat {\n  pass <- increment0(pass, 8)\n  if (checker(pass)) break\n}\n\npaste0(letters[pass], collapse = \"\")\n\n\n\n[1] \"hxbxxyzz\"\n0.576 sec elapsed\n\nPart 2\n\n\ninput <- \"hxbxxyzz\" # My answer from Part 1\n\npass <- match(strsplit(input, \"\")[[1]], letters)\n\nincrement0 <- function(x, i) {\n\n  x[i] <- x[i] + 1\n\n  if (any(x %in% c(9, 15, 12))) {\n\n    which_min <- min(which(x %in% c(9, 15, 12)))\n\n    x[which_min] <- x[which_min] + 1\n    if (which_min < 8) {\n      x[seq(min(which_min + 1, 8), 8)] <- 1\n    }\n  }\n\n  if (x[i] == 27) {\n\n    x[i] <- 1\n    if (i > 1) {\n      x <- increment0(x, i - 1)\n    }\n\n  }\n  x\n}\n\nchecker <- function(x) {\n  rle1 <- rle(diff(x))\n\n  check1 <- any(rle1$lengths[rle1$values == 1] >= 2)\n  check2 <- all(!c(9, 15, 12) %in% x)\n  check3 <- sum(rle(x)$lengths >= 2) >= 2\n\n  check1 & check2 & check3\n}\n\nruns <- 0\n\nrepeat {\n  pass <- increment0(pass, 8)\n  if (checker(pass)) break\n}\n\npaste0(letters[pass], collapse = \"\")\n\n\n\n[1] \"hxcaabcc\"\n25.853 sec elapsed\n\nDay 12\nPart 1\n\n\ninput <- readLines(\"2015/12_input\")\nnumbers <- stringr::str_extract_all(input, pattern = \"-{0,1}[0-9]+\")[[1]]\n\nsum(as.numeric(numbers))\n\n\n\n[1] 156366\n0.004 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/12_input\")\n\nlibrary(stringr)\n\ncheck_red <- function(x) {\n  if (length(x) > 1) return(FALSE)\n\n  if (is.list(x)) return(FALSE)\n\n  x == \"red\"\n}\n\nparse_red <- function(input) {\n  repeat {\n    end <- str_locate(input, \"\\\\}\")[1, 1]\n\n    if (all(is.na(end))) break\n\n    starts <- str_locate_all(input, \"\\\\{\")[[1]][, 1]\n    start <- max(starts[starts < end])\n\n    extraction <- str_sub(input, start, end)\n\n    json <- jsonlite::parse_json(extraction)\n\n    if (!any(purrr::map_lgl(json, check_red))) {\n      res <- str_extract_all(extraction, \"-{0,1}[0-9]+\")[[1]]\n      res <- sum(as.numeric(res), na.rm = TRUE)\n    } else {\n      res <- 0\n    }\n\n    str_sub(input, start, end) <- res\n  }\n\n  res <- str_extract_all(input, \"-{0,1}[0-9]+\")[[1]]\n  res <- sum(as.numeric(res), na.rm = TRUE)\n  res\n}\n\nparse_red(input)\n\n\n\n[1] 96852\n0.192 sec elapsed\n\nDay 13\nPart 1\n\n\ninput <- readLines(\"2015/13-input\")\n\nlibrary(dplyr)\nlibrary(stringr)\n\nfrom <- str_extract(input, \"\\\\w*\")\nto <- str_extract(input, \"\\\\w*\\\\.$\")\nto <- str_remove(to, \"\\\\.\")\nhappiness <- as.numeric(str_extract(input, \"[0-9]+\"))\nnegative <- str_detect(input, \"lose\")\n\ninput_df <- data.frame(\n  from,\n  to,\n  happiness = happiness * ifelse(negative, -1, 1)\n)\n\nall_perms <- combinat::permn(unique(from), m = length(unique(from)))\n\ntable_happiness <- function(x) {\n  seq_x <- seq_along(x)\n  len_x <- length(x)\n\n  data.frame(\n    from = c(x, x),\n    to = c(x[c(seq_x[-1], 1)], x[c(len_x, seq_x[-len_x])])\n  ) %>%\n    left_join(input_df, by = c(\"from\", \"to\")) %>%\n    summarize(sum = sum(happiness, na.rm = TRUE)) %>%\n    pull(sum)\n}\n\nperm_values <- vapply(all_perms, table_happiness, numeric(1))\nmax(perm_values)\n\n\n\n[1] 664\n112.873 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/13-input\")\n\nlibrary(dplyr)\nlibrary(stringr)\n\nfrom <- str_extract(input, \"\\\\w*\")\nto <- str_extract(input, \"\\\\w*\\\\.$\")\nto <- str_remove(to, \"\\\\.\")\nhappiness <- as.numeric(str_extract(input, \"[0-9]+\"))\nnegative <- str_detect(input, \"lose\")\n\ninput_df <- data.frame(\n  from,\n  to,\n  happiness = happiness * ifelse(negative, -1, 1)\n)\n\ntable_happiness <- function(x) {\n  seq_x <- seq_along(x)\n  len_x <- length(x)\n\n  data.frame(\n    from = c(x, x),\n    to = c(x[c(seq_x[-1], 1)], x[c(len_x, seq_x[-len_x])])\n  ) %>%\n    left_join(input_df, by = c(\"from\", \"to\")) %>%\n    summarize(sum = sum(happiness, na.rm = TRUE)) %>%\n    pull(sum)\n}\n\nnew_from <- c(unique(from), \"me\")\nnew_perms <- combinat::permn(unique(new_from), m = length(unique(new_from)))\nperm_values <- vapply(new_perms, table_happiness, numeric(1))\nmax(perm_values)\n\n\n\n[1] 640\n968.753 sec elapsed\n\nDay 14\nPart 1\n\n\ninput <- readLines(\"2015/14-input\")\n\nlibrary(stringr)\nlibrary(purrr)\n\nflying_distance <- function(speed, speed_dur, rest_dur, time) {\n  sum(rep(c(rep(speed, speed_dur), rep(0, rest_dur)), length.out = time))\n}\n\nnumbers <- str_extract_all(input, \"[0-9]+\")\nnumbers <- map(numbers, as.numeric)\nnames(numbers) <- str_extract(input, \"\\\\w*\")\n\nditances <- map_dbl(numbers, ~ flying_distance(.x[1], .x[2], .x[3], 2503))\nsort(ditances, decreasing = TRUE)[1]\n\n\n\nCupid \n 2696 \n0.019 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/14-input\")\n\nlibrary(stringr)\nlibrary(purrr)\nlibrary(dplyr)\n\nflying_distance_cumsum <- function(speed, speed_dur, rest_dur, time) {\n  cumsum(rep(c(rep(speed, speed_dur), rep(0, rest_dur)), length.out = time))\n}\n\nnumbers <- str_extract_all(input, \"[0-9]+\")\nnumbers <- map(numbers, as.numeric)\nnames(numbers) <- str_extract(input, \"\\\\w*\")\n\nditances <- map2_dfr(\n  numbers,\n  names(numbers),\n  ~ data.frame(\n      location = flying_distance_cumsum(.x[1], .x[2], .x[3], 2503),\n      time = seq_len(2503),\n      reindeer = .y\n    )\n)\n\nditances %>%\n  group_by(time) %>%\n  slice_max(location, n = 1) %>%\n  ungroup() %>%\n  count(reindeer, sort = TRUE)\n\n\n\n# A tibble: 7 × 2\n  reindeer     n\n  <chr>    <int>\n1 Rudolph   1084\n2 Cupid      838\n3 Donner     277\n4 Dancer     199\n5 Comet      121\n6 Prancer     24\n7 Vixen       13\n0.39 sec elapsed\n\nDay 15\nPart 1\n\n\nlibrary(dplyr)\n\n# Hand imported input\nvalues <- list(\n  Sprinkles =    c(capacity = 5, durability =-1, flavor = 0, texture = 0, calories = 5),\n  PeanutButter = c(capacity =-1, durability = 3, flavor = 0, texture = 0, calories = 1),\n  Frosting =     c(capacity = 0, durability =-1, flavor = 4, texture = 0, calories = 6),\n  Sugar =        c(capacity =-1, durability = 0, flavor = 0, texture = 2, calories = 8)\n)\n\nfourway_sum <- function(n) {\n  expand.grid(Sprinkles = 0:100,\n              PeanutButter = 0:100,\n              Frosting = 0:100) %>%\n    filter(Sprinkles + PeanutButter + Frosting == n) %>%\n    mutate(Sugar = 100 - n)\n}\n\ncombinations <- purrr::map_dfr(0:100, fourway_sum)\n\nbatter_mizer <- function(Sprinkles, PeanutButter, Frosting, Sugar) {\n  sum <- values[[\"Sprinkles\"]] * Sprinkles +\n         values[[\"PeanutButter\"]] * PeanutButter +\n         values[[\"Frosting\"]] * Frosting +\n         values[[\"Sugar\"]] * Sugar\n\n  sum <- pmax(sum, 0)\n\n  prod(sum[1:4])\n}\n\nres <- purrr::pmap_dbl(combinations, batter_mizer)\nmax(res)\n\n\n\n[1] 13882464\n10.841 sec elapsed\n\nPart 2\n\n\nlibrary(dplyr)\n\n# Hand imported input\nvalues <- list(\n  Sprinkles =    c(capacity = 5, durability =-1, flavor = 0, texture = 0, calories = 5),\n  PeanutButter = c(capacity =-1, durability = 3, flavor = 0, texture = 0, calories = 1),\n  Frosting =     c(capacity = 0, durability =-1, flavor = 4, texture = 0, calories = 6),\n  Sugar =        c(capacity =-1, durability = 0, flavor = 0, texture = 2, calories = 8)\n)\n\nbatter_mizer_500_cal <- function(Sprinkles, PeanutButter, Frosting, Sugar) {\n  sum <- values[[\"Sprinkles\"]] * Sprinkles +\n    values[[\"PeanutButter\"]] * PeanutButter +\n    values[[\"Frosting\"]] * Frosting +\n    values[[\"Sugar\"]] * Sugar\n\n  sum <- pmax(sum, 0)\n\n  if (sum[5] != 500) return(0)\n\n  prod(sum[1:4])\n}\n\nres <- purrr::pmap_dbl(combinations, batter_mizer_500_cal)\nmax(res)\n\n\n\n[1] 11171160\n3.21 sec elapsed\n\nDay 16\nPart 1\n\n\nlibrary(magrittr)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\n\ninput <- readLines(\"2015/16-input\")\n\nsues <- input %>%\n  str_remove(\"^Sue [0-9]*: \")\n\nthings <- sues %>%\n  str_remove_all(\": [0-9]*\") %>%\n  str_split(\", \") %>%\n  unlist()\n\nvalues <- sues %>%\n  str_extract_all(\"[0-9]+\") %>%\n  unlist() %>%\n  as.numeric()\n\ntibble(sue = rep(seq_len(length(input)), each = 3),\n       things, values) %>%\n  pivot_wider(names_from = things,values_from = values) %>%\n  filter(\n    children == 3 | is.na(children),\n    cats == 7 | is.na(cats),\n    samoyeds == 2 | is.na(samoyeds),\n    pomeranians == 3 | is.na(pomeranians),\n    akitas == 0 | is.na(akitas),\n    vizslas == 0 | is.na(vizslas),\n    goldfish == 5 | is.na(goldfish),\n    trees == 3 | is.na(trees),\n    cars == 2 | is.na(cars),\n    perfumes == 1 | is.na(perfumes)\n  )\n\n\n\n# A tibble: 1 × 11\n    sue goldfish trees akitas  cars perfumes vizslas children  cats\n  <int>    <dbl> <dbl>  <dbl> <dbl>    <dbl>   <dbl>    <dbl> <dbl>\n1   103        5    NA     NA     2        1      NA       NA    NA\n# … with 2 more variables: pomeranians <dbl>, samoyeds <dbl>\n0.029 sec elapsed\n\nPart 2\n\n\nlibrary(magrittr)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\n\ninput <- readLines(\"2015/16-input\")\n\nsues <- input %>%\n  str_remove(\"^Sue [0-9]*: \")\n\nthings <- sues %>%\n  str_remove_all(\": [0-9]*\") %>%\n  str_split(\", \") %>%\n  unlist()\n\nvalues <- sues %>%\n  str_extract_all(\"[0-9]+\") %>%\n  unlist() %>%\n  as.numeric()\n\ntibble(sue = rep(seq_len(length(input)), each = 3),\n       things, values) %>%\n  pivot_wider(names_from = things,values_from = values) %>%\n  filter(\n    children == 3 | is.na(children),\n    cats > 7 | is.na(cats),\n    samoyeds == 2 | is.na(samoyeds),\n    pomeranians < 3 | is.na(pomeranians),\n    akitas == 0 | is.na(akitas),\n    vizslas == 0 | is.na(vizslas),\n    goldfish < 5 | is.na(goldfish),\n    trees > 3 | is.na(trees),\n    cars == 2 | is.na(cars),\n    perfumes == 1 | is.na(perfumes)\n  )\n\n\n\n# A tibble: 1 × 11\n    sue goldfish trees akitas  cars perfumes vizslas children  cats\n  <int>    <dbl> <dbl>  <dbl> <dbl>    <dbl>   <dbl>    <dbl> <dbl>\n1   405       NA     8     NA     2        1      NA       NA    NA\n# … with 2 more variables: pomeranians <dbl>, samoyeds <dbl>\n0.023 sec elapsed\n\nDay 17\nPart 1\n\n\ninput <- readLines(\"2015/17-input\")\n\ninput <- as.numeric(input)\n\nall_sets <- expand.grid(purrr::map(seq_along(input), ~c(F, T)))\n\nmatrix_vals <- t(t(as.matrix(all_sets)) * input)\n\nsum(rowSums(matrix_vals) == 150)\n\n\n\n[1] 654\n1.788 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/17-input\")\n\ninput <- as.numeric(input)\n\nall_sets <- expand.grid(purrr::map(seq_along(input), ~c(F, T)))\n\nmatrix_vals <- t(t(as.matrix(all_sets)) * input)\n\nnum_containers <- rowSums(matrix_vals[rowSums(matrix_vals) == 150, ] > 0)\n\ntable(num_containers)[1]\n\n\n\n 4 \n57 \n1.604 sec elapsed\n\nDay 18\nPart 1\n\n\ninput <- readLines(\"2015/18-input\")\n\nlibrary(magrittr)\n\nmat <- strsplit(input, \"\") %>%\n  purrr::map(~.x == \"#\") %>%\n  Reduce(rbind, .)\n\nrownames(mat) <- NULL\n\nmat_update <- matrix(NA, nrow = nrow(mat), ncol = ncol(mat))\n\nmax_row <- nrow(mat)\nmax_col <- ncol(mat)\n\nfor (i in seq_len(100)) {\n  for (row in seq_len(nrow(mat_update))) {\n    for (col in seq_len(ncol(mat_update))) {\n\n      keep <- mat[row, col]\n\n      mat[row, col] <- NA\n\n      neighbors <- sum(na.rm = TRUE,\n                       mat[\n                         seq(max(row - 1, 1), min(row + 1, max_row)),\n                         seq(max(col - 1, 1), min(col + 1, max_col))\n                       ]\n      )\n\n      if (keep) {\n        mat_update[row, col] <- neighbors %in% c(2, 3)\n      } else {\n        mat_update[row, col] <- neighbors == 3\n      }\n\n      mat[row, col] <- keep\n\n    }\n  }\n\n  mat <- mat_update\n}\n\nsum(mat)\n\n\n\n[1] 814\n13.285 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/18-input\")\nlibrary(magrittr)\n\nmat <- strsplit(input, \"\") %>%\n  purrr::map(~.x == \"#\") %>%\n  Reduce(rbind, .)\n\nrownames(mat) <- NULL\n\nmat_update <- matrix(TRUE, nrow = nrow(mat), ncol = ncol(mat))\n\nmax_row <- nrow(mat)\nmax_col <- ncol(mat)\n\nmat[1, 1] <- TRUE\nmat[1, max_col] <- TRUE\nmat[max_row, 1] <- TRUE\nmat[max_row, max_col] <- TRUE\n\nfor (i in seq_len(100)) {\n  for (row in seq_len(nrow(mat_update))) {\n    for (col in seq_len(ncol(mat_update))) {\n\n      if ((row == 1 & col == 1) |\n          (row == 1 & col == max_col) |\n          (row == max_row & col == 1) |\n          (row == max_row & col == max_col)) next\n\n      keep <- mat[row, col]\n\n      mat[row, col] <- NA\n\n      neighbors <- sum(na.rm = TRUE,\n                       mat[\n                         seq(max(row - 1, 1), min(row + 1, max_row)),\n                         seq(max(col - 1, 1), min(col + 1, max_col))\n                       ]\n      )\n\n      if (keep) {\n        mat_update[row, col] <- neighbors %in% c(2, 3)\n      } else {\n        mat_update[row, col] <- neighbors == 3\n      }\n\n      mat[row, col] <- keep\n\n    }\n  }\n\n  mat <- mat_update\n}\n\nsum(mat)\n\n\n\n[1] 924\n15.308 sec elapsed\n\nDay 19\nPart 1\n\n\ninput <- readLines(\"2015/19-input\")\n\nmolecules <- input[length(input)]\n\nkey <- input[-length(input)]\nkey <- key[key != \"\"]\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\n\nkey_tbl <- tibble(key) %>%\n  separate(key, c(\"from\", \"to\"), \" => \")\n\nkeys <- split(key_tbl$to, key_tbl$from)\n\nres <- character()\n\nfor (k in seq_along(keys)) {\n  k <- keys[k]\n\n  locs <- str_locate_all(molecules, names(k))[[1]]\n\n  for (i in seq_len(nrow(locs))) {\n    new_mole <- molecules\n\n    str_sub(new_mole, locs[i, \"start\"], locs[i, \"end\"]) <- k[[1]]\n\n    res <- c(res, new_mole)\n  }\n}\n\nlength(unique(res))\n\n\n\n[1] 535\n0.013 sec elapsed\n\nPart 2\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\n\ninput <- readLines(\"2015/19-input\")\n\nmolecules <- input[length(input)]\n\nkey <- input[-length(input)]\nkey <- key[key != \"\"]\n\nkey_tbl <- tibble(key) %>%\n  separate(key, c(\"from\", \"to\"), \" => \")\n\nrev_keys <- split(key_tbl$from, key_tbl$to)\ncount <- 0\n\nrepeat {\n  if (molecules == \"e\") break\n\n  r_key <- sample(rev_keys, 1)\n\n\n  if (str_detect(molecules, names(r_key))) {\n    count <- count + str_count(molecules, names(r_key))\n    molecules <- str_replace_all(molecules, names(r_key), r_key[[1]])\n  }\n\n}\n\ncount\n\n\n\n[1] 212\n0.023 sec elapsed\n\nDay 20\nPart 1\n\n\ninput <- 34000000\n\nlibrary(numbers)\n\ni <- 0\n\nrepeat {\n  i <- i + 1\n  if (sum(divisors(i)) * 10 >= input) break\n}\ni\n\n\n\n[1] 786240\n218.098 sec elapsed\n\nPart 2\n\n\ninput <- 34000000\n\nlibrary(numbers)\n\nregister <- numeric(input)\n\ni <- 0\n\nrepeat {\n  i <- i + 1\n\n  divs <- divisors(i)\n\n  register[divs] <- register[divs] + 1\n\n  if (sum((register[divs] <= 50) * divs) * 11 >= input) break\n\n}\ni\n\n\n\n[1] 831600\n230.441 sec elapsed\n\nDay 21\nPart 1\n\n\nweapon_tbl <- tibble::tribble(\n  ~Cost, ~Damage, ~Armor,\n  8,     4,       0,\n  10,    5,       0,\n  25,    6,       0,\n  40,    7,       0,\n  74,    8,       0\n)\n\narmor_tbl <- tibble::tribble(\n  ~Cost, ~Damage, ~Armor,\n  13,    0,       1,\n  31,    0,       2,\n  53,    0,       3,\n  75,    0,       4,\n  102,   0,       5,\n  0,     0,       0\n)\n\nring_tbl <- tibble::tribble(\n  ~Cost, ~Damage, ~Armor,\n  25,    1,       0,\n  50,    2,       0,\n  100,   3,       0,\n  20,    0,       1,\n  40,    0,       2,\n  80,    0,       3,\n  0,     0,       0\n)\n\nrings <- rbind(as.data.frame(t(combn(7, 2))), c(7, 7))\nnames(rings) <- c(\"ring1\", \"ring2\")\n\noutfits <- tidyr::expand_grid(rings,\n                              weapon = 1:5,\n                              armor = 1:6)\n\nbattle <- function(player_atk, player_armor, player_hp = 100,\n                   boss_hp = 103, boss_atk = 9, boss_armor = 2) {\n  repeat {\n    damage <- max(player_atk - boss_armor, 1)\n    boss_hp <- boss_hp - damage\n\n    if (boss_hp <= 0) return(TRUE)\n\n    damage <- max(boss_atk - player_armor, 1)\n    player_hp <- player_hp - damage\n\n    if (player_hp <= 0) return(FALSE)\n\n  }\n}\n\npre_battle <- function(ring1, ring2, weapon, armor) {\n  outfit <- dplyr::bind_rows(\n    ring_tbl[c(ring1, ring2), ],\n    weapon_tbl[weapon, ],\n    armor_tbl[armor, ]\n  )\n\n  if (battle(sum(outfit$Damage), sum(outfit$Armor))) {\n    return(sum(outfit$Cost))\n  } else {\n    return(NA)\n  }\n}\n\nmin(purrr::pmap_dbl(outfits, pre_battle), na.rm = TRUE)\n\n\n\n[1] 121\n0.153 sec elapsed\n\nPart 2\n\n\nweapon_tbl <- tibble::tribble(\n  ~Cost, ~Damage, ~Armor,\n  8,     4,       0,\n  10,    5,       0,\n  25,    6,       0,\n  40,    7,       0,\n  74,    8,       0\n)\n\narmor_tbl <- tibble::tribble(\n  ~Cost, ~Damage, ~Armor,\n  13,    0,       1,\n  31,    0,       2,\n  53,    0,       3,\n  75,    0,       4,\n  102,   0,       5,\n  0,     0,       0\n)\n\nring_tbl <- tibble::tribble(\n  ~Cost, ~Damage, ~Armor,\n  25,    1,       0,\n  50,    2,       0,\n  100,   3,       0,\n  20,    0,       1,\n  40,    0,       2,\n  80,    0,       3,\n  0,     0,       0\n)\n\nrings <- rbind(as.data.frame(t(combn(7, 2))), c(7, 7))\nnames(rings) <- c(\"ring1\", \"ring2\")\n\noutfits <- tidyr::expand_grid(rings,\n                              weapon = 1:5,\n                              armor = 1:6)\n\n\nbattle <- function(player_atk, player_armor, player_hp = 100,\n                   boss_hp = 103, boss_atk = 9, boss_armor = 2) {\n  repeat {\n    damage <- max(player_atk - boss_armor, 1)\n    boss_hp <- boss_hp - damage\n\n    if (boss_hp <= 0) return(TRUE)\n\n    damage <- max(boss_atk - player_armor, 1)\n    player_hp <- player_hp - damage\n\n    if (player_hp <= 0) return(FALSE)\n\n  }\n}\n\npre_battle <- function(ring1, ring2, weapon, armor) {\n  outfit <- dplyr::bind_rows(\n    ring_tbl[c(ring1, ring2), ],\n    weapon_tbl[weapon, ],\n    armor_tbl[armor, ]\n  )\n\n  if (battle(sum(outfit$Damage), sum(outfit$Armor))) {\n    return(NA)\n  } else {\n    return(sum(outfit$Cost))\n  }\n}\n\nmax(purrr::pmap_dbl(outfits, pre_battle), na.rm = TRUE)\n\n\n\n[1] 201\n0.16 sec elapsed\n\nDay 22\nDay 23\nPart 1\n\n\nlibrary(stringr)\nlibrary(magrittr)\nlibrary(bit64)\n\ninput <- readLines(\"2015/23-input\")\n\ncomputer <- function(a, b, input) {\n  loc <- 1\n  reg <- list(a = as.integer64(a), b = as.integer64(b))\n  repeat {\n    if (loc > length(input)) break\n    ins <- stringr::str_sub(input[loc], 1, 3)\n\n    if (ins == \"jio\") {\n      parts <- str_remove(input[loc], \".{4}\") %>%\n        str_split(\", \\\\+{0,1}\") %>%\n        .[[1]]\n\n      if (reg[[parts[1]]] == 1) {\n        loc <- loc + as.numeric(parts[2])\n      } else {\n        loc <- loc + 1\n      }\n\n    } else if (ins == \"inc\") {\n      regis_id <- str_remove(input[loc], \".{4}\")\n      reg[[regis_id]] <-reg[[regis_id]] + 1\n      loc <- loc + 1\n    } else if (ins == \"tpl\") {\n\n      regis_id <- str_remove(input[loc], \".{4}\")\n      reg[[regis_id]] <- reg[[regis_id]] * 3\n      loc <- loc + 1\n    } else if (ins == \"jmp\") {\n      offset <- str_remove(input[loc], \"jmp \\\\+{0,1}\")\n      loc <- loc + as.numeric(offset)\n    } else if (ins == \"jie\") {\n      parts <- str_remove(input[loc], \".{4}\") %>%\n        str_split(\", \\\\+{0,1}\") %>%\n        .[[1]]\n\n      if((reg[[parts[1]]] %% 2) == 0) {\n        loc <- loc + as.numeric(parts[2])\n      } else {\n        loc <- loc + 1\n      }\n    } else if (ins == \"hlf\") {\n      regis_id <- str_remove(input[loc], \".{4}\")\n      reg[[regis_id]] <- reg[[regis_id]] / 2\n      loc <- loc + 1\n    }\n  }\n\n  reg$b\n}\n\ncomputer(0, 0, input)\n\n\n\ninteger64\n[1] 255\n0.24 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\nlibrary(magrittr)\nlibrary(bit64)\n\ninput <- readLines(\"2015/23-input\")\n\ncomputer <- function(a, b, input) {\n  loc <- 1\n  reg <- list(a = as.integer64(a), b = as.integer64(b))\n  repeat {\n    if (loc > length(input)) break\n    ins <- stringr::str_sub(input[loc], 1, 3)\n\n    if (ins == \"jio\") {\n      parts <- str_remove(input[loc], \".{4}\") %>%\n        str_split(\", \\\\+{0,1}\") %>%\n        .[[1]]\n\n      if (reg[[parts[1]]] == 1) {\n        loc <- loc + as.numeric(parts[2])\n      } else {\n        loc <- loc + 1\n      }\n\n    } else if (ins == \"inc\") {\n      regis_id <- str_remove(input[loc], \".{4}\")\n      reg[[regis_id]] <-reg[[regis_id]] + 1\n      loc <- loc + 1\n    } else if (ins == \"tpl\") {\n\n      regis_id <- str_remove(input[loc], \".{4}\")\n      reg[[regis_id]] <- reg[[regis_id]] * 3\n      loc <- loc + 1\n    } else if (ins == \"jmp\") {\n      offset <- str_remove(input[loc], \"jmp \\\\+{0,1}\")\n      loc <- loc + as.numeric(offset)\n    } else if (ins == \"jie\") {\n      parts <- str_remove(input[loc], \".{4}\") %>%\n        str_split(\", \\\\+{0,1}\") %>%\n        .[[1]]\n\n      if((reg[[parts[1]]] %% 2) == 0) {\n        loc <- loc + as.numeric(parts[2])\n      } else {\n        loc <- loc + 1\n      }\n    } else if (ins == \"hlf\") {\n      regis_id <- str_remove(input[loc], \".{4}\")\n      reg[[regis_id]] <- reg[[regis_id]] / 2\n      loc <- loc + 1\n    }\n  }\n\n  reg$b\n}\n\ncomputer(1, 0, input)\n\n\n\ninteger64\n[1] 334\n0.296 sec elapsed\n\nDay 24\nPart 1\n\n\ninput <- as.numeric(readLines(\"2015/24-input\"))\n\ntotal <- sum(input) / 3\n\nsplit_vec <- function(input, total) {\n  res <- list()\n  for (i in seq_along(input)) {\n    combs <- combn(input, i)\n    colsum_combs <- colSums(combs)\n    if (any(colsum_combs == total)) {\n      res <- c(res, list(combs[, which(colsum_combs == total)]))\n      break\n    }\n  }\n  res\n}\n\nfirst_group <- split_vec(input, total)\n\nsplit_vec(setdiff(input, first_group[[1]][, 1]), total)\n\norder(apply(first_group[[1]], 2, prod))\n\nprod(first_group[[1]][, 1])\n\n\n\n[1] 10439961859\n1.104 sec elapsed\n\nPart 2\n\n\ninput <- as.numeric(readLines(\"2015/24-input\"))\n\ntotal <- sum(input) / 4\n\nsplit_vec <- function(input, total) {\n  res <- list()\n  for (i in seq_along(input)) {\n    combs <- combn(input, i)\n    colsum_combs <- colSums(combs)\n    if (any(colsum_combs == total)) {\n      res <- c(res, list(combs[, which(colsum_combs == total)]))\n      break\n    }\n  }\n  res\n}\n\nfirst_group <- split_vec(input, total)\n\nsplit_vec(setdiff(input, first_group[[1]][, 1]), total)\n\norder(apply(first_group[[1]], 2, prod))\n\nprod(first_group[[1]][, 1])\n\n\n\n[1] 72050269\n0.108 sec elapsed\n\nDay 25\nPart 1\n\n\nvalue <- 20151125\n\nx <- 1\ny <- 1\n\nrepeat {\n  if (y == 1) {\n    y <- x + 1\n    x <- 1\n  } else {\n    y <- y - 1\n    x <- x + 1\n  }\n  value <- (value * 252533) %% 33554393\n  if (x == 3075 & y == 2981) break\n}\n\nvalue\n\n\n\n[1] 9132360\n7.474 sec elapsed\n\n\n\n\n\n",
      "last_modified": "2024-12-02T22:28:18-08:00"
    },
    {
      "path": "2016.html",
      "title": "My 2016 Solutions",
      "author": [],
      "contents": "\n\n\n\n\n\nDay 1\nPart 1\n\n\nlibrary(stringr)\ninput <- readLines(\"2016/01-input\")\n\ninstructions <- strsplit(input, \", \")[[1]]\n\ndirections <- str_extract(instructions, \".{1}\")\nvalue <- as.numeric(str_extract(instructions, \"[0-9]+\"))\n\nposition <- c(0, 0)\narrow <- c(0, 1)\n\nfor (i in seq_along(directions)) {\n  if (directions[i] == \"R\") {\n    arrow <- rev(arrow) * c(1, -1)\n  } else if (directions[i] == \"L\") {\n    arrow <- rev(arrow * c(1, -1))\n  }\n  position <- position + arrow * value[i]\n}\nsum(abs(position))\n\n\n\n[1] 230\n0.02 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\ninput <- readLines(\"2016/01-input\")\n\ninstructions <- strsplit(input, \", \")[[1]]\n\ndirections <- str_extract(instructions, \".{1}\")\nvalue <- as.numeric(str_extract(instructions, \"[0-9]+\"))\n\nposition <- matrix(0, nrow = 1, ncol = 2)\narrow <- matrix(c(0, 1), nrow = 1, ncol = 2)\n\nlast <- function(x) x[nrow(x), ]\n\nfor (i in seq_along(directions)) {\n  if (directions[i] == \"R\") {\n    arrow <- rev(arrow) * c(1, -1)\n  } else if (directions[i] == \"L\") {\n    arrow <- rev(arrow * c(1, -1))\n  }\n\n  for (step in seq_len(value[i])) {\n    position <- rbind(position, arrow + last(position))\n  }\n}\n\nsum(abs(position[which(duplicated(position))[1], ]))\n\n\n\n[1] 154\n0.037 sec elapsed\n\nDay 2\nPart 1\n\n\ninput <- readLines(\"2016/02-input\")\n\ndirections <- strsplit(input, \"\")\n\npad <- matrix(c(1, 4, 7, 2, 5, 8, 3, 6, 9), nrow = 3)\n\nmove <- list(U = c(-1, 0), D = c(1, 0), L = c(0, -1), R = c(0, 1))\n\npos <- c(2, 2)\n\npassword <- numeric()\n\nfor (i in directions) {\n  for (j in i) {\n    pos <- pmax(pmin(pos + move[[j]], 3), 1)\n  }\n  password <- c(password, pad[pos[1], pos[2]])\n}\n\npaste(password, collapse = \"\")\n\n\n\n[1] \"47978\"\n0.048 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2016/02-input\")\n\ndirections <- strsplit(input, \"\")\n\npad <- matrix(c(NA, NA, 5, NA, NA,\n                NA, 2, 6, \"A\", NA,\n                1, 3, 7, \"B\", \"D\",\n                NA, 4, 8, \"C\", NA,\n                NA, NA, 9, NA, NA), nrow = 5)\n\nmove <- list(U = c(-1, 0), D = c(1, 0), L = c(0, -1), R = c(0, 1))\n\npos <- c(3, 1)\n\npassword <- numeric()\n\nfor (i in directions) {\n  for (j in i) {\n\n    my_move <- move[[j]]\n    if (j == \"U\" & pad[pos[1], pos[2]] %in% c(\"5\", \"2\", \"1\", \"4\", \"9\") ||\n        j == \"D\" & pad[pos[1], pos[2]] %in% c(\"5\", \"A\", \"D\", \"C\", \"9\") ||\n        j == \"L\" & pad[pos[1], pos[2]] %in% c(\"1\", \"2\", \"5\", \"A\", \"D\") ||\n        j == \"R\" & pad[pos[1], pos[2]] %in% c(\"1\", \"4\", \"9\", \"C\", \"D\")) {\n      my_move <- c(0, 0)\n    }\n\n    pos <- pos + my_move\n  }\n  password <- c(password, pad[pos[1], pos[2]])\n}\n\npaste(password, collapse = \"\")\n\n\n\n[1] \"659AD\"\n0.062 sec elapsed\n\nDay 3\nPart 1\n\n\ninput <- readLines(\"2016/03-input\")\n\nvalid_triangle <- function(x) {\n  numbers <- stringr::str_extract_all(x, pattern = \"[0-9]+\")[[1]]\n  numbers <- sort(as.numeric(numbers))\n  numbers[3] < sum(numbers[-3])\n}\n\nsum(purrr::map_lgl(input, valid_triangle))\n\n\n\n[1] 1050\n0.183 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2016/03-input\")\n\nnumbers <- unlist(stringr::str_extract_all(input, \"[0-9]+\"))\n\nnumbers <- matrix(as.numeric(t(matrix(as.numeric(numbers),\n                                      byrow = FALSE, nrow = 3))),\n                  byrow = TRUE, ncol = 3)\n\nvalid_triangle <- function(x) {\n  x <- sort(as.numeric(x))\n  x[3] < sum(x[-3])\n}\n\nsum(apply(numbers, 1, valid_triangle))\n\n\n\n[1] 1921\n0.143 sec elapsed\n\nDay 4\nPart 1\n\n\ninput <- readLines(\"2016/04-input\")\n\ndecoy_value <- function(x) {\n  name <- stringr::str_extract(x, \"[a-z\\\\-]+\")\n  name <- stringr::str_extract_all(name, \"[a-z]\")[[1]]\n\n  checksum <- stringr::str_extract(x, \"\\\\[.+\")\n  checksum <- stringr::str_extract(checksum, \"[a-z]+\")\n\n  sector_id <- as.numeric(stringr::str_extract(x, \"[0-9]+\"))\n\n  is_real <- paste(names(sort(table(name), decreasing = TRUE)[1:5]), collapse = \"\") == checksum\n\n  sector_id * is_real\n}\n\nsum(purrr::map_dbl(input, decoy_value))\n\n\n\n[1] 278221\n0.529 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2016/04-input\")\n\ndecoy_value <- function(x) {\n  name <- stringr::str_extract(x, \"[a-z\\\\-]+\")\n  name <- stringr::str_extract_all(name, \"[a-z]\")[[1]]\n\n  checksum <- stringr::str_extract(x, \"\\\\[.+\")\n  checksum <- stringr::str_extract(checksum, \"[a-z]+\")\n\n  sector_id <- as.numeric(stringr::str_extract(x, \"[0-9]+\"))\n\n  is_real <- paste(names(sort(table(name), decreasing = TRUE)[1:5]), collapse = \"\") == checksum\n\n  sector_id * is_real\n}\n\nreal_inputs <- input[purrr::map_dbl(input, decoy_value) > 0]\n\ndecrypt <- function(x) {\n  value <- as.numeric(stringr::str_extract(x, \"[0-9]+\"))\n\n  shift <- value %% 26\n\n  key <- c(letters[-seq_len(shift)], letters[seq_len(shift)], \" \")\n  names(key) <- c(letters, \"-\")\n\n  code <- strsplit(stringr::str_remove(x, \"[0-9]+\"), \"\")[[1]]\n  paste(key[code], collapse = \"\")\n}\n\ndecrypted <- purrr::map_chr(real_inputs, decrypt)\n\nreal_inputs[which(stringr::str_detect(decrypted, \"north\"))]\n\n\n\n[1] \"ghkmaihex-hucxvm-lmhktzx-267[hmxka]\"\n0.664 sec elapsed\n\nDay 5\nPart 1\n\n\ninput <- \"uqwqemis\"\n\ni <- 0\n\nmd5 <- digest::getVDigest()\n\npassword <- character()\n\nrepeat {\n  i <- i + 1\n  hash <- md5(paste0(input, i), serialize = FALSE)\n  if (stringr::str_sub(hash, 1, 5) == \"00000\") {\n    password <- c(password, stringr::str_sub(hash, 6, 6))\n    cat(\"found new one at \", i, \"\\n\")\n    if (length(password) == 8) break\n  }\n}\n\npaste(password, collapse = \"\")\n\n\n\nfound new one at  4515059 \nfound new one at  6924074 \nfound new one at  8038154 \nfound new one at  13432968 \nfound new one at  13540621 \nfound new one at  14095580 \nfound new one at  14821988 \nfound new one at  16734551 \n[1] \"1a3099aa\"\n322.23 sec elapsed\n\nPart 2\n\n\ninput <- \"uqwqemis\"\n\ni <- 0\n\nmd5 <- digest::getVDigest()\n\npassword <- list()\n\nrepeat {\n  i <- i + 1\n  hash <- md5(paste0(input, i), serialize = FALSE)\n  if (stringr::str_sub(hash, 1, 5) == \"00000\") {\n    location <- stringr::str_sub(hash, 6, 6)\n    if (!(location %in% as.character(0:7))) next\n    value <- stringr::str_sub(hash, 7, 7)\n    if (!is.null(password[[location]])) next\n    password[[location]] <- value\n\n    cat(\"found new one at \", i, \"\\n\")\n    if (length(password) == 8) break\n  }\n}\n\npaste(password[as.character(0:7)], collapse = \"\")\n\n\n\nfound new one at  4515059 \nfound new one at  8038154 \nfound new one at  13432968 \nfound new one at  17743256 \nfound new one at  19112977 \nfound new one at  20616595 \nfound new one at  21658552 \nfound new one at  26326685 \n[1] \"694190cd\"\n487.524 sec elapsed\n\nDay 6\nPart 1\n\n\ninput <- readLines(\"2016/06-input\")\n\nmat <- unname(Reduce(rbind, strsplit(input, \"\")))\n\npaste(apply(mat, 2, function(x) names(sort(table(x), TRUE))[1]), collapse = \"\")\n\n\n\n[1] \"umejzgdw\"\n0.025 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2016/06-input\")\n\nmat <- unname(Reduce(rbind, strsplit(input, \"\")))\n\npaste(apply(mat, 2, function(x) names(sort(table(x), FALSE))[1]), collapse = \"\")\n\n\n\n[1] \"aovueakv\"\n0.028 sec elapsed\n\nDay 7\nPart 1\n\n\nlibrary(stringr)\nlibrary(magrittr)\n\ninput <- readLines(\"2016/07-input\")\n\nTLS_check <- function(x) {\n  outside <- str_replace_all(x, \"\\\\[.+?\\\\]\", \" \") %>%\n    str_detect(\"([a-z])((?!\\\\1)[a-z])\\\\2\\\\1\")\n\n  inside <- str_extract_all(x, \"\\\\[.+?\\\\]\")[[1]] %>%\n    paste(collapse = \" \") %>%\n    str_detect(\"([a-z])((?!\\\\1)[a-z])\\\\2\\\\1\")\n\n\n  outside & !inside\n}\n\nsum(purrr::map_lgl(input, TLS_check))\n\n\n\n[1] 110\n0.341 sec elapsed\n\nPart 2\n\n\nlibrary(purrr)\nlibrary(stringr)\nlibrary(magrittr)\n\ninput <- readLines(\"2016/07-input\")\n\nstr_chars <- function(x) {\n  str_split(x, \"\")[[1]]\n}\n\nget_anagram <- function(x, is_rev = FALSE) {\n  inds <- dplyr::lead(x, 2) == x\n  mids <- dplyr::lead(x, 1) != x\n  first <- x %in% letters\n  second <- dplyr::lead(x, 1) %in% letters\n\n  res <- map(which(inds & mids & first & second), ~x[.x + 0:1])\n  if(is_rev) {\n    res <- map(res, rev)\n  }\n\n  res\n}\n\nSSL_check <- function(x) {\n  outside <- str_replace_all(x, \"\\\\[.+?\\\\]\", \" \") %>%\n    str_chars() %>%\n    get_anagram()\n\n  inside <- str_extract_all(x, \"\\\\[.+?\\\\]\") %>%\n    .[[1]] %>%\n    paste(collapse = \"\") %>%\n    str_chars() %>%\n    get_anagram(is_rev = TRUE)\n\n  any(inside %in% outside)\n}\n\nsum(purrr::map_lgl(input, SSL_check))\n\n\n\n[1] 242\n1.268 sec elapsed\n\nDay 8\nPart 1\n\n\ninput <- readLines(\"2016/08-input\")\n\nrect <- function(grid, x, y) {\n  grid[seq_len(x), seq_len(y)] <- 11\n  grid\n}\n\nrotate <- function(x, by) {\n  len <- length(x)\n  x[c(seq(len - by + 1, len), seq(1, len -by))]\n}\n\nrotate_column <- function(grid, column, by) {\n  grid[, column] <- rotate(grid[, column], by)\n  grid\n}\n\nrotate_row <- function(grid, column, by) {\n  grid[column, ] <- rotate(grid[column, ], by)\n  grid\n}\n\ngrid <- matrix(FALSE, nrow = 6, ncol = 50)\n\nfor (i in seq_along(input)) {\n  action <- stringr::str_extract(input[i], \"(rect|row|column)\")\n  dims <- as.numeric(stringr::str_extract_all(input[i], \"[0-9]+\")[[1]])\n\n  if (action == \"rect\") {\n    grid <- rect(grid, dims[2], dims[1])\n  } else if (action == \"row\") {\n    grid <- rotate_row(grid, dims[1]+1, dims[2])\n  } else if (action == \"column\") {\n    grid <- rotate_column(grid, dims[1]+1, dims[2])\n  }\n}\n\nsum(grid)\n\n\n\n[1] 1331\n0.031 sec elapsed\n\nPart 2\n\n\nlibrary(ggplot2)\n\ninput <- readLines(\"2016/08-input\")\n\nrect <- function(grid, x, y) {\n  grid[seq_len(x), seq_len(y)] <- 11\n  grid\n}\n\nrotate <- function(x, by) {\n  len <- length(x)\n  x[c(seq(len - by + 1, len), seq(1, len -by))]\n}\n\nrotate_column <- function(grid, column, by) {\n  grid[, column] <- rotate(grid[, column], by)\n  grid\n}\n\nrotate_row <- function(grid, column, by) {\n  grid[column, ] <- rotate(grid[column, ], by)\n  grid\n}\n\ngrid <- matrix(FALSE, nrow = 6, ncol = 50)\n\nfor (i in seq_along(input)) {\n  action <- stringr::str_extract(input[i], \"(rect|row|column)\")\n  dims <- as.numeric(stringr::str_extract_all(input[i], \"[0-9]+\")[[1]])\n\n  if (action == \"rect\") {\n    grid <- rect(grid, dims[2], dims[1])\n  } else if (action == \"row\") {\n    grid <- rotate_row(grid, dims[1]+1, dims[2])\n  } else if (action == \"column\") {\n    grid <- rotate_column(grid, dims[1]+1, dims[2])\n  }\n}\n\nreshape2::melt(grid) %>%\n  ggplot(aes(Var2, -Var1, fill = value)) +\n  geom_tile() +\n  coord_fixed() +\n  theme_void() +\n  guides(fill = \"none\")\n\n\n\n\n0.394 sec elapsed\n\nDay 9\nPart 1\n\n\nlibrary(stringr)\nlibrary(magrittr)\n\ninput <- readLines(\"2016/09-input\")\n\ndecompress <- function(input) {\n  output <- character()\n\n  repeat {\n    output <- c(output, str_extract(input, \"^[A-Z]*\"))\n    input <- str_remove(input, \"^[A-Z]*\")\n\n    if (str_count(input) == 0) break\n\n    reps <- str_extract(input, \"\\\\(.+?\\\\)\") %>%\n      str_extract_all(\"[0-9]+\") %>%\n      .[[1]] %>%\n      as.numeric()\n    input <- str_remove(input, \"\\\\(.+?\\\\)\")\n    output <- c(output, str_sub(input, 1, reps[1]) %>% rep(reps[2]))\n    input <- str_remove(input, paste0(\".{\", reps[1], \"}\", collapse = \"\"))\n\n    if (str_count(input) == 0) break\n\n  }\n\n  paste0(output, collapse = \"\")\n}\n\nnchar(decompress(input))\n\n\n\n[1] 138735\n0.03 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\n\ninput <- readLines(\"2016/09-input\")\n\ndecompress_length <- function(input) {\n\n  output <- numeric()\n\n  repeat {\n    output <- c(output, nchar(str_extract(input, \"^[A-Z]*\")))\n    input <- str_remove(input, \"^[A-Z]*\")\n\n    if (str_count(input) == 0) break\n\n    reps <- str_extract(input, \"\\\\(.+?\\\\)\") %>%\n      str_extract_all(\"[0-9]+\") %>%\n      .[[1]] %>%\n      as.numeric()\n\n    section <- str_remove(input, \"\\\\(.+?\\\\)\") %>%\n      str_sub(1, reps[1])\n\n    if (str_detect(section, \"\\\\(.+?\\\\)\")) {\n      len <- decompress_length(section)\n    } else {\n      len <- nchar(section)\n    }\n    output <- c(output, len * reps[2])\n\n    input <- str_remove(input, \"\\\\(.+?\\\\)\")\n    input <- str_remove(input, paste0(\".{\", reps[1], \"}\", collapse = \"\"))\n\n    if (str_count(input) == 0) break\n\n  }\n\n  sum(output)\n}\n\ndecompress_length(input)\n\n\n\n[1] 11125026826\n0.382 sec elapsed\n\nDay 10\nPart 1\n\n\nlibrary(stringr)\nlibrary(purrr)\n\ninput <- readLines(\"2016/10-input\")\n\nint <- as.integer\nchr <- as.character\n\nvalues <- str_subset(input, \"^value\")\ninput <- str_subset(input, \"^value\", negate = TRUE)\n\ninfo <- list(bot = list(), output = list())\n\nvalues <- str_match_all(values, \"\\\\d+\")\n\nfor (value in values) {\n  info$bot[[value[2, ]]] <- c(info$bot[[value[2, ]]], int(value[1, ]))\n}\n\nnum <- str_extract_all(input, \"\\\\d+\")\ndes <- str_extract_all(input, \"(bot|output)\")\n\ninst <- list()\n\nfor (i in seq_along(input)) {\n  inst[[num[[i]][1]]] <- list(\n    low = list(des = des[[i]][2], value = num[[i]][2]),\n    high = list(des = des[[i]][3], value = num[[i]][3])\n  )\n}\n\nrepeat {\n  selection <- info$bot[lengths(info$bot) == 2]\n  if (length(selection) == 0) break\n  if (length(selection) > 1) {\n    selection <- selection[1]\n  }\n  name <- names(selection)\n  if (identical(sort(selection[[1]]), c(17L, 61L))) {\n    cat(name)\n  }\n\n  info[[inst[[name]]$low$des]][[inst[[name]]$low$value]] <-\n    c(info[[inst[[name]]$low$des]][[inst[[name]]$low$value]], min(selection[[1]]))\n\n  info[[inst[[name]]$high$des]][[inst[[name]]$high$value]] <-\n    c(info[[inst[[name]]$high$des]][[inst[[name]]$high$value]], max(selection[[1]]))\n\n  info$bot[[name]] <- NULL\n}\n\n\n\n27\n0.045 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\nlibrary(purrr)\n\ninput <- readLines(\"2016/10-input\")\n\nint <- as.integer\nchr <- as.character\n\nvalues <- str_subset(input, \"^value\")\ninput <- str_subset(input, \"^value\", negate = TRUE)\n\ninfo <- list(bot = list(), output = list())\n\nvalues <- str_match_all(values, \"\\\\d+\")\n\nfor (value in values) {\n  info$bot[[value[2, ]]] <- c(info$bot[[value[2, ]]], int(value[1, ]))\n}\n\nnum <- str_extract_all(input, \"\\\\d+\")\ndes <- str_extract_all(input, \"(bot|output)\")\n\ninst <- list()\n\nfor (i in seq_along(input)) {\n  inst[[num[[i]][1]]] <- list(\n    low = list(des = des[[i]][2], value = num[[i]][2]),\n    high = list(des = des[[i]][3], value = num[[i]][3])\n  )\n}\n\nrepeat {\n  selection <- info$bot[lengths(info$bot) == 2]\n  if (length(selection) == 0) break\n  if (length(selection) > 1) {\n    selection <- selection[1]\n  }\n  name <- names(selection)\n  if (identical(sort(selection[[1]]), c(17L, 61L))) {\n    cat(name)\n  }\n\n  info[[inst[[name]]$low$des]][[inst[[name]]$low$value]] <-\n    c(info[[inst[[name]]$low$des]][[inst[[name]]$low$value]], min(selection[[1]]))\n\n  info[[inst[[name]]$high$des]][[inst[[name]]$high$value]] <-\n    c(info[[inst[[name]]$high$des]][[inst[[name]]$high$value]], max(selection[[1]]))\n\n  info$bot[[name]] <- NULL\n}\n\ninfo$output[[\"0\"]] * info$output[[\"1\"]] * info$output[[\"2\"]]\n\n\n\n27\n[1] 13727\n0.046 sec elapsed\n\nDay 11\nDay 12\nPart 1\n\n\ninput <- readLines(\"2016/12-input\")\n\nreg <- c(a = 0, b = 0, c = 0, d = 0)\n\nindex <- 1\ninput_len <- length(input)\n\n\nget_value <- function(values, reg) {\n  check_val <- values[2]\n  if (check_val %in% c(\"a\", \"b\", \"c\", \"d\")) {\n    check_val <- reg[values[2]]\n  } else {\n    check_val <- as.integer(check_val)\n  }\n  check_val\n}\n\nrepeat {\n  command <- substr(input[index], 1, 3)\n  values <- strsplit(input[index], \" \")[[1]]\n\n  if (command == \"cpy\") {\n    reg[values[3]] <- get_value(values, reg)\n    index <- index + 1\n  } else if (command == \"inc\") {\n    reg[values[2]] <- reg[values[2]] + 1\n    index <- index + 1\n  } else if (command == \"dec\") {\n    reg[values[2]] <- reg[values[2]] - 1\n    index <- index + 1\n  } else if (command == \"jnz\") {\n\n    check_val <- get_value(values, reg)\n    if (check_val != 0) {\n      index <- index + as.integer(values[3])\n    } else {\n      index <- index + 1\n    }\n  }\n  if (index > input_len) break\n  reg\n}\n\nreg[[\"a\"]]\n\n\n\n[1] 318009\n9.467 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2016/12-input\")\n\nreg <- c(a = 0, b = 0, c = 1, d = 0)\n\nindex <- 1\ninput_len <- length(input)\n\ninst <- strsplit(input, \" \")\n\nget_value <- function(values, reg) {\n  check_val <- values[2]\n  if (check_val %in% c(\"a\", \"b\", \"c\", \"d\")) {\n    check_val <- reg[values[2]]\n  } else {\n    check_val <- as.integer(check_val)\n  }\n  check_val\n}\n\nrepeat {\n  command <- inst[[index]][1]\n  values <- inst[[index]]\n\n  if (command == \"cpy\") {\n    reg[values[3]] <- get_value(values, reg)\n    index <- index + 1\n  } else if (command == \"inc\") {\n    reg[values[2]] <- reg[values[2]] + 1\n    index <- index + 1\n  } else if (command == \"dec\") {\n    reg[values[2]] <- reg[values[2]] - 1\n    index <- index + 1\n  } else if (command == \"jnz\") {\n\n    check_val <- get_value(values, reg)\n    if (check_val != 0) {\n      index <- index + as.integer(values[3])\n    } else {\n      index <- index + 1\n    }\n  }\n  if (index > input_len) break\n  reg\n}\n\nreg[[\"a\"]]\n\n\n\n[1] 9227663\n72.035 sec elapsed\n\nDay 13\nPart 1\n\n\ncode <- function(x, y) x*x + 3*x + 2*x*y + y + y*y\n\nnumber <- 1352\nroom <- function(x, y, number) {\n  sum(intToBits(code(x, y) + number) == 1) %% 2\n}\n\nsize <- 75\nmaze <- matrix(nrow = size, ncol = size)\nmaze[2, 2] <- 0 # 0-index\n\nfor (x in seq_len(size-1)) {\n  for (y in seq_len(size-1)) {\n    if (room(x-1, y-1, number) == 1) { # 0-index\n      maze[x, y] <- Inf\n    }\n  }\n}\n\naround <- function(x, y) {\n  list(\n    list(x = x + 0, y = y + 1),\n    list(x = x + 1, y = y + 0),\n    list(x = x + 0, y = y - 1),\n    list(x = x - 1, y = y + 0)\n  )\n}\n\nvalidate <- function(l, m) {\n\n  valid <- purrr::map_lgl(l, ~.x$x <= (size-1) && .x$y <= (size-1) && .x$x >= 1 && .x$y >= 1 && is.na(m[.x$x, .x$y]))\n\n  l <- l[valid]\n  l\n}\n\nappend <- function(x, y) {\n  c(y, x)\n}\n\nfind_lowest <- function(place, maze) {\n  neighbors <- around(place$x, place$y)\n  values <- purrr::map_dbl(neighbors, ~{\n    if (.x$x == 0 || .x$y == 0 || .x$y == size || .x$y == size) return(Inf)\n    maze[.x$x, .x$y]\n  }\n  )\n  min(values, na.rm = TRUE)\n}\n\nplaces <- list()\n\nplaces <- around(2, 2) |> # 0-index\n  validate(maze) |>\n  append(places)\n\nwhile (length(places) > 0) {\n  lowest <- find_lowest(places[[1]], maze)\n  maze[places[[1]]$x, places[[1]]$y] <- lowest + 1\n\n  places <- around(places[[1]]$x, places[[1]]$y) |>\n    validate(maze) |>\n    append(places)\n\n  places[[1]] <- NULL\n}\nmaze[31 + 1, 39 + 1]# 0-index\n\n\n\n[1] 90\n0.948 sec elapsed\n\nPart 2\n\n\ncode <- function(x, y) x*x + 3*x + 2*x*y + y + y*y\n\nnumber <- 1352\nroom <- function(x, y, number) {\n  sum(intToBits(code(x, y) + number) == 1) %% 2\n}\n\nsize <- 75\nmaze <- matrix(nrow = size, ncol = size)\nmaze[2, 2] <- 0 # 0-index\n\nfor (x in seq_len(size-1)) {\n  for (y in seq_len(size-1)) {\n    if (room(x-1, y-1, number) == 1) { # 0-index\n      maze[x, y] <- Inf\n    }\n  }\n}\n\naround <- function(x, y) {\n  list(\n    list(x = x + 0, y = y + 1),\n    list(x = x + 1, y = y + 0),\n    list(x = x + 0, y = y - 1),\n    list(x = x - 1, y = y + 0)\n  )\n}\n\nvalidate <- function(l, m) {\n\n  valid <- purrr::map_lgl(l, ~.x$x <= (size-1) && .x$y <= (size-1) && .x$x >= 1 && .x$y >= 1 && is.na(m[.x$x, .x$y]))\n\n  l <- l[valid]\n  l\n}\n\nappend <- function(x, y) {\n  c(y, x)\n}\n\nfind_lowest <- function(place, maze) {\n  neighbors <- around(place$x, place$y)\n  values <- purrr::map_dbl(neighbors, ~{\n    if (.x$x == 0 || .x$y == 0 || .x$y == size || .x$y == size) return(Inf)\n    maze[.x$x, .x$y]\n  }\n  )\n  min(values, na.rm = TRUE)\n}\n\nplaces <- list()\n\nplaces <- around(2, 2) |> # 0-index\n  validate(maze) |>\n  append(places)\n\nwhile (length(places) > 0) {\n  lowest <- find_lowest(places[[1]], maze)\n  maze[places[[1]]$x, places[[1]]$y] <- lowest + 1\n\n  places <- around(places[[1]]$x, places[[1]]$y) |>\n    validate(maze) |>\n    append(places)\n\n  places[[1]] <- NULL\n}\n\nsum(maze <= 50 & is.finite(maze))\n\n\n\n[1] 135\n0.981 sec elapsed\n\nDay 14\nPart 1\n\n\nlibrary(stringr)\nlibrary(purrr)\n\nmd5 <- digest::getVDigest()\n\nsalt <- \"ngcjuoqr\"\n\nkeys <- c()\ni <- 1\nrepeat {\n  hash <- md5(paste0(salt, i), serialize = FALSE)\n  if (str_detect(hash, \"(.)\\\\1{2,}\")) {\n    pattern <- str_extract(hash, \"(.)\\\\1{2,}\") |>\n      str_sub(1, 1) |>\n      strrep(5)\n\n    if (any(map_lgl(i + seq_len(1000), ~ str_detect(md5(paste0(salt, .x), serialize = FALSE), pattern)))) {\n      keys <- c(keys, i)\n      cat(length(keys), \": \", i, \"\\n\", sep = \"\")\n    }\n  }\n\n  if (length(keys) == 64) break\n  i <- i + 1\n}\ni\n\n\n\n1: 75\n2: 94\n3: 142\n4: 143\n5: 203\n6: 278\n7: 647\n8: 852\n9: 911\n10: 988\n11: 1015\n12: 1069\n13: 1076\n14: 1088\n15: 1138\n16: 1228\n17: 1233\n18: 1652\n19: 1951\n20: 2011\n21: 2022\n22: 2032\n23: 2104\n24: 2105\n25: 2229\n26: 2242\n27: 2271\n28: 2369\n29: 2372\n30: 2553\n31: 2817\n32: 3382\n33: 3402\n34: 3546\n35: 3620\n36: 3637\n37: 3654\n38: 4063\n39: 4266\n40: 7360\n41: 7386\n42: 7712\n43: 7755\n44: 10792\n45: 10797\n46: 10959\n47: 10979\n48: 11598\n49: 11639\n50: 11644\n51: 11962\n52: 11986\n53: 12156\n54: 12291\n55: 14651\n56: 14833\n57: 15133\n58: 15265\n59: 18292\n60: 18378\n61: 18464\n62: 18473\n63: 18577\n64: 18626\n[1] 18626\n44.139 sec elapsed\n\nPart 2\nDay 15\nPart 1\n\n\ninput <- readLines(\"2016/15-input\")\n\ninput <- input |> stringr::str_match_all(\"\\\\d+\")\n\nn_pos <- purrr::map_int(input, ~as.integer(.x[2, ]))\npos <- purrr::map_int(input, ~as.integer(.x[4, ]))\n\ni <- 0\nrepeat {\n  if (all((pos + seq_along(pos) + i) %% n_pos == 0)) break\n  i <- i + 1\n}\ni\n\n\n\n[1] 16824\n0.03 sec elapsed\n\nPart 2\nDay 16\nPart 1\n\n\ninput <- \"10111100110001111\"\n\na <- c(\"1\" = T, \"0\" = F)[strsplit(input, \"\")[[1]]]\n\nlen <- 272\n\nwhile (length(a) < len) {\n  a <- c(a, FALSE, !rev(a))\n}\na <- a[seq_len(len)]\n\nis_even <- function(x) (x %% 2) == 0\nis_odd <- function(x) (x %% 2) == 1\n\nrepeat {\n  if (is_odd(length(a))) {\n    break\n  }\n\n  a <- purrr::map_lgl(\n    split(a, rep(seq_len(length(a)/2), each = 2)),\n    ~ .x[1] == .x[2]\n  )\n}\n\npaste0(as.integer(a), collapse = \"\")\n\n\n\n[1] \"11100110111101110\"\n0.009 sec elapsed\n\nPart 2\n\n\ninput <- \"10111100110001111\"\n\na <- c(\"1\" = T, \"0\" = F)[strsplit(input, \"\")[[1]]]\n\nlen <- 35651584\n\nwhile (length(a) < len) {\n  a <- c(a, FALSE, !rev(a))\n}\na <- a[seq_len(len)]\n\nis_even <- function(x) (x %% 2) == 0\nis_odd <- function(x) (x %% 2) == 1\n\nrepeat {\n  if (is_odd(length(a))) {\n    break\n  }\n\n  a <- purrr::map_lgl(\n    split(a, rep(seq_len(length(a)/2), each = 2)),\n    ~ .x[1] == .x[2]\n  )\n}\n\npaste0(as.integer(a), collapse = \"\")\n\n\n\n[1] \"10001101010000101\"\n108.509 sec elapsed\n\nDay 17\nDay 18\nPart 1\n\n\ninput <- \"^.^^^.^..^....^^....^^^^.^^.^...^^.^.^^.^^.^^..^.^...^.^..^.^^.^..^.....^^^.^.^^^..^^...^^^...^...^.\"\nrows <- 40\n\ntiles <- strsplit(input, \"\")[[1]] == \"^\"\n\nroom <- matrix(FALSE, nrow = rows, ncol = length(tiles) + 2)\n\nroom[1, seq_along(tiles) + 1] <- tiles\n\nfor (row in seq(2, nrow(room))) {\n  for (col in seq(2, ncol(room) - 1)) {\n    parent <- room[row - 1, -1:1 + col]\n\n    if (\n      identical(c(T, T, F), parent) ||\n      identical(c(F, T, T), parent) ||\n      identical(c(T, F, F), parent) ||\n      identical(c(F, F, T), parent)\n    ) {\n      room[row, col] <- TRUE\n    }\n  }\n}\n\nsum(!room[, seq_along(tiles) + 1])\n\n\n\n[1] 1926\n0.02 sec elapsed\n\nPart 2\n\n\ninput <- \"^.^^^.^..^....^^....^^^^.^^.^...^^.^.^^.^^.^^..^.^...^.^..^.^^.^..^.....^^^.^.^^^..^^...^^^...^...^.\"\nrows <- 400000\n\ntiles <- strsplit(input, \"\")[[1]] == \"^\"\n\nroom <- matrix(FALSE, nrow = rows, ncol = length(tiles) + 2)\n\nroom[1, seq_along(tiles) + 1] <- tiles\n\nfor (row in seq(2, nrow(room))) {\n  for (col in seq(2, ncol(room) - 1)) {\n    parent <- room[row - 1, -1:1 + col]\n\n    if (\n      identical(c(T, T, F), parent) ||\n      identical(c(F, T, T), parent) ||\n      identical(c(T, F, F), parent) ||\n      identical(c(F, F, T), parent)\n    ) {\n      room[row, col] <- TRUE\n    }\n  }\n}\n\nsum(!room[, seq_along(tiles) + 1])\n\n\n\n[1] 19986699\n112.207 sec elapsed\n\nDay 19\nPart 1\n\n\nn <- 3004953\n2 * (n - 2^(floor(log2(n)))) + 1\n\n\n\n[1] 1815603\n0.003 sec elapsed\n\nPart 2\n\n\nfun <- function(n) {\n  parts <- seq_len(n) |> as.character()\n\n  repeat {\n    parts <- parts[-floor(length(parts) / 2 + 1)]\n    if (length(parts) == 1) break\n    parts <- parts[c(seq(2, length(parts)), 1)]\n  }\n  parts\n}\n\nwhich(purrr::map_chr(2:1000, fun) == \"1\")\n\n3 ^ seq(0, 14)\n\n3004953-1594323\n\n\n\n[1] 1410630\n8.672 sec elapsed\n\nDay 20\nPart 1\n\n\ninput <- readr::read_delim(\"2016/20-input\", delim = \"-\", col_names = c(\"min\", \"max\"))\n\nmin_target <- 0\nmax_target <- 4294967295\n\nnumber <- 0\n\nrepeat {\n  cond <- which(input$min <= min_target)\n  if (length(cond) == 0) break\n  cond_max <- input$max[cond]\n  min_target <- min(cond_max) + 1\n  input <- input[-cond[min(cond_max) == cond_max], ]\n}\n\nmin_target\n\n\n\n[1] 23923783\n0.425 sec elapsed\n\nPart 2\n\n\ninput <- readr::read_delim(\"2016/20-input\", delim = \"-\", col_names = c(\"min\", \"max\"))\n\ninput <- dplyr::arrange(input, min)\n\nused <- 0\ncount <- 0\n\nfor (i in seq_len(nrow(input))) {\n  if (input[i, ]$min > used + 1) {\n    count <- count + input[i, ]$min - used - 1\n  }\n  used <- max(input[i, ]$max, used)\n}\ncount\n\n\n\n[1] 125\n0.209 sec elapsed\n\nDay 21\nPart 1\n\n\nlibrary(stringr)\nint <- as.integer\nplus1 <- function(x) x + 1\n\ninput <- readLines(\"2016/21-input\")\n\npassword <- strsplit(\"abcdefgh\", \"\")[[1]]\npassword_len <- length(password)\n\nrotate_left <- function(x, n) {\n  c(password[-seq_len(1)], password[seq_len(1)])\n}\n\nfor (command in input) {\n  if (str_detect(command, \"^swap position\")) {\n    pos <- str_extract_all(command, \"\\\\d\")[[1]] |> int() |> plus1()\n    password[pos] <- rev(password[pos])\n  }\n  if (str_detect(command, \"^swap letter\")) {\n    letter <- str_sub(command, c(13, 27), c(13, 27))\n    pos <- match(letter, password)\n    password[pos] <- rev(password[pos])\n  }\n  if (str_detect(command, \"^reverse positions\")) {\n    pos <- str_extract_all(command, \"\\\\d\")[[1]] |> int() |> plus1()\n    password[pos[1]:pos[2]] <- rev(password[pos[1]:pos[2]])\n  }\n  if (str_detect(command, \"^rotate left\")) {\n    shift <- str_extract(command, \"\\\\d\") |> int()\n    if (shift == 0) next\n    password <- c(password[-seq_len(shift)], password[seq_len(shift)])\n  }\n  if (str_detect(command, \"^rotate right\")) {\n    shift <- str_extract(command, \"\\\\d\") |> int()\n    if (shift == 0) next\n    password <- c(\n      rev(rev(password)[seq_len(shift)]),\n      rev(rev(password)[-seq_len(shift)])\n    )\n  }\n  if (str_detect(command, \"^move position\")) {\n    pos <- str_extract_all(command, \"\\\\d\")[[1]] |> int() |> plus1()\n    element <- password[pos[1]]\n    password <- password[-pos[1]]\n    if (pos[2] == 1) {\n      password <- c(element, password)\n    } else if (pos[2] == password_len) {\n      password <- c(password, element)\n    } else\n      password <- c(\n        password[seq_len(pos[2]-1)],\n        element,\n        password[seq(pos[2], password_len-1)]\n      )\n  }\n  if (str_detect(command, \"^rotate based\")) {\n    letter <- str_sub(command, 36, 36)\n    shift <- match(letter, password)\n    shift <- shift\n    password <- c(\n      rev(rev(password)[seq_len(shift)]),\n      rev(rev(password)[-seq_len(shift)])\n    )\n    if (shift > 4) {\n      password <- c(\n        rev(rev(password)[seq_len(1)]),\n        rev(rev(password)[-seq_len(1)])\n      )\n    }\n  }\n}\ncat(paste(password, collapse = \"\"), \"\\n\")\n\n\n\ngcedfahb \n0.062 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\nint <- as.integer\nplus1 <- function(x) x + 1\n\ninput <- readLines(\"2016/21-input\")\n\nrotate_left <- function(x, n) {\n  c(password[-seq_len(1)], password[seq_len(1)])\n}\n\nshuffle <- function(password) {\n  password <- strsplit(password, \"\")[[1]]\n  password_len <- length(password)\n  for (command in input) {\n    if (str_detect(command, \"^swap position\")) {\n      pos <- str_extract_all(command, \"\\\\d\")[[1]] |> int() |> plus1()\n      password[pos] <- rev(password[pos])\n    }\n    if (str_detect(command, \"^swap letter\")) {\n      letter <- str_sub(command, c(13, 27), c(13, 27))\n      pos <- match(letter, password)\n      password[pos] <- rev(password[pos])\n    }\n    if (str_detect(command, \"^reverse positions\")) {\n      pos <- str_extract_all(command, \"\\\\d\")[[1]] |> int() |> plus1()\n      password[pos[1]:pos[2]] <- rev(password[pos[1]:pos[2]])\n    }\n    if (str_detect(command, \"^rotate left\")) {\n      shift <- str_extract(command, \"\\\\d\") |> int()\n      if (shift == 0) next\n      password <- c(password[-seq_len(shift)], password[seq_len(shift)])\n    }\n    if (str_detect(command, \"^rotate right\")) {\n      shift <- str_extract(command, \"\\\\d\") |> int()\n      if (shift == 0) next\n      password <- c(\n        rev(rev(password)[seq_len(shift)]),\n        rev(rev(password)[-seq_len(shift)])\n      )\n    }\n    if (str_detect(command, \"^move position\")) {\n      pos <- str_extract_all(command, \"\\\\d\")[[1]] |> int() |> plus1()\n      element <- password[pos[1]]\n      password <- password[-pos[1]]\n      if (pos[2] == 1) {\n        password <- c(element, password)\n      } else if (pos[2] == password_len) {\n        password <- c(password, element)\n      } else\n        password <- c(\n          password[seq_len(pos[2]-1)],\n          element,\n          password[seq(pos[2], password_len-1)]\n        )\n    }\n    if (str_detect(command, \"^rotate based\")) {\n      letter <- str_sub(command, 36, 36)\n      shift <- match(letter, password)\n      shift <- shift\n      password <- c(\n        rev(rev(password)[seq_len(shift)]),\n        rev(rev(password)[-seq_len(shift)])\n      )\n      if (shift > 4) {\n        password <- c(\n          rev(rev(password)[seq_len(1)]),\n          rev(rev(password)[-seq_len(1)])\n        )\n      }\n    }\n  }\n  paste(password, collapse = \"\")\n}\n\nexpand.grid(letters[1:8], letters[1:8], letters[1:8], letters[1:8], letters[1:8], letters[1:8],letters[1:8], letters[1:8])\n\n\nlibrary(combinat)\n\nkeys <- permn(letters[1:8]) |>\n  purrr::map_chr(paste, collapse = \"\") |>\n  purrr::map_chr(shuffle)\n\npermn(letters[1:8])[[which(keys == \"fbgdceah\")]] |> paste(collapse = \"\")\n\n\n\n[1] \"hegbdcfa\"\n536.444 sec elapsed\n\nDay 22\nPart 1\n\n\nlibrary(tidyverse)\ninput <- readr::read_lines(\"2016/21-input\", skip = 2) %>%\n  strsplit(\" +\") %>%\n  purrr::reduce(rbind) %>%\n  tibble::as_tibble() %>%\n  purrr::set_names(c(\"Filesystem\", \"Size\", \"Used\", \"Avail\", \"Use\")) %>%\n  tidyr::separate(Filesystem, c(\"tmp\", \"x\", \"y\"), sep = \"-\") %>%\n  mutate(across(x:y, ~ readr::parse_number(.x) %>% as.integer()))\n\nlibrary(dplyr)\npairs <- expand.grid(x0 = 0:29, y0 = 0:29, x1 = 0:29, y1 = 0:29) %>%\n  filter((abs(x0 - x1) == 1) + (abs(y0 - y1) == 1) == 1)\n\npairs %>%\n  left_join(input, by = c(\"x0\" = \"x\", \"y0\" = \"y\")) %>%\n  left_join(input, by = c(\"x1\" = \"x\", \"y1\" = \"y\")) %>%\n  filter(readr::parse_number(Used.x) <= readr::parse_number(Avail.y))\n\n\n\n [1] x0      y0      x1      y1      tmp.x   Size.x  Used.x  Avail.x\n [9] Use.x   tmp.y   Size.y  Used.y  Avail.y Use.y  \n<0 rows> (or 0-length row.names)\n0.681 sec elapsed\n\nDay 23\nDay 24\nDay 25\n\n\n\n\n",
      "last_modified": "2024-12-02T22:28:24-08:00"
    },
    {
      "path": "2017.html",
      "title": "My 2017 Solutions",
      "author": [],
      "contents": "\n\n\n\n\n\nDay 1\nPart 1\n\n\ninput <- readLines(\"2017/01-input\")\n\nchars <- as.numeric(strsplit(input, \"\")[[1]])\n\nsum(chars[chars == c(chars[-1], chars[1])])\n\n\n\n[1] 1044\n0.002 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2017/01-input\")\n\nchars <- as.numeric(strsplit(input, \"\")[[1]])\n\nlen <- seq_len(length(chars)/2)\n\nsum(chars[chars == c(chars[-len], chars[len])])\n\n\n\n[1] 1054\n0.002 sec elapsed\n\nDay 2\nPart 1\n\n\ninput <- readr::read_tsv(\"2017/02-input\", col_names = FALSE)\n\nsum(apply(as.matrix(input), 1, function(x) max(x)-min(x)))\n\n\n\n[1] 32020\n0.358 sec elapsed\n\nPart 2\n\n\ninput <- readr::read_tsv(\"2017/02-input\", col_names = FALSE)\n\nevenly <- function(x) {\n  outers <- outer(x, x, \"/\")\n\n  outers[((outers %% 1) == 0) & (outers != 1)]\n}\n\nsum(apply(as.matrix(input), 1, evenly))\n\nx <- as.numeric(input[1, ])\n\n\n\n0.088 sec elapsed\n\nDay 3\nPart 1\n\n\ninput <- scan(\"2017/03-input\")\n\ncenter <- 1\n\nright <- 2\nup <- 4\nleft <- 6\ndown <- 8\n\nring <- 1\n\nrepeat {\n  ring <- ring + 1\n  right <- down + ring + (ring - 1)\n  up <- right + ring * 2\n  left <- up + ring * 2\n  down <- left + ring * 2\n  if (any(c(right, up, left, down) >= input)) break\n}\n\nmin(abs(c(right, up, left, down) - input)) + ring\n\n\n\n[1] 371\n0.004 sec elapsed\n\nPart 2\n\n\ninput <- scan(\"2017/03-input\")\n\nget_sum <- function(x, values) {\n  neightbor_locs <- purrr::pmap_chr(\n    expand.grid(x = c(-1, 0, 1) + x[1], y = c(-1, 0, 1) + x[2]),\n    function(x, y) paste0(x, \"_\", y)\n  )\n  sum(unlist(values[neightbor_locs]), na.rm = TRUE)\n}\n\nloc <- c(0, 0)\n\nvalues <- list()\n\nvalues[paste0(loc, collapse = \"_\")] <- 1\n\nring <- 1\n\n# repeat\nring <- 0\nrepeat {\n  if (value > input) break\n  ring <- ring + 1\n\n  # right (advance)\n  loc <- loc + c(1, 0)\n\n  value <- get_sum(loc, values)\n  values[paste0(loc, collapse = \"_\")] <- value\n  cat(\"loc:\", loc, \"value:\", value, \"\\n\")\n  if (value > input) break\n\n  # go up\n  while (value <= input) {\n    loc <- loc + c(0, 1)\n\n    value <- get_sum(loc, values)\n    values[paste0(loc, collapse = \"_\")] <- value\n    cat(\"loc:\", loc, \"value:\", value, \"\\n\")\n    if (identical(loc, c(ring, ring))) break\n    if (value > input) break\n  }\n\n  # go left\n  while (value <= input) {\n    loc <- loc + c(-1, 0)\n\n    value <- get_sum(loc, values)\n    values[paste0(loc, collapse = \"_\")] <- value\n    cat(\"loc:\", loc, \"value:\", value, \"\\n\")\n    if (identical(loc, c(-ring, ring))) break\n    if (value > input) break\n  }\n\n  # go down\n  while (value <= input) {\n    loc <- loc + c(0, -1)\n\n    value <- get_sum(loc, values)\n    values[paste0(loc, collapse = \"_\")] <- value\n    cat(\"loc:\", loc, \"value:\", value, \"\\n\")\n    if (identical(loc, c(-ring, -ring))) break\n    if (value > input) break\n  }\n\n  # go right\n  while (value <= input) {\n    loc <- loc + c(1, 0)\n\n    value <- get_sum(loc, values)\n    values[paste0(loc, collapse = \"_\")] <- value\n    cat(\"loc:\", loc, \"value:\", value, \"\\n\")\n    if (identical(loc, c(ring, -ring))) break\n    if (value > input) break\n  }\n}\n\nvalue\n\n\n\n[1] 9132360\n0.015 sec elapsed\n\nDay 4\nPart 1\n\n\nlibrary(purrr)\n\ninput <- readLines(\"2017/04-input\")\n\npasswords <- strsplit(input, \" \")\n\nsum(map_lgl(passwords, ~ all(table(.x) == 1)))\n\n\n\n[1] 386\n0.08 sec elapsed\n\nPart 2\n\n\nlibrary(purrr)\n\ninput <- readLines(\"2017/04-input\")\n\npasswords <- strsplit(input, \" \")\n\norder_letters <- function(x) {\n  paste0(sort(strsplit(x, \"\")[[1]]), collapse = \"\")\n}\n\nsum(map_lgl(passwords, ~ all(table(map_chr(.x, order_letters)) == 1)))\n\n\n\n[1] 208\n0.218 sec elapsed\n\nDay 5\nPart 1\n\n\ninput <- as.numeric(readLines(\"2017/05-input\"))\n\nlen <- length(input)\n\nindex <- 1\nsteps <- 0\n\nrepeat {\n  steps <- steps + 1\n  offset <- input[index]\n  input[index] <- input[index] + 1\n  index <- index + offset\n\n  if (index < 1 | index > len) break\n}\n\nsteps\n\n\n\n[1] 364539\n0.164 sec elapsed\n\nPart 2\n\n\ninput <- as.numeric(readLines(\"2017/05-input\"))\n\nlen <- length(input)\n\nindex <- 1\nsteps <- 0\n\nrepeat {\n  steps <- steps + 1\n  offset <- input[index]\n\n  if (offset >= 3) {\n    input[index] <- input[index] - 1\n  } else {\n    input[index] <- input[index] + 1\n  }\n  index <- index + offset\n\n  if (index < 1 | index > len) break\n}\n\nsteps\n\n\n\n[1] 27477714\n8.334 sec elapsed\n\nDay 6\nPart 1\n\n\ninput <- scan(\"2017/06-input\")\n\nseen <- paste(input, collapse = \" \")\n\ninput_len <- length(input)\n\ncycles <- 0\n\nrepeat {\n  cycles <- cycles + 1\n\n  index <- min(which(max(input) == input))\n  blocks <- input[index]\n  input[index] <- 0\n\n  while (blocks > 0) {\n    index <- index + 1\n    if (index > input_len) {\n      index <- 1\n    }\n    input[index] <- input[index] + 1\n    blocks <- blocks - 1\n  }\n\n  if (paste(input, collapse = \" \") %in% seen) break\n  seen <- c(seen, paste(input, collapse = \" \"))\n}\n\ncycles\n\nlength(seen) - which(paste(input, collapse = \" \") == seen) + 1\n\n\n\n[1] 4\n0.006 sec elapsed\n\nPart 2\n\n\ninput <- scan(\"2017/06-input\")\n\nseen <- paste(input, collapse = \" \")\n\ninput_len <- length(input)\n\ncycles <- 0\n\nrepeat {\n  cycles <- cycles + 1\n\n  index <- min(which(max(input) == input))\n  blocks <- input[index]\n  input[index] <- 0\n\n  while (blocks > 0) {\n    index <- index + 1\n    if (index > input_len) {\n      index <- 1\n    }\n    input[index] <- input[index] + 1\n    blocks <- blocks - 1\n  }\n\n  if (paste(input, collapse = \" \") %in% seen) break\n  seen <- c(seen, paste(input, collapse = \" \"))\n}\n\nlength(seen) - which(paste(input, collapse = \" \") == seen) + 1\n\n\n\n[1] 4\n0.006 sec elapsed\n\nDay 7\nPart 1\n\n\ninput <- readLines(\"2017/07-input\")\n\nlibrary(stringr)\n\nloc <- str_subset(input, \"->\")[1] |>\n  str_extract(\"[a-z]+\")\n\nrepeat {\n\n  next_id <- str_detect(input, paste0(\".+\", loc))\n\n  if (all(!next_id)) break\n\n  loc <- str_extract(input[next_id], \"^[a-z]+\")\n}\n\nloc\n\n\n\n[1] \"dgoocsw\"\n0.056 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2017/07-input\")\n\nlibrary(stringr)\n\nloc <- str_subset(input, \"->\")[1] |>\n  str_extract(\"[a-z]+\")\n\nrepeat {\n\n  next_id <- str_detect(input, paste0(\".+\", loc))\n\n  if (all(!next_id)) break\n\n  loc <- str_extract(input[next_id], \"^[a-z]+\")\n}\n\nget_children <- function(x, input) {\n  str_subset(input, paste0(\"^\", x)) |>\n    str_remove(\".*> \") |>\n    str_split_1(\", \")\n}\n\nget_weight <- function(x) {\n  value <- str_subset(input, paste0(\"^\", x))\n\n  res <- str_extract(value, \"[0-9]+\") |> as.integer()\n  if (str_detect(value, \">\")) {\n    res <- res + sum(purrr::map_int(get_children(x, input), get_weight))\n  }\n  res\n}\n\nbot <- loc\n\nerror <- function(x) max(x) - min(x)\nwrong_amount  <- error(purrr::map_int(get_children(bot, input), get_weight))\n\nrepeat {\n\nchildren <- get_children(bot, input)\n\nweights <- purrr::map_int(children, get_weight)\n\nif (length(table(weights)) == 1) break\n\nbot <- children[names(table(weights)[table(weights) == 1]) == weights]\n\n}\n\nwrong_weight <- str_subset(input, paste(children, collapse = \", \")) |>\n  str_extract(\"[0-9]+\") |>\n  as.integer()\n\nwrong_weight - wrong_amount\n\n\n\n[1] 1275\n0.571 sec elapsed\n\nDay 8\nPart 1\n\n\ninput <- readLines(\"2017/08-input\")\n\ninc <- function(x, value) {\n  name <- deparse(substitute(x))\n  .GlobalEnv[[name]] <- .GlobalEnv[[name]] + value\n}\n\ndec <- function(x, value) {\n  name <- deparse(substitute(x))\n  .GlobalEnv[[name]] <- .GlobalEnv[[name]] - value\n}\n\nlibrary(stringr)\n\nregisters <- str_extract_all(input, \"[a-z]+\") |>\n  unlist() |>\n  unique() |>\n  setdiff(c(\"dec\", \"inc\", \"if\"))\n\nmaterialize <- function(name) {\n  .GlobalEnv[[name]] <- 0\n}\n\npurrr::walk(registers, materialize)\n\nreorganize <- function(x) {\n  glue::glue(\"if ({x[5]} {x[6]} {x[7]}) {x[2]}({x[1]}, {x[3]})\")\n}\n\nstr_split(input, \" \") |>\n  purrr::map_chr(reorganize) |>\n  parse(text = _) |>\n  eval()\n\npurrr::map_dbl(registers, ~eval(parse(text = .x))) |>\n  max()\n\n\n\n[1] 4902\n0.123 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2017/08-input\")\n\nhighest <- 0\n\ninc <- function(x, value) {\n  name <- deparse(substitute(x))\n  .GlobalEnv[[name]] <- .GlobalEnv[[name]] + value\n  .GlobalEnv[[\"highest\"]] <- max(.GlobalEnv[[\"highest\"]], .GlobalEnv[[name]])\n}\n\ndec <- function(x, value) {\n  name <- deparse(substitute(x))\n  .GlobalEnv[[name]] <- .GlobalEnv[[name]] - value\n  .GlobalEnv[[\"highest\"]] <- max(.GlobalEnv[[\"highest\"]], .GlobalEnv[[name]])\n}\n\nlibrary(stringr)\n\nregisters <- str_extract_all(input, \"[a-z]+\") |>\n  unlist() |>\n  unique() |>\n  setdiff(c(\"dec\", \"inc\", \"if\"))\n\nmaterialize <- function(name) {\n  .GlobalEnv[[name]] <- 0\n}\n\npurrr::walk(registers, materialize)\n\nreorganize <- function(x) {\n  glue::glue(\"if ({x[5]} {x[6]} {x[7]}) {x[2]}({x[1]}, {x[3]})\")\n}\n\nstr_split(input, \" \") |>\n  purrr::map_chr(reorganize) |>\n  parse(text = _) |>\n  eval()\n\nhighest\n\n\n\n[1] 7037\n0.12 sec elapsed\n\nDay 9\nDay 10\nDay 11\nDay 12\nDay 13\nDay 14\nDay 15\nDay 16\nDay 17\nDay 18\nDay 19\nDay 20\nDay 21\nDay 22\nDay 23\nDay 24\nDay 25\n\n\n\n\n",
      "last_modified": "2024-12-02T22:28:26-08:00"
    },
    {
      "path": "2018.html",
      "title": "My 2018 Solutions",
      "author": [],
      "contents": "\n\n\n\n\n\nDay 1\nPart 1\n\n\ninput <- readLines(\"2018/01-input\")\neval(parse(text = paste(input, collapse = \"\")))\n\n\n\n[1] 425\n0.006 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2018/01-input\")\n\ninput <- as.integer(input)\ninput_len <- length(input)\n\nres <- list()\n\ntotal <- 0\n\ni <- 0\nrepeat {\n  total <- total + input[i %% input_len + 1]\n  if (is.null(res[as.character(total)][[1]])) {\n    res[as.character(total)] <- 1\n  } else {\n    break\n  }\n  i <- i + 1\n}\ntotal\n\n\n\n[1] 57538\n464.892 sec elapsed\n\nDay 2\nPart 1\n\n\ninput <- readLines(\"2018/02-input\")\n\nchars <- strsplit(input, \"\")\nx <- input[[1]]\n\ncount_2 <- function(x) {\n  any(table(x) == 2)\n}\n\ncount_3 <- function(x) {\n  any(table(x) == 3)\n}\n\nsum(purrr::map_lgl(chars, count_2)) * sum(purrr::map_lgl(chars, count_3))\n\n\n\n[1] 6696\n0.052 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2018/02-input\")\n\ndist <- stringdist::stringdistmatrix(input, input)\n\nmatched_strings <- input[which(dist == 1) %% length(input)]\n\nmatched_letters <- strsplit(matched_strings, \"\")\n\npaste(matched_letters[[1]][matched_letters[[1]] == matched_letters[[2]]], collapse = \"\")\n\n\n\n[1] \"bvnfawcnyoeyudzrpgslimtkj\"\n0.215 sec elapsed\n\nDay 3\nPart 1\n\n\nlibrary(stringr)\n\ninput <- readLines(\"2018/03-input\")\n\ndata <- str_match(input, \"(?<id>[0-9]+) @ (?<left>[0-9]+),(?<top>[0-9]+): (?<width>[0-9]+)x(?<height>[0-9]+)\")[,-1]\ndata <- apply(data, 2, as.numeric)\n\ngrid <- matrix(0, 1000, 1000)\n\nfor (i in seq_len(nrow(data))) {\n  xs <- data[i, \"left\"] + seq_len(data[i, \"width\"])\n  ys <- data[i, \"top\"] + seq_len(data[i, \"height\"])\n  grid[xs, ys] <- grid[xs, ys] + 1\n}\n\nsum(grid >= 2)\n\n\n\n[1] 111935\n0.034 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\n\ninput <- readLines(\"2018/03-input\")\n\ndata <- str_match(input, \"(?<id>[0-9]+) @ (?<left>[0-9]+),(?<top>[0-9]+): (?<width>[0-9]+)x(?<height>[0-9]+)\")[,-1]\ndata <- apply(data, 2, as.numeric)\n\ngrid <- matrix(0, 1000, 1000)\n\nfor (i in seq_len(nrow(data))) {\n  xs <- data[i, \"left\"] + seq_len(data[i, \"width\"])\n  ys <- data[i, \"top\"] + seq_len(data[i, \"height\"])\n  if (all(grid[xs, ys] == 1)) break\n}\n\ndata[i, \"id\"]\n\n\n\n  id \n1327 \n0.042 sec elapsed\n\nDay 4\nPart 1\n\n\nlibrary(stringr)\ninput <- readLines(\"2018/04-input\") |> sort()\n\ntimes <- str_extract(input, \"\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}\") |>\n  as.POSIXct()\n\ninst <- str_remove(input, \"\\\\[.*\\\\] \")\n\nguard_id <- str_extract(inst, \"\\\\d+\")\n\nshift <- cumsum(!is.na(guard_id))\n\nfor (i in seq_along(guard_id)) {\n  if (i == 1) next\n\n  if (is.na(guard_id[i])) {\n    guard_id[i] <- guard_id[i - 1]\n  }\n}\n\nlibrary(dplyr)\n\nsleep_calc <- function(x) {\n  rowSums(outer(0:59, lubridate::minute(x)[-1], \">=\")) %% 2\n}\n\nsleep_sched <- tibble(shift, guard_id, inst, times) %>%\n  group_by(guard_id, shift) %>%\n  summarise(\n    minute = 0:59,\n    slept = sleep_calc(times), .groups = \"drop\")\n\nsleep_sched %>%\n  group_by(guard_id) %>%\n  summarise(sum = sum(slept)) %>%\n  arrange(desc(sum)) %>%\n  slice(1) %>%\n  left_join(sleep_sched, by = \"guard_id\") %>%\n  filter(slept == 1) %>%\n  count(guard_id, minute, sort = TRUE) %>%\n  slice(1) %>%\n  mutate(res = as.integer(guard_id) * minute) %>%\n  pull(res)\n\n\n\n[1] 103720\n0.325 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\ninput <- readLines(\"2018/04-input\") |> sort()\n\ntimes <- str_extract(input, \"\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}\") |>\n  as.POSIXct()\n\ninst <- str_remove(input, \"\\\\[.*\\\\] \")\n\nguard_id <- str_extract(inst, \"\\\\d+\")\n\nshift <- cumsum(!is.na(guard_id))\n\nfor (i in seq_along(guard_id)) {\n  if (i == 1) next\n\n  if (is.na(guard_id[i])) {\n    guard_id[i] <- guard_id[i - 1]\n  }\n}\n\nlibrary(dplyr)\n\nsleep_calc <- function(x) {\n  rowSums(outer(0:59, lubridate::minute(x)[-1], \">=\")) %% 2\n}\n\nsleep_sched <- tibble(shift, guard_id, inst, times) %>%\n  group_by(guard_id, shift) %>%\n  summarise(\n    minute = 0:59,\n    slept = sleep_calc(times), .groups = \"drop\")\n\nsleep_sched %>%\n  filter(slept == 1) %>%\n  count(guard_id, minute, sort = TRUE) %>%\n  slice(1) %>%\n  mutate(res = as.integer(guard_id) * minute) %>%\n  pull(res)\n\n\n\n[1] 110913\n0.07 sec elapsed\n\nDay 5\nPart 1\n\n\nlibrary(stringr)\n\ninput <- readLines(\"2018/05-input\")\n\nvoids <- c(paste0(letters, LETTERS), paste0(LETTERS, letters))\n\nvoid_regex <- paste0(\"(\", paste(voids, collapse = \"|\"), \")\")\n\nnew <- old <- input\n\nrepeat {\n  new <- str_remove_all(old, void_regex)\n  if (new == old) break\n  old <- new\n}\n\nnchar(new)\n\n\n\n[1] 9078\n12.245 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\n\ninput <- readLines(\"2018/05-input\")\n\nvoids <- c(paste0(letters, LETTERS), paste0(LETTERS, letters))\n\nvoid_regex <- paste0(\"(\", paste(voids, collapse = \"|\"), \")\")\n\nreduce_poly <- function(x, string) {\n  string <- str_remove_all(string, x)\n  new <- old <- string\n  repeat {\n    new <- str_remove_all(old, void_regex)\n    if (new == old) break\n    old <- new\n  }\n\n  nchar(new)\n}\n\npurrr::map_int(paste0(\"(\", letters, \"|\", LETTERS, \")\"), reduce_poly, input) |>\n  min()\n\n\n\n[1] 5698\n302.518 sec elapsed\n\nDay 6\nPart 1\n\n\nlibrary(dplyr)\nlibrary(stringr)\n\ninput <- readLines(\"2018/06-input\")\n\npoint <- str_match(input, \"(?<x>[0-9]+), (?<y>[0-9]+)\")[,-1]\npoint <- apply(point, 2, as.numeric)\n\nmake_range <- function(x) {\n  r <- range(point[,\"x\"])\n  seq(r[1]- 100, r[2] + 100)\n}\n\ngrid <- expand.grid(X = make_range(point[,\"x\"]), Y = make_range(point[,\"y\"]))\n\nclassify <- function(x, y) {\n\n  dists <- abs(point[, \"x\"] - x) + abs(point[, \"y\"] - y)\n\n  which_min <- which(dists == min(dists))\n\n  if (length(which_min) != 1) {\n    return(0)\n  } else {\n    return(which_min)\n  }\n}\n\ngrid <- grid %>%\n  mutate(class = purrr::map2_dbl(X, Y, classify))\n\nborder_grid <- grid %>%\n  filter(X == min(X) | X == max(X) | Y == min(Y) | Y == max(Y))\n\nborder_classes <- border_grid %>%\n  pull(class) %>%\n  unique()\n\ngrid %>%\n  filter(!class %in% border_classes) %>%\n  count(class, sort = TRUE) %>%\n  slice(1) %>%\n  pull(n)\n\n\n\n[1] 4754\n1.995 sec elapsed\n\nPart 2\n\n\nlibrary(dplyr)\nlibrary(stringr)\n\ninput <- readLines(\"2018/06-input\")\n\npoint <- str_match(input, \"(?<x>[0-9]+), (?<y>[0-9]+)\")[,-1]\npoint <- apply(point, 2, as.numeric)\n\nmake_range <- function(x) {\n  r <- range(point[,\"x\"])\n  seq(r[1]- 100, r[2] + 100)\n}\n\ngrid <- expand.grid(X = make_range(point[,\"x\"]), Y = make_range(point[,\"y\"]))\n\nclassify <- function(x, y) {\n\n  dists <- abs(point[, \"x\"] - x) + abs(point[, \"y\"] - y)\n\n  which_min <- which(dists == min(dists))\n\n  if (length(which_min) != 1) {\n    return(0)\n  } else {\n    return(which_min)\n  }\n}\n\ngrid <- grid %>%\n  mutate(class = purrr::map2_dbl(X, Y, classify))\n\nclassify2 <- function(x, y) {\n  dists <- abs(point[, \"x\"] - x) + abs(point[, \"y\"] - y)\n\n  sum(dists) < 10000\n}\n\ngrid %>%\n  mutate(class2 = purrr::map2_dbl(X, Y, classify2)) %>%\n  filter(class2 == 1) %>%\n  nrow()\n\n\n\n[1] 42344\n3.257 sec elapsed\n\nDay 7\nPart 1\n\n\nlibrary(stringr)\n\ninput <- readLines(\"2018/07-input\")\n\nfrom <- str_sub(input, 6, 6)\nto <- str_sub(input, 37, 37)\n\nletters <- c(from, to) |> unique() |> sort()\n\ngraph <- purrr::map(letters, ~character(0)) |>\n  setNames(letters)\n\nfor (i in seq_along(from)) {\n  graph[[to[i]]] <- c(graph[[to[i]]], from[i])\n}\n\nres <- character()\n\nrepeat {\n  selection <- names(which.min(lengths(graph)))[1]\n\n  res <- c(res, selection)\n\n  graph <- graph[names(graph) != selection]\n\n  if (length(graph) == 0) break\n\n  graph <- purrr::map(graph, setdiff, selection)\n}\n\npaste0(res, collapse = \"\")\n\n\n\n[1] \"CABDFE\"\n0.012 sec elapsed\n\nDay 8\nDay 9\nDay 10\nDay 11\nDay 12\nDay 13\nDay 14\nDay 15\nDay 16\nDay 17\nDay 18\nDay 19\nDay 20\nDay 21\nDay 22\nDay 23\nDay 24\nDay 25\n\n\n\n\n",
      "last_modified": "2024-12-02T22:28:28-08:00"
    },
    {
      "path": "2019.html",
      "title": "My 2019 Solutions",
      "author": [],
      "contents": "\n\n\n\n\n\nDay 1\nPart 1\n\n\ninput <- scan(\"2019/01-input\")\n\nsum(floor(input / 3) - 2)\n\n\n\n[1] 3368364\n0.001 sec elapsed\n\nPart 2\n\n\ninput <- scan(\"2019/01-input\")\n\ncalc_fuel <- function(x) {\n  total <- 0\n  repeat {\n    fuel <- floor(x / 3) - 2\n    if (fuel <= 0) return(total)\n    total <- total + fuel\n    x <- fuel\n  }\n}\nvapply(input, calc_fuel, FUN.VALUE = numeric(1)) |>\n  sum()\n\n\n\n[1] 5049684\n0.002 sec elapsed\n\nDay 2\nDay 3\nDay 4\nPart 1\n\n\nlibrary(purrr)\n\ninput <- 136818:685979\n\nchars <- input |>\n  as.character() |>\n  strsplit(\"\") |>\n  map(as.numeric)\n\nmap_lgl(chars, ~ any(diff(.x) == 0) & all(diff(.x) >= 0)) |>\n  sum()\n\n\n\n[1] 1919\n8.552 sec elapsed\n\nPart 2\n\n\nlibrary(purrr)\n\ninput <- 136818:685979\n\nchars <- input |>\n  as.character() |>\n  strsplit(\"\") |>\n  map(as.numeric)\n\ncheck <- function(x) {\n  x_rle <- rle(diff(x))\n  if (all(x_rle$values != 0)) {\n    return(FALSE)\n  }\n\n  if (any(x_rle$lengths[x_rle$values == 0] == 1)) {\n    return(TRUE)\n  }\n  FALSE\n}\n\nmap_lgl(chars, ~ all(diff(.x) >= 0) & check(.x)) |>\n  sum()\n\n\n\n[1] 1291\n16.432 sec elapsed\n\nDay 5\nDay 6\nDay 7\nDay 8\nDay 9\nDay 10\nDay 11\nDay 12\nDay 13\nDay 14\nDay 15\nDay 16\nDay 17\nDay 18\nDay 19\nDay 20\nDay 21\nDay 22\nDay 23\nDay 24\nDay 25\n\n\n\n\n",
      "last_modified": "2024-12-02T22:28:28-08:00"
    },
    {
      "path": "2020.html",
      "title": "My 2020 Solutions",
      "author": [],
      "contents": "\n\n\n\n\n\nDay 1\nPart 1\n\n\ninput <- as.numeric(readLines(\"2020/01-input\"))\n\nsum2 <- function(input, target) {\n  for (i in input) {\n    for (j in input) {\n      if (i + j == target) {\n        return(i * j)\n      }\n    }\n  }\n}\n\nsum2(input, 2020)\n\n\n\n[1] 691771\n0.01 sec elapsed\n\nPart 2\n\n\ninput <- as.numeric(readLines(\"2020/01-input\"))\n\nsum3 <- function(input, target) {\n  for (i in input) {\n    for (j in input) {\n      for (l in input) {\n        if (i + j + l == target) {\n          return(i * j * l)\n        }\n      }\n    }\n  }\n}\n\nsum3(input, 2020)\n\n\n\n[1] 232508760\n0.043 sec elapsed\n\nDay 2\nPart 1\n\n\nlibrary(purrr)\nlibrary(stringr)\n\ninput <- readLines(\"2020/02-input\")\n\npassword_check <- function(x) {\n  numbers <- as.numeric(str_extract_all(x, \"[0-9]+\")[[1]])\n  chars <- str_extract_all(x, \"[a-z]+\")[[1]]\n\n  count <- str_count(chars[2], chars[1])\n  (numbers[1] <= count) & (numbers[2] >= count)\n}\n\nsum(map_lgl(input, password_check))\n\n\n\n[1] 439\n0.078 sec elapsed\n\nPart 2\n\n\nlibrary(purrr)\nlibrary(stringr)\n\ninput <- readLines(\"2020/02-input\")\n\npassword_check_2 <- function(x) {\n  numbers <- as.numeric(str_extract_all(x, \"[0-9]+\")[[1]])\n  chars <- str_extract_all(x, \"[a-z]+\")[[1]]\n\n  loc1 <- str_sub(chars[2], numbers[1], numbers[1])\n  loc2 <- str_sub(chars[2], numbers[2], numbers[2])\n\n  sum(loc1 == chars[1], loc2 == chars[1]) == 1\n\n}\n\nsum(map_lgl(input, password_check_2))\n\n\n\n[1] 584\n0.063 sec elapsed\n\nDay 3\nPart 1\n\n\nlibrary(purrr)\n\ninput <- readLines(\"2020/03-input\")\n\n# turn input into logical matrix\nmat <- strsplit(input, \"\") %>%\n  map(~.x == \"#\") %>%\n  reduce(rbind)\n\ntraverse <- function(mat, right, down) {\n  x <- y <- 1\n\n  height <- nrow(mat)\n  width <- ncol(mat)\n\n  # Check tree collision\n  trees <- 0\n  repeat {\n    y <- y + down\n    x <- (x + right) %% width\n    x <- ifelse(x == 0, width, x)\n    trees <- trees + mat[y, x]\n    if (y >= height) break\n  }\n  trees\n}\n\ntraverse(mat, 3, 1)\n\n\n\nelt \n214 \n0.017 sec elapsed\n\nPart 2\n\n\nlibrary(purrr)\n\ninput <- readLines(\"2020/03-input\")\n\n# turn input into logical matrix\nmat <- strsplit(input, \"\") %>%\n  map(~.x == \"#\") %>%\n  reduce(rbind)\n\ntraverse <- function(mat, right, down) {\n  x <- y <- 1\n\n  height <- nrow(mat)\n  width <- ncol(mat)\n\n  # Check tree collision\n  trees <- 0\n  repeat {\n    y <- y + down\n    x <- (x + right) %% width\n    x <- ifelse(x == 0, width, x)\n    trees <- trees + mat[y, x]\n    if (y >= height) break\n  }\n  trees\n}\n\nprod(\n  traverse(mat, 1, 1),\n  traverse(mat, 3, 1),\n  traverse(mat, 5, 1),\n  traverse(mat, 7, 1),\n  traverse(mat, 1, 2)\n)\n\n\n\n[1] 8336352024\n0.016 sec elapsed\n\nDay 4\nPart 1\n\n\nlibrary(purrr)\nlibrary(stringr)\nlibrary(magrittr)\n\ninput <- readLines(\"2020/04-input\")\n\npassports <- str_split(paste(input, collapse = \"\\n\"), \"\\n\\n\")[[1]]\n\nmatches <- c(\"byr\", \"iyr\", \"eyr\", \"hgt\", \"hcl\", \"ecl\", \"pid\")\n\nvalid <- str_extract_all(passports, paste0(matches, collapse = \"|\")) %>%\n  map_lgl(~all(matches %in% .x))\n\nsum(valid)\n\n\n\n[1] 182\n0.013 sec elapsed\n\nPart 2\n\n\nlibrary(purrr)\nlibrary(stringr)\nlibrary(magrittr)\n\ninput <- readLines(\"2020/04-input\")\n\npassports <- str_split(paste(input, collapse = \"\\n\"), \"\\n\\n\")[[1]]\n\nmatches <- c(\"byr\", \"iyr\", \"eyr\", \"hgt\", \"hcl\", \"ecl\", \"pid\")\n\nvalid <- str_extract_all(passports, paste0(matches, collapse = \"|\")) %>%\n  map_lgl(~all(matches %in% .x))\n\ncreate_list <- function(x) {\n  x <- str_split(x, \"[ \\n]\")[[1]]\n  x_split <- str_split(x, \":\")\n\n  setNames(map(x_split, 2), map(x_split, 1))\n}\n\npassword_df <- passports[valid] %>%\n  map_dfr(create_list)\n\nint <- as.integer\n\ncheck_byr <- function(x) int(x) >= 1920 & int(x) <= 2002\n\ncheck_iyr <- function(x) int(x) >= 2010 & int(x) <= 2020\n\ncheck_eyr <- function(x) int(x) >= 2020 & int(x) <= 2030\n\ncheck_hgt <- function(x) {\n  value <- as.numeric(str_extract(x, \"[0-9]+\"))\n  unit <- str_remove(x, \"[0-9]+\")\n\n  if_else(\n    unit %in% c(\"in\", \"cm\"),\n    if_else(\n      unit == \"in\",\n      value >= 59 & value <= 76,\n      value >= 150 & value <= 193\n    ),\n    FALSE\n  )\n}\n\ncheck_hcl <- function(x) {\n  str_detect(x, \"#[0-9a-f]{6}\")\n}\n\ncheck_ecl <- function(x) {\n  x %in% c(\"amb\", \"blu\", \"brn\", \"gry\", \"grn\", \"hzl\", \"oth\")\n}\n\ncheck_pid <- function(x) {\n  str_detect(x, \"^[0-9]{9}$\")\n}\n\nlibrary(dplyr)\n\npassword_df %>%\n  filter(\n    check_hgt(hgt),\n    check_byr(byr),\n    check_hcl(hcl),\n    check_ecl(ecl),\n    check_pid(pid),\n    check_iyr(iyr),\n    check_eyr(eyr)\n  ) %>%\n  nrow()\n\n\n\n[1] 109\n0.093 sec elapsed\n\nDay 5\nPart 1\n\n\ninput <- readLines(\"2020/05-input\")\n\ninput <- gsub(c(\"[FL]\"), c(\"0\"), input)\ninput <- gsub(c(\"[BR]\"), c(\"1\"), input)\n\nid <- strtoi(input, base = 2)\n\nmax(id)\n\n\n\n[1] 888\n0.006 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2020/05-input\")\n\ninput <- gsub(c(\"[FL]\"), c(\"0\"), input)\ninput <- gsub(c(\"[BR]\"), c(\"1\"), input)\n\nid <- strtoi(input, base = 2)\n\nsetdiff(seq(min(id), max(id)), id)\n\n\n\n[1] 522\n0.007 sec elapsed\n\nDay 6\nPart 1\n\n\nlibrary(tidyverse)\nlibrary(tidytext)\n\nanswers <- read_file(\"2020/06-input\") %>%\n  tibble(input = .) %>%\n  unnest_paragraphs(text, input) %>%\n  rowid_to_column(\"group_id\") %>%\n  unnest_tokens(text, text) %>%\n  rowid_to_column(\"person_id\") %>%\n  unnest_characters(text, text)\n\nanswers %>%\n  count(group_id, text) %>%\n  nrow()\n\n\n\n[1] 6542\n1.752 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\nlibrary(tidytext)\n\nanswers <- read_file(\"2020/06-input\") %>%\n  tibble(input = .) %>%\n  unnest_paragraphs(text, input) %>%\n  rowid_to_column(\"group_id\") %>%\n  unnest_tokens(text, text) %>%\n  rowid_to_column(\"person_id\") %>%\n  unnest_characters(text, text)\n\nanswers %>%\n  group_by(group_id) %>%\n  mutate(group_size = n_distinct(person_id)) %>%\n  count(group_size, text) %>%\n  filter(group_size == n) %>%\n  nrow()\n\n\n\n[1] 3299\n0.103 sec elapsed\n\nDay 7\nPart 1\n\n\nlibrary(stringr)\ninput <- readLines(\"2020/07-input\")\n\ncontaining_bag <- function(x) {\n  str_extract(str_subset(input, paste0(\".+\", x)), \"^.+?bag\")\n}\n\nused_bags <- c()\n\nnew_bags <- \"shiny gold bag\"\n\nrepeat {\n  newer_bags <- unique(unlist(lapply(new_bags, containing_bag)))\n\n  if (length(newer_bags) == 0) {\n    used_bags <- c(used_bags, new_bags)\n    break\n  }\n\n  used_bags <- c(used_bags, new_bags)\n\n  new_bags <- setdiff(newer_bags, used_bags)\n}\n\nlength(setdiff(used_bags, \"shiny gold bag\"))\n\n\n\n[1] 238\n5.546 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\ninput <- readLines(\"2020/07-input\")\n\nbags <- str_extract_all(input, \"(?<=[0-9] ).*?bag\")\nnumber <- str_extract_all(input, \"[0-9]+\")\nnumber <- lapply(number, as.integer)\nnames(number) <- names(bags) <- str_extract(input, \"^.+?bag\")\n\nfind_size <- function(x, n) {\n  contains <- bags[[x]]\n  if (length(contains) == 0) return(n)\n  n_bags <- map2_int(contains, number[[x]], find_size)\n  sum(c(n_bags, 1L) * n)\n}\n\nfind_size(x = \"shiny gold bag\", n = 1) - 1\n\n\n\n[1] 82930\n0.016 sec elapsed\n\nDay 8\nPart 1\n\n\ninput <- readLines(\"2020/08-input\")\n\nrun <- function(input, part2 = FALSE) {\n  len <- length(input)\n  n_times <- integer(len)\n\n  accumulator <- 0\n\n  i <- 1\n\n  repeat {\n    x <- strsplit(input[i], \" \")[[1]]\n\n    n_times[i] <- n_times[i] + 1\n\n    if (i > len) {\n      return(accumulator)\n    }\n    if (n_times[i] == 2) {\n      if (part2) {\n        return(NA)\n      } else {\n        return(accumulator)\n      }\n    }\n\n    if (x[1] == \"nop\") {\n      i <- i + 1\n    } else if (x[1] == \"acc\") {\n      accumulator <- accumulator + readr::parse_number(x[2])\n      i <- i + 1\n    } else if (x[1] == \"jmp\") {\n      i <- i + readr::parse_number(x[2])\n    }\n  }\n}\n\nrun(input)\n\n\n\n[1] 1654\n0.224 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\n\ninput <- readLines(\"2020/08-input\")\n\nrun <- function(input, part2 = FALSE) {\n  len <- length(input)\n  n_times <- integer(len)\n\n  accumulator <- 0\n\n  i <- 1\n\n  repeat {\n    x <- strsplit(input[i], \" \")[[1]]\n\n    n_times[i] <- n_times[i] + 1\n\n    if (i > len) {\n      return(accumulator)\n    }\n    if (n_times[i] == 2) {\n      if (part2) {\n        return(NA)\n      } else {\n        return(accumulator)\n      }\n    }\n\n    if (x[1] == \"nop\") {\n      i <- i + 1\n    } else if (x[1] == \"acc\") {\n      accumulator <- accumulator + readr::parse_number(x[2])\n      i <- i + 1\n    } else if (x[1] == \"jmp\") {\n      i <- i + readr::parse_number(x[2])\n    }\n  }\n}\n\nfor (i in seq_along(input)) {\n  input0 <- input\n  if (str_detect(input0[i], \"acc\")) next\n\n  if (str_detect(input0[i], \"nop\")) {\n    input0[i] <- str_replace(input0[i], \"nop\", \"jmp\")\n  } else {\n    input0[i] <- str_replace(input0[i], \"jmp\", \"nop\")\n  }\n\n  res <- run(input0, part2 = TRUE)\n  if(!is.na(res)) break\n}\nres\n\n\n\n[1] 833\n17.011 sec elapsed\n\nDay 9\nPart 1\n\n\ninput <- as.numeric(readLines(\"2020/09-input\"))\n\ni <- 1\n\nrepeat {\n  sums <- colSums(combn(input[seq(i, i + 24)], 2))\n  if(!any(input[i + 25] == sums)) break\n  i <- i + 1\n}\n\ninput[i + 25]\n\n\n\n[1] 1930745883\n0.162 sec elapsed\n\nPart 2\n\n\ninput <- as.numeric(readLines(\"2020/09-input\"))\n\ni <- 1\n\nrepeat {\n  sums <- colSums(combn(input[seq(i, i + 24)], 2))\n  if(!any(input[i + 25] == sums)) break\n  i <- i + 1\n}\n\ntarget <- input[i + 25]\n\ni <- 1\nstep <- 1\n\nrepeat {\n  res <- sum(input[seq(i, i + step)])\n\n  if (res == target) break\n\n  if (res > target) {\n    i <- i + 1\n    step <- 1\n    next\n  }\n  step <- step + 1\n}\n\nsum(range(input[seq(i, i + step)]))\n\n\n\n[1] 268878261\n1.353 sec elapsed\n\nDay 10\nPart 1\n\n\ninput <- as.integer(readLines(\"2020/10-input\"))\n\nres <- table(diff(sort(input)))\n\nprod(res + 1)\n\n\n\n[1] 1984\n0.002 sec elapsed\n\nPart 2\n\n\ninput <- sort(as.integer(readLines(\"2020/10-input\")))\n\nruns <- rle(c(diff(c(0, input))))\nweights <- c(1, 2, 4, 7)\n\noptions(scipen = 999)\nprod(weights[runs$lengths[runs$values == 1]])\n\n\n\n[1] 3543369523456\n0.002 sec elapsed\n\nDay 11\nPart 1\n\n\ninput <- readLines(\"2020/11-input\")\n\n# turn input into logical matrix\nmat <- strsplit(input, \"\") %>%\n  reduce(rbind)\n\nreplace <- mat\n\nrepeat {\n  for (i in seq_len(nrow(mat))) {\n    for (j in seq_len(ncol(mat))) {\n      if (mat[i, j] == \".\") next\n\n      temp_mat <- mat\n      temp_mat[i, j] <- \"\"\n\n      conv <- temp_mat[seq(max(i-1, 1), min(i+1, nrow(mat))),\n                       seq(max(j-1, 1), min(j+1, ncol(mat)))]\n\n      if (mat[i, j] == \"L\") {\n        if (all(conv != \"#\")) {\n          replace[i, j] <- \"#\"\n        }\n      }\n\n      if (mat[i, j] == \"#\") {\n        if (sum(conv == \"#\") >= 4) {\n          replace[i, j] <- \"L\"\n        }\n      }\n    }\n  }\n\n  if (identical(mat, replace)) break\n  mat <- replace\n}\n\nsum(mat == \"#\")\n\n\n\n[1] 2113\n35.157 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2020/11-input\")\n\n# turn input into logical matrix\nmat <- strsplit(input, \"\") %>%\n  reduce(rbind)\n\nfind_neighbor <- function(mat, i, j, x, y) {\n  res <- \".\"\n  i <- i + y\n  j <- j + x\n  while (i > 0 & j > 0 & j <= ncol(mat) & i <= nrow(mat)) {\n    value <- mat[i,j]\n    if (value != \".\") {\n      res <- value\n      break\n    }\n    i <- i + y\n    j <- j + x\n  }\n  res\n}\n\nfind_all_neighbors <- function(mat, i, j) {\n\n  up <-   find_neighbor(mat, i, j, 0, -1)\n  down <- find_neighbor(mat, i, j, 0, 1)\n  right <- find_neighbor(mat, i, j, -1, 0)\n  left <-  find_neighbor(mat, i, j, 1, 0)\n\n  upright <- find_neighbor(mat, i, j, 1, -1)\n  upleft <- find_neighbor(mat, i, j, -1, -1)\n  downright <- find_neighbor(mat, i, j, 1, 1)\n  downleft <- find_neighbor(mat, i, j, -1, 1)\n\n  c(up, down, right, left, upright, upleft, downright, downleft)\n}\n\nreplace <- mat\n\nrepeat {\n  for (i in seq_len(nrow(mat))) {\n    for (j in seq_len(ncol(mat))) {\n      if (mat[i, j] == \".\") next\n\n      conv <- find_all_neighbors(mat, i, j)\n\n\n      if (mat[i, j] == \"L\") {\n        if (all(conv != \"#\")) {\n          replace[i, j] <- \"#\"\n        }\n      }\n\n      if (mat[i, j] == \"#\") {\n        if (sum(conv == \"#\") >= 5) {\n          replace[i, j] <- \"L\"\n        }\n      }\n    }\n  }\n\n  if (identical(mat, replace)) break\n\n  mat <- replace\n}\n\nsum(mat == \"#\")\n\n\n\n[1] 1865\n18.343 sec elapsed\n\nDay 12\nPart 1\n\n\ninput <- readLines(\"2020/12-input\")\n\nship <- c(0, 0)\ndirection <- c(1, 0)\n\nrotate <- function(x, phi) {\n  c(x[1] * cos(phi * pi / 180) - x[2] * sin(phi * pi / 180),\n    x[1] * sin(phi * pi / 180) + x[2] * cos(phi * pi / 180))\n}\n\nfor (i in input) {\n  value <- as.numeric(str_extract(i, \"[0-9]+\"))\n  switch(\n    substr(i, 1, 1),\n    N = {ship[2] <- ship[2] + value},\n    S = {ship[2] <- ship[2] - value},\n    E = {ship[1] <- ship[1] + value},\n    W = {ship[1] <- ship[1] - value},\n    L = {direction <- rotate(direction, value)},\n    R = { direction <- rotate(direction, -value)},\n    F = {ship <- ship + direction * value}\n  )\n}\n\nsum(abs(ship))\n\n\n\n[1] 1496\n0.033 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2020/12-input\")\n\nship <- c(0, 0)\n\nwaypoint <- c(10, 1)\n\nrotate <- function(x, phi) {\n  c(x[1] * cos(phi * pi / 180) - x[2] * sin(phi * pi / 180),\n    x[1] * sin(phi * pi / 180) + x[2] * cos(phi * pi / 180))\n}\n\nfor (i in input) {\n  value <- as.numeric(str_extract(i, \"[0-9]+\"))\n\n  switch(\n    substr(i, 1, 1),\n    N = {waypoint[2] <- waypoint[2] + value},\n    S = {waypoint[2] <- waypoint[2] - value},\n    E = {waypoint[1] <- waypoint[1] + value},\n    W = {waypoint[1] <- waypoint[1] - value},\n    L = {waypoint <- rotate(waypoint, value)},\n    R = {waypoint <- rotate(waypoint, -value)},\n    F = {ship <- ship + waypoint * value}\n  )\n}\n\nsum(abs(ship))\n\n\n\n[1] 63843\n0.024 sec elapsed\n\nDay 13\nPart 1\n\n\ninput <- readLines(\"2020/13-input\")\n\ntarget <- as.integer(input[1])\nids <- as.integer(str_extract_all(input[2], \"[0-9]+\")[[1]])\n\ntime_past <- ceiling(target / ids) * ids\nwhich_min <- min(time_past) == time_past\n\n(time_past[which_min] - target) * ids[which_min]\n\n\n\n[1] 2845\n0.002 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2020/13-input\")\n\nids <- as.numeric(str_split(input[2], \",\")[[1]])\noffset <- seq_along(ids) - 1\noffset <- offset[!is.na(ids)]\nids <- ids[!is.na(ids)]\n\ntimestamp <- 1\nstep <- 1\n\nfor (i in seq_along(ids)) {\n  repeat {\n    if ((timestamp + offset[i]) %% ids[i] == 0) break\n    timestamp <- timestamp + step\n  }\n\n  step <- prod(ids[seq_len(i)])\n}\n\noptions(scipen = 999)\ntimestamp\n\n\n\n[1] 487905974205117\n0.007 sec elapsed\n\nDay 14\nPart 1\n\n\nlibrary(stringr)\n\ninput <- readLines(\"2020/14-input\")\n\nintTo36 <- function(x) {\n  as.character(c(rep(0, 4), rev(as.integer(intToBits(x)))))\n}\n\n`[<-.memory` <- function(x, i, value) {\n  res <- intTo36(value)\n  res[mask != \"X\"] <- mask[mask != \"X\"]\n  x[[i]] <- res\n  x\n}\n\nmem <- list()\nattr(mem, \"class\") <- \"memory\"\n\nfor (line in input) {\n  if (grepl(\"^mask\", line)) {\n    mask <- strsplit(str_extract(line, \"[X0-9]+\"), \"\")[[1]]\n    next\n  }\n  eval(parse(text = line))\n}\n\noptions(scipen = 999)\nsum(map_dbl(mem, ~ sum(as.numeric(.x) * (2 ^ seq(35, 0)))))\n\n\n\n[1] 15514035145260\n0.831 sec elapsed\n\nPart 2\nDay 15\nPart 1\n\n\ninput <- c(16,1,0,18,12,14,19)\n\nres <- rep(-1, 2020)\nres[seq_along(input)] <- input\nfor (i in 8:2020) {\n  if (sum(res == res[i- 1]) == 1) {\n    res[i] <- 0\n  } else {\n    last_calls <- which(res == res[i- 1])\n    res[i] <- last_calls[length(last_calls)] - last_calls[length(last_calls) - 1]\n  }\n}\nrev(res)[1]\n\n\n\n[1] 929\n0.056 sec elapsed\n\nPart 2\nDay 16\nPart 1\n\n\nlibrary(tidyverse)\ninput <- readLines(\"2020/16-input\")\nbreaks <- which(input == \"\")\n\nvalid_values <- input[seq(1, min(breaks) - 1)] %>%\n  str_extract_all(\"[0-9]+\") %>%\n  map(as.numeric) %>%\n  map(~ c(seq(.x[1], .x[2]), seq(.x[3], .x[4])))\n\ntickets <- read.csv(\"2020/16-input\", header = FALSE,\n                    skip = which(input == \"nearby tickets:\"))\n\nall_valid_values <- unlist(valid_values)\n\ncheck_value <- function(x, ref) {\n  map_dbl(x, ~ ifelse(.x %in% ref, NA, .x))\n}\n\nwrong <- apply(tickets, 2, check_value, all_valid_values)\n\nsum(wrong, na.rm = TRUE)\n\n\n\n[1] 20060\n0.359 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\ninput <- readLines(\"2020/16-input\")\nbreaks <- which(input == \"\")\n\nvalid_values <- input[seq(1, min(breaks) - 1)] %>%\n  str_extract_all(\"[0-9]+\") %>%\n  map(as.numeric) %>%\n  map(~ c(seq(.x[1], .x[2]), seq(.x[3], .x[4])))\n\ntickets <- read.csv(\"2020/16-input\", header = FALSE,\n                    skip = which(input == \"nearby tickets:\"))\n\nall_valid_values <- unlist(valid_values)\n\ncheck_value <- function(x, ref) {\n  map_dbl(x, ~ ifelse(.x %in% ref, NA, .x))\n}\n\nwrong <- apply(tickets, 2, check_value, all_valid_values)\n\nvalid_ticket <- tickets[rowSums(!is.na(wrong)) == 0, ]\n\ncan_be <- function(x) {\n  which(map_lgl(valid_values, ~all(x %in% .x)))\n}\n\npos <- numeric(length(valid_values))\n\ncandidates <- map(valid_ticket, can_be)\n\nrepeat {\n  variable_ind <- which(lengths(candidates) == 1)\n  if(length(variable_ind) == 0) break\n\n  ref_ind <- candidates[[variable_ind]]\n\n  pos[variable_ind] <- ref_ind\n\n  candidates <- map(candidates, setdiff, ref_ind)\n}\n\nmy_ticket <- as.numeric(str_split(input[min(breaks) + 2], \",\")[[1]])\n\nfields <- input[seq(1, min(breaks) - 1)] %>%\n  str_detect(\"^departure\")\n\noptions(scipen = 999)\nprod(my_ticket[fields[pos]])\n\n\n\n[1] 2843534243843\n0.249 sec elapsed\n\nDay 17\nPart 1\n\n\nlibrary(dplyr)\nlibrary(tidyr)\n\ninput <- readLines(\"2020/17-input\")\n\nstart <- tibble(\n  x = rep(seq(7, 14), 8),\n  y = rev(rep(seq(7, 14), each = 8)),\n  z = 10,\n  state = strsplit(input, \"\") %>% unlist()\n)\n\nspace <- expand_grid(x = seq(1, 20), y = seq(1, 20), z = seq(1, 20)) %>%\n  left_join(start, by = c(\"x\", \"y\", \"z\")) %>%\n  mutate(state = if_else(is.na(state), \".\", state)) %>%\n  mutate(row = row_number())\n\nfind_neighbors <- function(dat) {\n  space %>%\n    filter(abs(x - dat$x) <= 1, abs(y - dat$y) <= 1, abs(z - dat$z) <= 1,\n           !(x == dat$x & y == dat$y & z == dat$z)) %>%\n    pull(row)\n}\n\nall_neighbors <- map(seq_len(nrow(space)), ~find_neighbors(space[.x, ]))\n\nnext_state <- function(x, nbs) {\n  if (x == \"#\") {\n    if (sum(nbs == \"#\") %in% c(2, 3)) {\n      return(\"#\")\n    } else {\n      return(\".\")\n    }\n  } else {\n    if (sum(nbs == \"#\") == 3) {\n      return(\"#\")\n    } else {\n      return(\".\")\n    }\n  }\n}\n\nfor(iter in 1:6) {\n  all_neighbors_states <- map(all_neighbors, ~ space$state[.x])\n  space$state <- map2_chr(space$state, all_neighbors_states, next_state)\n}\n\nsum(space$state == \"#\")\n\n\n\n[1] 280\n18.453 sec elapsed\n\nPart 2\n\n\nlibrary(dplyr)\nlibrary(tidyr)\ninput <- readLines(\"2020/17-input\")\n\n\nstart <- tibble(\n  x = rep(seq(7, 14), 8),\n  y = rev(rep(seq(7, 14), each = 8)),\n  z = 0,\n  w = 0,\n  state = strsplit(input, \"\") %>% unlist()\n)\n\nspace <- expand_grid(x = seq(1, 20),\n                     y = seq(1, 20),\n                     z = seq(-6, 6),\n                     w = seq(-6, 6)) %>%\n  left_join(start, by = c(\"x\", \"y\", \"z\", \"w\")) %>%\n  mutate(state = if_else(is.na(state), \".\", state)) %>%\n  mutate(row = row_number())\n\nfind_neighbors <- function(dat) {\n  space %>%\n    filter(abs(x - dat$x) <= 1,\n           abs(y - dat$y) <= 1,\n           abs(z - dat$z) <= 1,\n           abs(w - dat$w) <= 1,\n           !(x == dat$x & y == dat$y & z == dat$z & w == dat$w)) %>%\n    pull(row)\n}\n\nall_neighbors <- map(seq_len(nrow(space)), ~find_neighbors(space[.x, ]))\n\nnext_state <- function(x, nbs) {\n  if (x == \"#\") {\n    if (sum(nbs == \"#\") %in% c(2, 3)) {\n      return(\"#\")\n    } else {\n      return(\".\")\n    }\n  } else {\n    if (sum(nbs == \"#\") == 3) {\n      return(\"#\")\n    } else {\n      return(\".\")\n    }\n  }\n}\n\nfor(iter in 1:6) {\n  all_neighbors_states <- map(all_neighbors, ~ space$state[.x])\n  space$state <- map2_chr(space$state, all_neighbors_states, next_state)\n}\n\nsum(space$state == \"#\")\n\n\n\n[1] 1696\n442.808 sec elapsed\n\nDay 18\nPart 1\n\n\nlibrary(stringr)\nlibrary(purrr)\ninput <- readLines(\"2020/18-input\")\n\n`%+%` <- function(a, b) a + b\n`%*%` <- function(a, b) a * b\n\neval_string <- function(x) {\n  map_dbl(x, ~eval(parse(text = .x)))\n}\n\noptions(scipen = 999)\ninput %>%\n  str_replace_all(c(\"\\\\+\" = \"%\\\\+%\", \"\\\\*\" = \"%\\\\*%\")) %>%\n  eval_string() %>%\n  sum()\n\n\n\n[1] 8298263963837\n0.014 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\nlibrary(purrr)\ninput <- readLines(\"2020/18-input\")\n\neval_string_rev <- function(x) {\n  rev_env <- new.env()\n  rev_env$`+` <- function(a, b) base::`*`(a, b)\n  rev_env$`*` <- function(a, b) base::`+`(a, b)\n  map_dbl(x, ~eval(parse(text = .x), envir = rev_env))\n}\n\noptions(scipen = 999)\ninput %>%\n  str_replace_all(c(\"\\\\+\" = \"temp\", \"\\\\*\" = \"+\", \"temp\" = \"*\")) %>%\n  eval_string_rev() %>%\n  sum()\n\n\n\n[1] 145575710203332\n0.01 sec elapsed\n\nDay 19\nPart 1\n\n\nlibrary(stringr)\nlibrary(purrr)\ninput <- readLines(\"2020/19-input\")\nbreak_point <- which(input == \"\")\n\nrules_raw <- input[seq(1, break_point - 1)]\nrules_raw <- str_remove_all(rules_raw, \"\\\"\")\nrules_raw <- str_split(rules_raw, \": \")\nrules <- map_chr(rules_raw, 2)\nrules <- map_chr(str_split(rules, \" \"), ~paste(glue::glue(\"_{.x}_\"),collapse = \"\"))\nrules <- str_replace_all(rules, c(\"_\\\\|_\" = \"\\\\|\", \"_a_\" = \"a\", \"_b_\" = \"b\"))\nrules <- paste0(\"(\", rules, \")\")\nnames(rules) <- paste0(\"_\", map(rules_raw, 1), \"_\")\n\nmessages <- input[seq(break_point + 1, length(input))]\n\nmaster <- \"_0_\"\nwhile(str_detect(master, \"[0-9]\")) {\n  master <- str_replace_all(master, rules)\n}\n\nsum(str_detect(messages, glue::glue(\"^{master}$\")))\n\n\n\n[1] 162\n0.115 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\nlibrary(purrr)\ninput <- readLines(\"2020/19-input\")\nbreak_point <- which(input == \"\")\n\nrules_raw <- input[seq(1, break_point - 1)]\nrules_raw <- str_remove_all(rules_raw, \"\\\"\")\nrules_raw <- str_split(rules_raw, \": \")\nrules <- map_chr(rules_raw, 2)\nrules <- map_chr(str_split(rules, \" \"), ~paste(glue::glue(\"_{.x}_\"),collapse = \"\"))\nrules <- str_replace_all(rules, c(\"_\\\\|_\" = \"\\\\|\", \"_a_\" = \"a\", \"_b_\" = \"b\"))\nrules <- paste0(\"(\", rules, \")\")\nnames(rules) <- paste0(\"_\", map(rules_raw, 1), \"_\")\nrules[\"_8_\"] <- \"(_42_+)\"\nrules[\"_11_\"] <- \"(_42__31_|_42__42__31__31_|_42__42__42__31__31__31_|_42__42__42__42__31__31__31__31_|_42__42__42__42__42__31__31__31__31__31_|_42__42__42__42__42__42__42__31__31__31__31__31__31__31_)\"\n\nmessages <- input[seq(break_point + 1, length(input))]\n\nmaster <- \"_0_\"\nwhile(str_detect(master, \"[0-9]\")) {\n  master <- str_replace_all(master, rules)\n}\n\nsum(grepl(glue::glue(\"^{master}$\"), messages))\n\n\n\n[1] 267\n0.282 sec elapsed\n\nDay 20\nPart 1\n\n\nlibrary(tidyverse)\n\ninput <- read_file(\"2020/20-input\")\ninput <- str_remove(input, \"\\n$\")\n\ntiles <- str_split(input, \"\\n\\n\")[[1]]\n\ntile_info <- function(x) {\n  lines <- str_split(x, \"\\n\")[[1]]\n\n  id <- str_extract(lines[1], \"[0-9]+\")\n  grid <- lines[-1]\n\n  sides <- c(\n    paste0(str_sub(grid, 1, 1), collapse = \"\"),\n    paste0(str_sub(grid, length(grid), length(grid)), collapse = \"\"),\n    grid[c(1, length(grid))]\n  )\n\n  tibble(id, side = c(sides, stringi::stri_reverse(sides)))\n}\n\ntile_sides <- map_dfr(tiles, tile_info)\n\noptions(scipen = 999)\njoints <- inner_join(tile_sides, tile_sides, by = \"side\") %>%\n  filter(id.x != id.y) %>%\n  transmute(pair = map2_chr(id.x, id.y, ~\n                              paste(sort(c(.x, .y)), collapse = \" \")\n  )) %>%\n  distinct() %>%\n  separate(pair, c(\"a\", \"b\"), \" \")\n\njoints %>%\n  pivot_longer(everything()) %>%\n  count(value) %>%\n  filter(n == 2) %>%\n  summarize(res = prod(as.numeric(value))) %>%\n  pull(res)\n\n\n\n[1] 18482479935793\n0.227 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ninput <- read_file(\"2020/20-input\")\ninput <- str_remove(input, \"\\n$\")\n\ntiles <- str_split(input, \"\\n\\n\")[[1]]\n\ntile_info <- function(x) {\n  lines <- str_split(x, \"\\n\")[[1]]\n\n  id <- str_extract(lines[1], \"[0-9]+\")\n  grid <- lines[-1]\n\n  sides <- c(\n    paste0(str_sub(grid, 1, 1), collapse = \"\"),\n    paste0(str_sub(grid, length(grid), length(grid)), collapse = \"\"),\n    grid[c(1, length(grid))]\n  )\n\n  tibble(id, side = c(sides, stringi::stri_reverse(sides)))\n}\n\ntile_sides <- map_dfr(tiles, tile_info)\n\noptions(scipen = 999)\njoints <- inner_join(tile_sides, tile_sides, by = \"side\") %>%\n  filter(id.x != id.y) %>%\n  transmute(pair = map2_chr(id.x, id.y, ~\n                              paste(sort(c(.x, .y)), collapse = \" \")\n  )) %>%\n  distinct() %>%\n  separate(pair, c(\"a\", \"b\"), \" \")\n\ncurrent <- joints %>%\n  pivot_longer(everything()) %>%\n  count(value) %>%\n  filter(n == 2) %>%\n  slice(1) %>%\n  pull(value)\n\nmiddle <- joints %>%\n  pivot_longer(everything()) %>%\n  count(value) %>%\n  filter(n == 4) %>%\n  pull(value)\n\nnon_middle <- joints %>%\n  filter(!a %in% middle, !b %in% middle)\n\nplaces <- matrix(NA, 12, 12)\n\nused <- c()\nround <- c()\n\nrepeat {\n  round <- c(round, current)\n\n  next_tile <- non_middle %>%\n    filter(a %in% current | b %in% current, !a %in% used, !b %in% used) %>%\n    slice(1) %>%\n    unlist() %>%\n    setdiff(current)\n\n  if(length(next_tile) == 0) break\n  used <- c(used, current)\n  current <- next_tile\n}\n\nplaces[1, 1:12] <- round[1:12]\nplaces[2:12, 12] <- round[13:23]\nplaces[12, 11:1] <- round[24:34]\nplaces[11:2, 1] <- round[35:44]\n\nfor (i in 2:11) {\n  for (j in 2:11) {\n    partners <- c(places[i-1, j], places[i, j-1])\n\n    places[i, j] <- intersect(\n      joints %>%\n        filter(a %in% partners[1] | b %in% partners[1]) %>%\n        unlist() %>%\n        setdiff(partners[1]),\n      joints %>%\n        filter(a %in% partners[2] | b %in% partners[2]) %>%\n        unlist() %>%\n        setdiff(partners[1])\n    ) %>%\n      setdiff(places[i - 1, j - 1])\n  }\n}\n\nextract_full_grid <- function(x) {\n  str_split(x, \"\\n\")[[1]][-1] %>%\n    str_split(\"\") %>%\n    unlist() %>%\n    matrix(nrow = 10, byrow = TRUE)\n}\n\nfull_tiles <- map(tiles, extract_full_grid)\nnames(full_tiles) <- str_extract(tiles, \"[0-9]+\")\n\nrotate <- function(x) t(apply(x, 2, rev))\n\nall_tiles <- map(1:12, ~map(1:12, ~list()))\n\nall_tiles[[1]][[1]] <- full_tiles[[places[1, 1]]][, 10:1]\n\nall_symmmetries <- list(\n  function(x) x,\n  function(x) rotate(x),\n  function(x) rotate(rotate(x)),\n  function(x) rotate(rotate(rotate(x))),\n  function(x) x[, 10:1],\n  function(x) rotate(x[, 10:1]),\n  function(x) rotate(rotate(x[, 10:1])),\n  function(x) rotate(rotate(rotate(x[, 10:1])))\n)\n\nfor (i in 2:12) {\n  tile <- full_tiles[[places[1, i]]]\n\n  tile_symmetries <- map(all_symmmetries, ~.x(tile))\n\n  tile_which <- map_lgl(tile_symmetries, ~ all(all_tiles[[1]][[i - 1]][, 10] == .x[, 1]))\n\n  all_tiles[[1]][[i]] <- tile_symmetries[[which(tile_which)]]\n}\n\nfor (j in 2:12) {\n  for (i in 1:12) {\n    tile <- full_tiles[[places[j, i]]]\n\n    tile_symmetries <- map(all_symmmetries, ~.x(tile))\n\n    tile_which <- map_lgl(tile_symmetries, ~ all(all_tiles[[j - 1]][[i]][10, ] == .x[1, ]))\n\n    all_tiles[[j]][[i]] <- tile_symmetries[[which(tile_which)]]\n  }\n}\n\nx <- all_tiles[[1]][[1]]\n\nget_inner <- function(x) {\n  x[2:9, 2:9]\n}\n\nlake <- reduce(map(all_tiles, ~reduce(map(.x, get_inner), cbind)), rbind)\n\nmonster <- c(\n  \"                  # \",\n  \"#    ##    ##    ###\",\n  \" #  #  #  #  #  #   \"\n) %>%\n  str_split(\"\") %>%\n  unlist() %>%\n  matrix(nrow = 3, byrow = TRUE)\n\n\nfor (turn in 1:8) {\n  for (i in 1:94) {\n    for (j in 1:77) {\n      inlake <- lake[seq(i, i + 2), seq(j, j + 19)][monster == \"#\"]\n\n      if (all(inlake %in% c(\"#\", \"0\"))) {\n        lake[seq(i, i + 2), seq(j, j + 19)][monster == \"#\"] <- \"0\"\n      }\n    }\n  }\n  lake <- rotate(lake)\n  if(turn == 4) {\n    lake <- lake[, seq_len(nrow(lake))]\n  }\n}\n\nsum(lake == \"#\")\n\n\n\n[1] 2118\n1.719 sec elapsed\n\nDay 21\nPart 1\n\n\nlibrary(stringr)\nlibrary(purrr)\n\ninput <- readLines(\"2020/21-input\")\n\nallergies <- str_extract(input, \"\\\\(.*\")\nallergies <- str_remove(allergies, \"\\\\(contains \")\nallergies <- str_remove(allergies, \"\\\\)\")\nallergies <- str_split(allergies, \", \")\n\ningredient <- str_extract(input, \"[ a-z]+\")\ningredient <- str_extract_all(ingredient, \"[a-z]+\")\n\nall_allergies <- unique(unlist(allergies))\nall_ingredient <- character(length(all_allergies))\n\nrepeat {\n  res <- length(unlist(ingredient))\n\n  for (i in seq_along(all_allergies)) {\n    x <- all_allergies[i]\n\n    x_foods <- ingredient[map_lgl(allergies, ~any(.x %in% x))]\n\n    candidates <- reduce(x_foods, intersect)\n    if (length(candidates) != 1) next\n    all_ingredient[i] <- candidates\n    ingredient <- map(ingredient, setdiff, all_ingredient)\n  }\n\n  new_res <- length(unlist(ingredient))\n\n  if (res == new_res) break\n  res <- new_res\n}\n\nlength(unlist(ingredient))\n\n\n\n[1] 2724\n0.04 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\nlibrary(purrr)\n\ninput <- readLines(\"2020/21-input\")\n\nallergies <- str_extract(input, \"\\\\(.*\")\nallergies <- str_remove(allergies, \"\\\\(contains \")\nallergies <- str_remove(allergies, \"\\\\)\")\nallergies <- str_split(allergies, \", \")\n\ningredient <- str_extract(input, \"[ a-z]+\")\ningredient <- str_extract_all(ingredient, \"[a-z]+\")\n\nall_allergies <- unique(unlist(allergies))\nall_ingredient <- character(length(all_allergies))\n\nrepeat {\n  res <- length(unlist(ingredient))\n\n  for (i in seq_along(all_allergies)) {\n    x <- all_allergies[i]\n\n    x_foods <- ingredient[map_lgl(allergies, ~any(.x %in% x))]\n\n    candidates <- reduce(x_foods, intersect)\n    if (length(candidates) != 1) next\n    all_ingredient[i] <- candidates\n    ingredient <- map(ingredient, setdiff, all_ingredient)\n  }\n\n  new_res <- length(unlist(ingredient))\n\n  if (res == new_res) break\n  res <- new_res\n}\n\npaste(all_ingredient[order(all_allergies)], collapse = \",\")\n\n\n\n[1] \"xlxknk,cskbmx,cjdmk,bmhn,jrmr,tzxcmr,fmgxh,fxzh\"\n0.028 sec elapsed\n\nDay 22\nPart 1\n\n\ninput <- readLines(\"2020/22-input\")\n\nbp <- which(input == \"\")\n\nplayer1 <- as.numeric(input[seq(2, bp-1)])\nplayer2 <- as.numeric(input[seq(bp + 2, length(input))])\n\nrepeat {\n  if (player1[1] > player2[1]) {\n    player1 <- c(player1[-1], player1[1], player2[1])\n    player2 <- player2[-1]\n  } else {\n    player2 <- c(player2[-1], player2[1], player1[1])\n    player1 <- player1[-1]\n  }\n  if (length(player1) == 0 | length(player2) == 0) break\n}\n\nsum(player1 * rev(seq_along(player1))) +\n  sum(player2 * rev(seq_along(player2)))\n\n\n\n[1] 32472\n0.011 sec elapsed\n\nPart 2\n\n\nlibrary(purrr)\n\ninput <- readLines(\"2020/22-input\")\n\nbp <- which(input == \"\")\n\nplayer1 <- as.numeric(input[seq(2, bp - 1)])\nplayer2 <- as.numeric(input[seq(bp + 2, length(input))])\n\nplay_game <- function(hand1, hand2, subgame = FALSE) {\n  previous_hands1 <- list()\n  previous_hands2 <- list()\n  repeat {\n    if (any(map_lgl(previous_hands1, ~identical(.x, hand1))) &\n        any(map_lgl(previous_hands2, ~identical(.x, hand2)))) {\n      if (subgame) {\n        return(TRUE)\n      } else {\n        return(sum(hand1 * rev(seq_along(hand1))) +\n                 sum(hand2 * rev(seq_along(hand2))))\n      }\n    }\n\n    draw1 <- hand1[1]\n    draw2 <- hand2[1]\n\n    optim <- (max(hand1) > max(hand2)) &\n      max(hand1) > (length(c(hand1, hand2))) &\n      subgame\n    if(optim) {\n      return(TRUE)\n    }\n\n\n    if (draw1 < length(hand1) & draw2 < length(hand2)) {\n      winner <- play_game(hand1[seq_len(draw1) + 1],\n                          hand2[seq_len(draw2) + 1], subgame = TRUE)\n    } else {\n      winner <- hand1[1] > hand2[1]\n    }\n\n    previous_hands1 <- c(previous_hands1, list(hand1))\n    previous_hands2 <- c(previous_hands2, list(hand2))\n\n    if (winner) {\n      hand1 <- c(hand1[-1], hand1[1], hand2[1])\n      hand2 <- hand2[-1]\n    } else {\n      hand2 <- c(hand2[-1], hand2[1], hand1[1])\n      hand1 <- hand1[-1]\n    }\n    if (length(hand1) == 0 | length(hand2) == 0) break\n  }\n\n  if (subgame) {\n    return(length(hand2) == 0)\n  } else {\n    return(sum(hand1 * rev(seq_along(hand1))) +\n           sum(hand2 * rev(seq_along(hand2))))\n  }\n}\n\nplay_game(player1, player2)\n\n\n\n[1] 36463\n17.005 sec elapsed\n\nDay 23\nPart 1\n\n\ninput <- c(4, 7, 6, 1, 3, 8, 2, 5, 9)\ncurrent <- input[1]\n\na <- numeric(length(input))\n\ninput_len <- length(input)\n\nfor (i in seq_along(a)) {\n  which_i <- which(input == i)\n  if (which_i == input_len) {\n    a[i] <- input[1]\n  } else {\n    a[i] <- input[which_i + 1]\n  }\n}\n\nfor (i in 1:100) {\n\n  pick1 <- a[current]\n  pick2 <- a[pick1]\n  pick3 <- a[pick2]\n  pick4 <- a[pick3]\n\n  a[current] <- pick4\n\n  dest <- current - 1\n\n  if (dest == 0) {\n    dest <- input_len\n  }\n\n  while (dest %in% c(pick1, pick2, pick3)) {\n    dest <- dest - 1\n  }\n\n  if (dest == 0) {\n    dest <- input_len\n  }\n\n  while (dest %in% c(pick1, pick2, pick3)) {\n    dest <- dest - 1\n  }\n\n  end <- a[dest]\n\n  a[pick3] <- end\n  a[dest] <- pick1\n\n  current <- a[current]\n}\n\nres <- numeric(length(a))\nres[1] <- 1\n\nfor (i in 2:length(a)) {\n  res[i] <- a[res[i-1]]\n}\n\npaste0(res[-1], collapse = \"\")\n\n\n\n[1] \"97245386\"\n0.029 sec elapsed\n\nPart 2\n\n\ninput <- c(4, 7, 6, 1, 3, 8, 2, 5, 9)\ncurrent <- input[1]\n\na <- numeric(length(input))\n\ninput_len <- length(input)\n\na <- c(3, 5, 8, 7, 9, 1, 6, 2, 10,  seq(11, 1000000), 4)\n\ntictoc::tic()\nfor (i in 1:10000000) {\n\n  pick1 <- a[current]\n  pick2 <- a[pick1]\n  pick3 <- a[pick2]\n  pick4 <- a[pick3]\n\n  a[current] <- pick4\n\n  dest <- current - 1\n\n  if (dest == 0) {\n    dest <- input_len\n  }\n\n  while (dest %in% c(pick1, pick2, pick3)) {\n    dest <- dest - 1\n  }\n\n  if (dest == 0) {\n    dest <- input_len\n  }\n\n  while (dest %in% c(pick1, pick2, pick3)) {\n    dest <- dest - 1\n  }\n\n  end <- a[dest]\n\n  a[pick3] <- end\n  a[dest] <- pick1\n\n  current <- a[current]\n}\ntictoc::toc()\n\na[1] * a[a[1]]\n\n\n\n25.478 sec elapsed\n[1] 43717931544\n25.49 sec elapsed\n\nDay 24\nPart 1\n\n\nlibrary(stringr)\nlibrary(purrr)\n\ninput <- readLines(\"2020/24-input\")\n\nmoves <- c(\n  e = 1 + 0i,\n  se = 0 - 1i,\n  sw = -1 - 1i,\n  w = -1 + 0i,\n  nw = 0 + 1i,\n  ne = 1 + 1i\n)\nflips <- input %>%\n  str_extract_all(\"[ns]?[ew]\") %>%\n  map(~moves[.x]) %>%\n  map(sum) %>%\n  reduce(c)\n\nflips %>%\n  table() %>%\n  {sum(. %% 2 == 1)}\n\n\n\n[1] 386\n0.013 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\nlibrary(purrr)\n\ninput <- readLines(\"2020/24-input\")\n\nmoves <- c(\n  e = 1 + 0i,\n  se = 0 - 1i,\n  sw = -1 - 1i,\n  w = -1 + 0i,\n  nw = 0 + 1i,\n  ne = 1 + 1i\n)\nflips <- input %>%\n  str_extract_all(\"[ns]?[ew]\") %>%\n  map(~moves[.x]) %>%\n  map(sum) %>%\n  reduce(c)\n\nn_neighbors <- function(x, y, moves) {\n  rowSums(matrix(outer(x, moves, `+`) %in% y, ncol = length(moves)))\n}\nblack <- as.complex(names(table(flips)[table(flips) %% 2 == 1]))\n\nfor (i in 1:100) {\n  stay_black <- n_neighbors(black, black, moves) == 1\n\n  white_candidates <- map(black, ~.x + moves) %>%\n    unlist() %>%\n    unique()\n\n  new_black_ind <- n_neighbors(white_candidates, black, moves) == 2\n\n  new_black <- white_candidates[new_black_ind]\n\n  black <- c(black[stay_black], new_black)\n}\n\nlength(black)\n\n\n\n[1] 4214\n1.635 sec elapsed\n\nDay 25\nPart 1\n\n\ndiv <- 20201227\n\ncard_public <- 10943862\ndoor_public <- 12721030\n\ntransform <- function(subject, lpt) {\n  value <- 1\n  c <- 0\n  while (c < lpt) {\n    value <- value * subject\n    value <- value %% div\n    c <- c + 1\n  }\n  value\n}\n\nbruteforce <- function(value_goal) {\n  lpt <- 1\n  value <- 1\n  repeat {\n    value <- value * 7\n    value <- value %% div\n    if (value == value_goal) {\n      return(lpt)\n    }\n    lpt <- lpt + 1\n  }\n}\n\ncard_lpt_size <- bruteforce(card_public)\ndoor_lpt_size <- bruteforce(door_public)\n\ntransform(door_public, card_lpt_size)\n\n\n\n[1] 5025281\n8.838 sec elapsed\n\n\n\n\n\n",
      "last_modified": "2024-12-02T22:28:37-08:00"
    },
    {
      "path": "2021.html",
      "title": "My 2021 Solutions",
      "author": [],
      "contents": "\n\n\n\n\n\nDay 1\nPart 1\n\n\ninput <- scan(\"2021/01-input\")\n\nsum(diff(input) > 0)\n\n\n\n0.002 sec elapsed\n\nPart 2\n\n\ninput <- scan(\"2021/01-input\")\n\nsum3 <- slider::slide_dbl(input, mean, .before = 2)\n\nsum(diff(sum3) > 0)\n\n# Simpler solution thanks to https://twitter.com/trang1618\n# This works because `lag` happens to use the same direction\n# as `.before`\n#\n# sum(diff(input, lag = 3) > 0)\n\n\n\n0.044 sec elapsed\n\nDay 2\nPart 1\n\n\ninput <- read.delim(\"2021/02-input\", sep = \" \", header = FALSE)\n\nhorizontal <- 0\ndepth <- 0\n\nfor (i in seq_len(nrow(input))) {\n  command <- input[i, 1]\n  value <- input[i, 2]\n  if (command == \"forward\") {\n    horizontal <- horizontal + value\n  }\n  if (command == \"up\") {\n    depth <- depth - value\n  }\n  if (command == \"down\") {\n    depth <- depth + value\n  }\n}\n\ndepth * horizontal\n\n\n\n0.04 sec elapsed\n\nPart 2\n\n\ninput <- read.delim(\"2021/02-input\", sep = \" \", header = FALSE)\n\nhorizontal <- 0\ndepth <- 0\naim <- 0\n\nfor (i in seq_len(nrow(input))) {\n  command <- input[i, 1]\n  value <- input[i, 2]\n  if (command == \"forward\") {\n    horizontal <- horizontal + value\n    depth <- depth + aim * value\n  }\n  if (command == \"up\") {\n    aim <- aim - value\n  }\n  if (command == \"down\") {\n    aim <- aim + value\n  }\n}\n\ndepth * horizontal\n\n\n\n0.037 sec elapsed\n\nDay 3\nPart 1\n\n\ninput <- readLines(\"2021/03-input\") |>\n  strsplit(\"\") |>\n  purrr::reduce(rbind)\n\ncommon_finder <- function(x, fun, even) {\n  tab <- table(x)\n  if (length(tab) == 2 & tab[1] == tab[2]) return(even)\n  names(which(fun(tab) == tab))\n}\n\nrate_calculator <- function(mat, fun, even) {\n  apply(mat, MARGIN = 2, FUN = common_finder, fun, even) |>\n    paste0(collapse = \"\") |>\n    strtoi(base = 2)\n}\n\ngamma <- rate_calculator(input, max, \"1\")\n\nepsilon <- rate_calculator(input, min , \"0\")\n\ngamma * epsilon\n\n\n\n0.088 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2021/03-input\") |>\n  strsplit(\"\") |>\n  purrr::reduce(rbind)\n\ncommon_finder <- function(x, fun, even) {\n  tab <- table(x)\n  if (length(tab) == 2 & tab[1] == tab[2]) return(even)\n  names(which(fun(tab) == tab))\n}\n\nrate_calculator <- function(mat, fun, even) {\n  considered <- !logical(nrow(mat))\n\n  res <- c()\n\n  for (i in seq_len(ncol(mat))) {\n    top <- common_finder(mat[considered, i], fun, even)\n    res <- c(res, top)\n    considered <- considered & (mat[, i] == top)\n\n    if (sum(considered) == 1) break\n  }\n\n  mat[considered, ] |>\n    paste0(collapse = \"\") |>\n    strtoi(base = 2)\n}\n\noxygen <- rate_calculator(input, max, \"1\")\nco2 <- rate_calculator(input, min, \"0\")\n\noxygen * co2\n\n\n\n0.078 sec elapsed\n\nDay 4\nThe only difference between part 1 and 2 is that part 1 uses min(win_times) and part 2 uses max(win_times)\nPart 1\n\n\ninput <- readLines(\"2021/04-input\")\n\nread_matrix <- function(lines, sep = \"\", type = identity) {\n  lines <- stringr::str_trim(lines)\n  tokens <- strsplit(lines, sep)\n  token_lengths <- lengths(tokens)\n  res <- matrix(nrow = length(lines), ncol = max(token_lengths))\n\n  for (i in seq_along(lines)) {\n    res[i, seq_len(token_lengths[i])] <- type(tokens[[i]])\n  }\n  res\n}\n\nnumbers <- strsplit(input[1], \",\")[[1]] |> as.integer()\n\nboards <- purrr::map(\n  0:99,\n  ~ read_matrix(input[3:7 + 6 * .x], \"\\\\s+\", type = as.integer)\n)\n\ncheck_board <- function(board) {\n  for (i in seq_along(numbers)) {\n    matched <- matrix(board %in% numbers[seq_len(i)], nrow = 5)\n\n    row_checks <- apply(matched, MARGIN = 1, prod)\n    col_checks <- apply(matched, MARGIN = 2, prod)\n    if (any(c(row_checks, col_checks) == 1)) break\n  }\n  i\n}\n\nwin_times <- purrr::map_int(boards, check_board)\n\nfastest_time <- min(win_times)\nfastest_board <- boards[[which(win_times == fastest_time)]]\n\nsum(setdiff(fastest_board, numbers[seq_len(fastest_time)])) *\n  numbers[fastest_time]\n\n\n\n0.503 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2021/04-input\")\n\nread_matrix <- function(lines, sep = \"\", type = identity) {\n  lines <- stringr::str_trim(lines)\n  tokens <- strsplit(lines, sep)\n  token_lengths <- lengths(tokens)\n  res <- matrix(nrow = length(lines), ncol = max(token_lengths))\n\n  for (i in seq_along(lines)) {\n    res[i, seq_len(token_lengths[i])] <- type(tokens[[i]])\n  }\n  res\n}\n\nnumbers <- strsplit(input[1], \",\")[[1]] |> as.integer()\n\nboards <- purrr::map(\n  0:99,\n  ~ read_matrix(input[3:7 + 6 * .x], \"\\\\s+\", type = as.integer)\n)\n\ncheck_board <- function(board) {\n  for (i in seq_along(numbers)) {\n    matched <- matrix(board %in% numbers[seq_len(i)], nrow = 5)\n\n    row_checks <- apply(matched, MARGIN = 1, prod)\n    col_checks <- apply(matched, MARGIN = 2, prod)\n    if (any(c(row_checks, col_checks) == 1)) break\n  }\n  i\n}\n\nwin_times <- purrr::map_int(boards, check_board)\n\nslowest_time <- max(win_times)\nslowest_board <- boards[[which(win_times == slowest_time)]]\n\nsum(setdiff(slowest_board, numbers[seq_len(slowest_time)])) *\n  numbers[slowest_time]\n\n\n\n0.467 sec elapsed\n\nDay 5\nThis is one of the weird days where part 2 solution is simpler than part 1. Simple delete the first filter() call.\nPart 1\n\n\nlibrary(tidyverse)\n\ntibble(input = readLines(\"2021/05-input\")) %>%\n  separate(input, into = c(\"x1\", \"y1\", \"x2\", \"y2\"), convert = TRUE) %>%\n  filter(x1 == x2 | y1 == y2) %>%\n  group_nest(row_number()) %>%\n  mutate(crosses = map(data, ~tibble(x = .x$x1:.x$x2, y = .x$y1:.x$y2))) %>%\n  unnest(crosses) %>%\n  count(x, y) %>%\n  filter(n > 1) %>%\n  nrow()\n\n\n\n2.235 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ntibble(input = readLines(\"2021/05-input\")) %>%\n  separate(input, into = c(\"x1\", \"y1\", \"x2\", \"y2\"), convert = TRUE) %>%\n  group_nest(row_number()) %>%\n  mutate(crosses = map(data, ~tibble(x = .x$x1:.x$x2, y = .x$y1:.x$y2))) %>%\n  unnest(crosses) %>%\n  count(x, y) %>%\n  filter(n > 1) %>%\n  nrow()\n\n\n\n2.259 sec elapsed\n\nDay 6\nPart 1\n\n\ninput <- scan(\"2021/06-input\", sep = \",\")\n\nfor (i in seq_len(80)) {\n  input <- input - 1\n  if (any(input < 0)) {\n    input <- c(input, rep(8, sum(input < 0)))\n    input[input < 0] <- 6\n  }\n}\n\nlength(input)\n\n\n\n0.12 sec elapsed\n\nPart 2\n\n\ninput <- scan(\"2021/06-input\", sep = \",\")\n\ncounts <- c(0, tabulate(input, nbins = 8))\n\nfor (i in seq_len(256)) {\n  n0 <- counts[1]\n  counts[-length(counts)] <- counts[-1]\n  counts[7] <- counts[7] + n0\n  counts[9] <- n0\n}\n\noptions(scipen = 999)\nsum(counts)\n\n\n\n0.017 sec elapsed\n\nDay 7\nPart 1\n\n\ninput <- scan(\"2021/07-input\", sep = \",\")\n\nvalues <- seq(min(input), max(input))\n\nfuels <- purrr::map_dbl(values, ~ sum(abs(input - .x)))\nmin(fuels)\n\n# Trick from https://twitter.com/skyetetra\nsum(abs(median(input) - input))\n\n\n\n0.02 sec elapsed\n\nPart 2\n\n\ninput <- scan(\"2021/07-input\", sep = \",\")\n\nvalues <- seq(min(input), max(input))\n\nadjust <- function(n) n * (n + 1) / 2\n\nfuels <- purrr::map_dbl(values, ~sum(adjust(abs(input - .x))))\nmin(fuels)\n\n# Trick from https://twitter.com/skyetetra\nmin(\n  sum(adjust(abs(floor(mean(input)) - input))),\n  sum(adjust(abs(ceiling(mean(input)) - input)))\n)\n\n\n\n0.067 sec elapsed\n\nDay 8\nPart 1\n\n\nlibrary(tidyverse)\n\nreadLines(\"2021/08-input\") %>%\n  str_remove(\".*\\\\| \") %>%\n  str_split(\" \") %>%\n  map(nchar) %>%\n  map_int(~length(.x[.x %in% c(2, 4, 3, 7)])) %>%\n  sum()\n\n\n\n0.007 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ninput <- readLines(\"2021/08-input\")\n\nsplitter <- function(x) {\n  str_split(x, \" \") %>%\n    map(str_split, \"\") %>%\n    map(map, sort)\n}\n\nsetdiff_length <- function(x, y) {\n  lengths(map(x, ~setdiff(x[[which(y)]], .x)))\n}\n\nminus1 <- function(x) x - 1\n\nsolver <- function(lights, right) {\n  x1 <- lengths(lights) == 2\n  x4 <- lengths(lights) == 4\n  x7 <- lengths(lights) == 3\n  x8 <- lengths(lights) == 7\n  x6 <- lengths(lights) == 6 & setdiff_length(lights, x1) == 1\n  x0 <- lengths(lights) == 6 & setdiff_length(lights, x4) == 1 & !x6\n  x9 <- lengths(lights) == 6 & !x6 & !x0\n  x5 <- lengths(lights) == 5 & setdiff_length(lights, x6) == 1\n  x3 <- lengths(lights) == 5 & setdiff_length(lights, x9) == 1 & !x5\n  x2 <- lengths(lights) == 5 & !x5 & !x3\n\n  cont <- list(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9) %>%\n    map(~lights[[which(.x)]]) %>%\n    map(sort)\n\n  right %>%\n    match(cont) %>%\n    minus1() %>%\n    paste(collapse = \"\") %>%\n    as.numeric()\n}\n\ntibble(input) %>%\n  separate(input, c(\"left\", \"right\"), sep = \" \\\\| \") %>%\n  mutate(across(c(\"left\", \"right\"), splitter)) %>%\n  mutate(res = map2_dbl(left, right, solver)) %>%\n  summarise(total = sum(res))\n\n\n\n0.443 sec elapsed\n\nDay 9\nPart 1\n\n\nlibrary(purrr)\n\ninput <- readLines(\"2021/09-input\") |>\n  strsplit(\"\") |>\n  map(as.integer) |>\n  reduce(rbind)\n\nrow_length <- nrow(input)\ncol_length <- ncol(input)\n\nmat <- matrix(FALSE, row_length, col_length)\n\nfor (row in 1:row_length) {\n  for (col in 1:col_length) {\n    row_id <- c(row + 1, row, row - 1, row)\n    col_id <- c(col, col + 1, col, col - 1)\n\n    subset <- !(row_id > row_length | col_id > col_length)\n\n    row_id <- row_id[subset]\n    col_id <- col_id[subset]\n\n    if (all(input[cbind(row_id, col_id)] > input[row, col])) {\n      mat[row, col] <- TRUE\n    }\n  }\n}\n\nsum(input[mat] + 1)\n\n\n\n0.127 sec elapsed\n\nPart 2\n\n\nlibrary(purrr)\n\ninput <- readLines(\"2021/09-input\") |>\n  strsplit(\"\") |>\n  map(as.integer) |>\n  reduce(rbind)\n\nrow_length <- nrow(input)\ncol_length <- ncol(input)\n\nmat <- matrix(FALSE, row_length, col_length)\n\nfor (row in 1:row_length) {\n  for (col in 1:col_length) {\n    row_id <- c(row + 1, row, row - 1, row)\n    col_id <- c(col, col + 1, col, col - 1)\n\n    subset <- !(row_id > row_length | col_id > col_length)\n\n    row_id <- row_id[subset]\n    col_id <- col_id[subset]\n\n    if (all(input[cbind(row_id, col_id)] > input[row, col])) {\n      mat[row, col] <- TRUE\n    }\n  }\n}\n\naround <- function(row, col) {\n  list(\n    list(row = row + 0, col = col + 1),\n    list(row = row + 1, col = col + 0),\n    list(row = row + 0, col = col - 1),\n    list(row = row - 1, col = col + 0)\n  )\n}\n\nrange_checker <- function(can) {\n  !((can$row == 0) |\n      (can$row > row_length) |\n      (can$col == 0) |\n      (can$col > col_length))\n}\n\nvalue_checker <- function(can, ref) {\n  value <- input[can$row, can$col]\n  last_value <- input[ref$row, ref$col]\n\n  if (value == 9) return(FALSE)\n  value > last_value\n}\n\nbasin_size <- function(x) {\n\n  candidates <- list(\n    list(row = x[1], col = x[2])\n  )\n\n  saved <- list()\n\n  repeat {\n    new_candidaes <- around(candidates[[1]]$row, candidates[[1]]$col)\n    new_candidaes <- setdiff(new_candidaes, saved)\n    new_candidaes <- setdiff(new_candidaes, candidates)\n    new_candidaes <- new_candidaes[map_lgl(new_candidaes, range_checker)]\n\n    new_candidaes <- new_candidaes[\n      map_lgl(new_candidaes, value_checker, candidates[[1]])\n    ]\n\n    candidates <- c(candidates, new_candidaes)\n    saved <- c(saved, candidates[1])\n    candidates[1] <- NULL\n\n    if (length(candidates) == 0) break\n  }\n  length(saved)\n}\n\nlargest_basins <- which(mat, arr.ind = TRUE) |>\n  apply(1, basin_size)\n\nsort(largest_basins, decreasing = TRUE)[1:3] |>\n  prod()\n\n\n\n3.098 sec elapsed\n\nDay 10\nPart 1\n\n\nlibrary(stringr)\nlibrary(purrr)\n\ninput <- readLines(\"2021/10-input\")\n\nfull_pair <- c(\"\\\\(\\\\)\" = \"\", \"\\\\[\\\\]\" = \"\", \"\\\\{\\\\}\" = \"\", \"<>\" = \"\")\n\nremove_all_pairs <- function(x) {\n  old <- x\n  repeat {\n    new <- str_replace_all(old, full_pair)\n    if (old == new) break\n    old <- new\n  }\n  old\n}\n\npair_side <- c(\n  \"\\\\(\" = \"L\", \"\\\\[\" = \"L\", \"\\\\{\" = \"L\", \"<\" = \"L\",\n  \"\\\\)\" = \"R\", \"\\\\]\" = \"R\", \"\\\\}\" = \"R\", \">\" = \"R\"\n)\n\nfind_corrupted_pair <- function(x) {\n  value <- str_replace_all(x, pair_side)\n  loc <- str_locate(value, \"LR\")\n  if (is.na(loc[2])) return(NA)\n  str_sub(x, loc[2], loc[2])\n}\n\ncleaned_errors <- map_chr(input, remove_all_pairs)\ncorrupt <- map_chr(cleaned_errors, find_corrupted_pair)\n\nc(\")\"= 3, \"]\" = 57, \"}\" = 1197, \">\" = 25137)[corrupt] |>\n  sum(na.rm = TRUE)\n\n\n\n0.223 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\nlibrary(purrr)\n\ninput <- readLines(\"2021/10-input\")\n\nfull_pair <- c(\"\\\\(\\\\)\" = \"\", \"\\\\[\\\\]\" = \"\", \"\\\\{\\\\}\" = \"\", \"<>\" = \"\")\n\nremove_all_pairs <- function(x) {\n  old <- x\n  repeat {\n    new <- str_replace_all(old, full_pair)\n    if (old == new) break\n    old <- new\n  }\n  old\n}\n\npair_side <- c(\n  \"\\\\(\" = \"L\", \"\\\\[\" = \"L\", \"\\\\{\" = \"L\", \"<\" = \"L\",\n  \"\\\\)\" = \"R\", \"\\\\]\" = \"R\", \"\\\\}\" = \"R\", \">\" = \"R\"\n)\n\nfind_corrupted_pair <- function(x) {\n  value <- str_replace_all(x, pair_side)\n  loc <- str_locate(value, \"LR\")\n  if (is.na(loc[2])) return(NA)\n  str_sub(x, loc[2], loc[2])\n}\n\ncleaned_errors <- map_chr(input, remove_all_pairs)\ncorrupt <- map_chr(cleaned_errors, find_corrupted_pair)\n\nincomplete <- cleaned_errors[is.na(corrupt)]\n\ncomplete_error <- function(x) {\n  score <- 0\n  repeat {\n    last <- str_sub(x, -1, -1)\n    pat_com <- c(\"(\" = \")\", \"[\" = \"]\", \"{\" = \"}\", \"<\" = \">\")\n    score <- score * 5 + match(last, names(pat_com))\n    x <- paste0(x, pat_com[last])\n    x <- remove_all_pairs(x)\n    if (x == \"\") break\n  }\n  score\n}\n\nincomplete %>%\n  map_dbl(complete_error) %>%\n  median()\n\n\n\n0.456 sec elapsed\n\nDay 11\nPart 1\n\n\ninput <- readLines(\"2021/11-input\") |>\n  strsplit(\"\") |>\n  map(as.integer) |>\n  reduce(rbind)\n\nsize <- nrow(input)\n\naround <- function(x) {\n  row <- x[1]\n  col <- x[2]\n  row_id <- c(row - 1, row - 1, row - 1, row, row + 1, row + 1, row + 1, row)\n  col_id <- c(col - 1, col, col + 1, col + 1, col + 1, col, col - 1, col - 1)\n  subset <- !(row_id > size | col_id > size)\n  cbind(row_id[subset], col_id[subset])\n}\n\nflashes <- 0\n\nfor (i in 1:100) {\n  flashed <- matrix(FALSE, nrow = size, ncol = size)\n  input <- input + 1\n\n  repeat {\n    new_flashes <- which((input * !flashed) > 9, arr.ind = TRUE)\n\n    if (nrow(new_flashes) == 0) break\n\n    flashed <- flashed | (input > 9)\n\n    bursts <- map(seq_len(nrow(new_flashes)), ~around(new_flashes[.x, ])) |>\n      purrr::reduce(rbind)\n\n    for (i in seq_len(nrow(bursts))) {\n      input[bursts[i, 1], bursts[i, 2]] <- input[bursts[i, 1], bursts[i, 2]] + 1\n    }\n  }\n  input[flashed] <- 0\n  flashes <- flashes + sum(flashed)\n}\n\nflashes\n\n\n\n0.29 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2021/11-input\") |>\n  strsplit(\"\") |>\n  map(as.integer) |>\n  reduce(rbind)\n\nsize <- nrow(input)\n\naround <- function(x) {\n  row <- x[1]\n  col <- x[2]\n  row_id <- c(row - 1, row - 1, row - 1, row, row + 1, row + 1, row + 1, row)\n  col_id <- c(col - 1, col, col + 1, col + 1, col + 1, col, col - 1, col - 1)\n  subset <- !(row_id > size | col_id > size)\n  cbind(row_id[subset], col_id[subset])\n}\n\nstep <- 0\nrepeat {\n  step <- step + 1\n  flashed <- matrix(FALSE, nrow = size, ncol = size)\n  input <- input + 1\n\n  repeat {\n    new_flashes <- which((input * !flashed) > 9, arr.ind = TRUE)\n\n    if (nrow(new_flashes) == 0) break\n\n    flashed <- flashed | (input > 9)\n\n    bursts <- map(seq_len(nrow(new_flashes)), ~around(new_flashes[.x, ])) |>\n      purrr::reduce(rbind)\n\n    for (i in seq_len(nrow(bursts))) {\n      input[bursts[i, 1], bursts[i, 2]] <- input[bursts[i, 1], bursts[i, 2]] + 1\n    }\n  }\n  input[flashed] <- 0\n\n  if(all(flashed)) break\n}\n\nstep\n\n\n\n0.919 sec elapsed\n\nDay 12\n\n\nlibrary(tidyverse)\n\ninput <- tibble(input = readLines(\"2021/12-input\")) %>%\n  separate(input, into = c(\"from\", \"to\"))\n\ninput <- bind_rows(\n  input,\n  input %>% mutate(tmp = from, from = to, to = tmp) %>% select(-tmp)\n)\n\nlast <- function(x) x[length(x)]\n\nadd_next_step <- function(x) {\n  last_x <- last(x)\n  if (last_x == \"end\") return(list(x))\n  new_steps <- input$to[input$from == last_x]\n\n  map(new_steps, ~c(x, .x))\n}\n\nis_correct <- function(x) {\n  if (length(x) > 1 & last(x) == \"start\") return(FALSE)\n  x <- x[!x %in% c(\"end\", \"start\")]\n  tab <- table(x)\n  tab_names <- names(tab)\n  small <- str_to_lower(tab_names) == tab_names\n  all(tab[small] == 1)\n}\n\nvalidate_path <- function(x) {\n  keep(x, is_correct)\n}\n\ngrow <- function(x) {\n  x %>%\n    map(add_next_step) %>%\n    flatten() %>%\n    validate_path()\n}\n\nold <- list()\nold[[1]] <- \"start\"\n\nrepeat {\n  new <- grow(old)\n\n  if (identical(old, new)) break\n  old <- new\n}\n\nlength(old)\n\n\n\n9.098 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ninput <- tibble(input = readLines(\"2021/12-input\")) %>%\n  separate(input, into = c(\"from\", \"to\"))\n\ninput <- bind_rows(\n  input,\n  input %>% mutate(tmp = from, from = to, to = tmp) %>% select(-tmp)\n)\n\nadjacency <- split(input$from, input$to)\n\nis_lower <- function(x) tolower(x) == x\n\npaths <- function(current, seen, duplicate) {\n  if (current == \"end\") {\n    return(1)\n  }\n  if (current == \"start\" & !is.null(seen)) {\n    return(0)\n  }\n  if (is_lower(current) & current %in% seen) {\n    if (is.null(duplicate)) {\n      duplicate <- current\n    } else {\n      return(0)\n    }\n  }\n  seen <- c(seen, current)\n  out <- 0\n  for (i in adjacency[[current]]) {\n    out <- out + paths(i, seen, duplicate)\n  }\n  out\n}\n\npaths(current = \"start\", seen = NULL, duplicate = NULL)\n\n\n\n6.642 sec elapsed\n\nDay 13\n\n\nlibrary(tidyverse)\n\ninput <- readLines(\"2021/13-input\")\n\nmid <- which(input == \"\")\n\np1 <- function(x) x + 1L\n\nfolds <- input[seq(mid + 1, length(input))]\npoints <- input[seq_len(mid - 1)] %>%\n  str_split(\",\") %>%\n  map(as.integer) %>%\n  map(p1)\n\n\nmat <- matrix(\n  FALSE,\n  nrow = points %>% map_int(~.x[2]) %>% max(),\n  ncol = points %>% map_int(~.x[1]) %>% max()\n)\n\nfor (point in points) {\n  mat[point[[2]], point[[1]]] <- TRUE\n}\n\nfold <- folds[1]\n\naxis <- str_extract(fold, \"[xy]\")\namount <- str_extract(fold, \"[0-9]+\") %>% as.integer() %>% p1()\n\nif (axis == \"y\") {\n  folded <- seq(nrow(mat), amount + 1)\n  landed <- seq(amount - length(folded), amount - 1)\n\n  mat[landed, ] <- mat[landed, ] | mat[folded, ]\n  mat <- mat[seq_len(amount - 1), ]\n} else {\n  folded <- seq(ncol(mat), amount + 1)\n  landed <- seq(amount - length(folded), amount - 1)\n\n  mat[, landed] <- mat[, landed] | mat[, folded]\n  mat <- mat[, seq_len(amount - 1)]\n}\n\nsum(mat)\n\n\n\n0.031 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ninput <- readLines(\"2021/13-input\")\n\nmid <- which(input == \"\")\n\np1 <- function(x) x + 1L\n\nfolds <- input[seq(mid + 1, length(input))]\npoints <- input[seq_len(mid - 1)] %>%\n  str_split(\",\") %>%\n  map(as.integer) %>%\n  map(p1)\n\n\nmat <- matrix(\n  FALSE,\n  nrow = points %>% map_int(~.x[2]) %>% max(),\n  ncol = points %>% map_int(~.x[1]) %>% max()\n)\n\nfor (point in points) {\n  mat[point[[2]], point[[1]]] <- TRUE\n}\n\nfor (fold in folds) {\n  axis <- str_extract(fold, \"[xy]\")\n  amount <- str_extract(fold, \"[0-9]+\") %>% as.integer() %>% p1()\n\n  if (axis == \"y\") {\n    folded <- seq(nrow(mat), amount + 1)\n    landed <- seq(amount - length(folded), amount - 1)\n\n    mat[landed, ] <- mat[landed, ] | mat[folded, ]\n    mat <- mat[seq_len(amount - 1), ]\n  } else {\n    folded <- seq(ncol(mat), amount + 1)\n    landed <- seq(amount - length(folded), amount - 1)\n\n    mat[, landed] <- mat[, landed] | mat[, folded]\n    mat <- mat[, seq_len(amount - 1)]\n  }\n}\n\nreshape2::melt(mat) %>%\n  ggplot(aes(Var2, -Var1, fill = value)) +\n  geom_raster()\n\n\n\n0.076 sec elapsed\n\nDay 14\nThe only difference here between part 1 and part 2 is setting the step range from 10 to 40\n\n\nlibrary(tidyverse)\n\ntemplate <- readLines(\"2021/14-input\")[1]\npairs <- readLines(\"2021/14-input\")[-(1:2)]\n\nfrom <- str_sub(pairs, 1, 2)\n\nadj <- map(pairs, ~ c(paste0(str_sub(.x, 1, 1), str_sub(.x, -1, -1)),\n                      paste0(str_sub(.x, -1, -1), str_sub(.x, 2, 2))))\nnames(adj) <- from\n\nref_counts <- counts <- set_names(integer(length(from)), from)\nfor (i in seq(1, nchar(template) - 1)) {\n  pair <- str_sub(template, i, i + 1)\n  counts[pair] <- counts[pair] + 1\n}\n\nfor (step in 1:10) {\n  new_counts <- ref_counts\n  for (pair in names(new_counts)) {\n    new_counts[adj[[pair]][1]] <- new_counts[adj[[pair]][1]] + counts[pair]\n    new_counts[adj[[pair]][2]] <- new_counts[adj[[pair]][2]] + counts[pair]\n  }\n  counts <- new_counts\n}\n\ntibble(\n  count = c(counts, 1),\n  char = c(str_sub(names(counts), 1, 1), str_sub(template, -1, -1))\n) %>%\n  count(char, wt = count, sort = TRUE) %>%\n  summarise(max(n) - min(n))\n\n\n\n0.076 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ntemplate <- readLines(\"2021/14-input\")[1]\npairs <- readLines(\"2021/14-input\")[-(1:2)]\n\nfrom <- str_sub(pairs, 1, 2)\n\nadj <- map(pairs, ~ c(paste0(str_sub(.x, 1, 1), str_sub(.x, -1, -1)),\n                      paste0(str_sub(.x, -1, -1), str_sub(.x, 2, 2))))\nnames(adj) <- from\n\nref_counts <- counts <- set_names(integer(length(from)), from)\nfor (i in seq(1, nchar(template) - 1)) {\n  pair <- str_sub(template, i, i + 1)\n  counts[pair] <- counts[pair] + 1\n}\n\nfor (step in 1:40) {\n  new_counts <- ref_counts\n  for (pair in names(new_counts)) {\n    new_counts[adj[[pair]][1]] <- new_counts[adj[[pair]][1]] + counts[pair]\n    new_counts[adj[[pair]][2]] <- new_counts[adj[[pair]][2]] + counts[pair]\n  }\n  counts <- new_counts\n}\n\ntibble(\n  count = c(counts, 1),\n  char = c(str_sub(names(counts), 1, 1), str_sub(template, -1, -1))\n) %>%\n  count(char, wt = count, sort = TRUE) %>%\n  summarise(max(n) - min(n))\n\n\n\n0.079 sec elapsed\n\nDay 15\nDay 16\nDay 17\nDay 18\nDay 19\nDay 20\nDay 21\nDay 22\nDay 23\nDay 24\nDay 25\n\n\n\n\n",
      "last_modified": "2024-12-02T22:28:42-08:00"
    },
    {
      "path": "2022.html",
      "title": "My 2022 Solutions",
      "author": [],
      "contents": "\n\n\n\n\n\nDay 1\nPart 1\n\n\ninput <- readLines(\"2022/01-input\")\ninput <- as.numeric(input)\n\nsplit(input, cumsum(is.na(input))) |>\n  vapply(sum, na.rm = TRUE, FUN.VALUE = numeric(1)) |>\n  max()\n\n\n\n0.001 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2022/01-input\")\ninput <- as.numeric(input)\n\nsplit(input, cumsum(is.na(input))) |>\n  vapply(sum, na.rm = TRUE, FUN.VALUE = numeric(1)) |>\n  sort() |>\n  tail(3) |>\n  sum()\n\n\n\n0.002 sec elapsed\n\nDay 2\nPart 1\n\n\ninput <- readLines(\"2022/02-input\")\n\ndict <- c(A = \"rock\", B = \"paper\", C = \"scissors\",\n          X = \"rock\", Y = \"paper\", Z = \"scissors\")\n\nyou <- dict[substr(input, 1, 1)]\nme <- dict[substr(input, 3, 3)]\n\nmat <- matrix(\n  c(\"tie\", \"lose\", \"win\",\n    \"win\", \"tie\", \"lose\",\n    \"lose\", \"win\", \"tie\"),\n  byrow = TRUE, ncol = 3,\n  dimnames = list(c(\"rock\", \"paper\", \"scissors\"),\n                  c(\"rock\", \"paper\", \"scissors\"))\n)\n\nscores <- c(win = 6, tie = 3, lose = 0, rock = 1, paper = 2, scissors = 3)\n\nsum(scores[mat[cbind(me, you)]]) + sum(scores[me])\n\n\n\n0.002 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2022/02-input\")\n\ndict <- c(A = \"rock\", B = \"paper\", C = \"scissors\",\n          X = \"lose\", Y = \"tie\", Z = \"win\")\n\nyou <- dict[substr(input, 1, 1)]\nme <- dict[substr(input, 3, 3)]\n\nmat <- matrix(\n  c(\"scissors\", \"rock\", \"paper\",\n    \"paper\", \"scissors\", \"rock\",\n    \"rock\", \"paper\", \"scissors\"),\n  byrow = TRUE, ncol = 3,\n  dimnames = list(c(\"lose\", \"win\", \"tie\"),\n                  c(\"rock\", \"paper\", \"scissors\"))\n)\nmat\n\nscores <- c(win = 6, tie = 3, lose = 0, rock = 1, paper = 2, scissors = 3)\n\nsum(scores[mat[cbind(me, you)]]) + sum(scores[me])\n\n\n\n0.002 sec elapsed\n\nDay 3\nPart 1\n\n\nlibrary(purrr)\n\ninput <- readLines(\"2022/03-input\") |>\n  strsplit(split = \"\")\n\nscore <- c(letters, LETTERS)\n\ncommon_split <- function(x) {\n  half <- length(x) / 2\n  intersect(\n    head(x, half), tail(x, half)\n  )\n}\n\nmap_chr(input, common_split) |>\n  match(score) |>\n  sum()\n\n\n\n0.012 sec elapsed\n\nPart 2\n\n\nlibrary(purrr)\n\ninput <- readLines(\"2022/03-input\") |>\n  strsplit(split = \"\")\n\ninput_group <- split(input, rep(seq_len(length(input) / 3), each = 3))\n\nscore <- c(letters, LETTERS)\n\ncommon_group <- function(x) {\n  x[[1]] |>\n    intersect(x[[2]]) |>\n    intersect(x[[3]])\n}\n\nmap_chr(input_group, common_group) |>\n  match(score) |>\n  sum()\n\n\n\n0.002 sec elapsed\n\nDay 4\nPart 1\n\n\nlibrary(purrr)\n\ninput <- readLines(\"2022/04-input\") |>\n  strsplit(\"[-,]\") |>\n  map(as.integer)\n\ncontain <- function(x) {\n  seq1 <- seq(x[1], x[2])\n  seq2 <- seq(x[3], x[4])\n\n  length(setdiff(seq1, seq2)) == 0 ||\n  length(setdiff(seq2, seq1)) == 0\n}\n\nmap_lgl(input, contain) |> sum()\n\n\n\n0.028 sec elapsed\n\nPart 2\n\n\nlibrary(purrr)\n\ninput <- readLines(\"2022/04-input\") |>\n  strsplit(\"[-,]\") |>\n  map(as.integer)\n\noverlap <- function(x) {\n  seq1 <- seq(x[1], x[2])\n  seq2 <- seq(x[3], x[4])\n\n  length(intersect(seq1, seq2)) > 0\n}\n\nmap_lgl(input, overlap) |> sum()\n\n\n\n0.014 sec elapsed\n\nDay 5\nPart 1\n\n\nlibrary(tidyverse)\n\ninput <- read_lines(\"2022/05-input\")\ndelim <- which(input == \"\")\n\ncargo <- input[seq(1, delim - 2)]\ninsts <- input[seq(delim + 1, length(input))] |>\n  str_extract_all(\"[0-9]+\") |>\n  map(as.integer)\n\nbox_loc <- seq(1, (max(nchar(cargo)) + 1) / 4) * 4 - 2\n\nstacks <- map(box_loc, ~ str_sub(cargo, .x, .x)) |>\n  map(setdiff, c(\"\", \" \")) |>\n  map(rev)\n\nfor (inst in insts) {\n  from <- inst[2]\n  to <- inst[3]\n  amount <- inst[1]\n  stacks[[to]] <- c(stacks[[to]], rev(tail(stacks[[from]], amount)))\n  stacks[[from]] <- head(stacks[[from]], -amount)\n}\n\npurrr::map_chr(stacks, tail, 1) |> paste(collapse = \"\")\n\n\n\n0.127 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ninput <- read_lines(\"2022/05-input\")\ndelim <- which(input == \"\")\n\ncargo <- input[seq(1, delim - 2)]\ninsts <- input[seq(delim + 1, length(input))] |>\n  str_extract_all(\"[0-9]+\") |>\n  map(as.integer)\n\nbox_loc <- seq(1, (max(nchar(cargo)) + 1) / 4) * 4 - 2\n\nstacks <- map(box_loc, ~ str_sub(cargo, .x, .x)) |>\n  map(setdiff, c(\"\", \" \")) |>\n  map(rev)\n\nfor (inst in insts) {\n  from <- inst[2]\n  to <- inst[3]\n  amount <- inst[1]\n  stacks[[to]] <- c(stacks[[to]], tail(stacks[[from]], amount))\n  stacks[[from]] <- head(stacks[[from]], -amount)\n}\n\npurrr::map_chr(stacks, tail, 1) |> paste(collapse = \"\")\n\n\n\n0.009 sec elapsed\n\nDay 6\nPart 1\n\n\ninput <- readLines(\"2022/06-input\")\ninput <- strsplit(input, \"\")[[1]]\n\ntar_length <- 4 # change to 14 for part 2\noffset <- tar_length - 1\n\nfor (i in seq_len(length(input) - offset)) {\n  if (length(unique(input[seq(i, i + offset)])) == tar_length) {\n    break\n  }\n}\ni + offset\n\n\n\n0.008 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2022/06-input\")\ninput <- strsplit(input, \"\")[[1]]\n\ntar_length <- 14\noffset <- tar_length - 1\n\nfor (i in seq_len(length(input) - offset)) {\n  if (length(unique(input[seq(i, i + offset)])) == tar_length) {\n    break\n  }\n}\ni + offset\n\n\n\n0.018 sec elapsed\n\nDay 7\nPart 1\n\n\nlibrary(tidyverse)\n\ninput <- readLines(\"2022/07-input\")\n\ndisk <- list()\ni <- 2\npath <- c(NULL)\n\nwhile (i <= length(input)) {\nif (input[i] == \"$ ls\") {\n  repeat {\n    i <- i + 1\n    if (i > length(input)) break\n    if (str_detect(input[i], \"^\\\\$\")) break\n    if (str_detect(input[i], \"^dir\")) {\n      dir_name <- str_remove(input[i], \"dir \")\n      disk[[c(path, dir_name)]] <- list()\n    } else {\n      file_name <- str_remove(input[i], \"\\\\d+ \")\n      file_value <- str_extract(input[i], \"\\\\d+\") |> as.numeric()\n      disk[[c(path, file_name)]] <- file_value\n    }\n  }\n} else if (str_detect(input[i], \"^\\\\$ cd \\\\.\\\\.\")) {\n  path <- path[-length(path)]\n  i <- i + 1\n} else if (str_detect(input[i], \"^\\\\$ cd\")) {\n  next_dir <- str_remove(input[i], \"^\\\\$ cd \")\n  path <- c(path, next_dir)\n  i <- i + 1\n}\n}\n\ndir_sums <- list()\n\nlists <- map_lgl(disk, is.list)\nunused_folders <- as.list(names(disk)[lists])\n\nrepeat {\nif (length(unused_folders) == 0) break\n  path <- unused_folders[[1]]\n  lists <- map_lgl(disk[[path]], is.list)\n  if (any(lists)) {\n    new_lists <- names(lists)[lists]\n    for (new_list in new_lists) {\n      unused_folders <- c(list(c(path, new_list)), unused_folders)\n    }\n  } else {\n    dir_sum <- sum(unlist(disk[[path]]))\n    dir_sums[paste(path, collapse = \"_\")] <- dir_sum\n    disk[[path]] <- dir_sum\n    unused_folders[[1]] <- NULL\n  }\n}\n\ndir_sums$total <- sum(unlist(disk))\ndir_sums <- unlist(dir_sums)\n\ndir_sums[dir_sums < 100000] |>\n  sum()\n\n\n\n0.091 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ninput <- readLines(\"2022/07-input\")\n\ndisk <- list()\ni <- 2\npath <- c(NULL)\n\nwhile (i <= length(input)) {\n  if (input[i] == \"$ ls\") {\n    repeat {\n      i <- i + 1\n      if (i > length(input)) break\n      if (str_detect(input[i], \"^\\\\$\")) break\n      if (str_detect(input[i], \"^dir\")) {\n        dir_name <- str_remove(input[i], \"dir \")\n        disk[[c(path, dir_name)]] <- list()\n      } else {\n        file_name <- str_remove(input[i], \"\\\\d+ \")\n        file_value <- str_extract(input[i], \"\\\\d+\") |> as.numeric()\n        disk[[c(path, file_name)]] <- file_value\n      }\n    }\n  } else if (str_detect(input[i], \"^\\\\$ cd \\\\.\\\\.\")) {\n    path <- path[-length(path)]\n    i <- i + 1\n  } else if (str_detect(input[i], \"^\\\\$ cd\")) {\n    next_dir <- str_remove(input[i], \"^\\\\$ cd \")\n    path <- c(path, next_dir)\n    i <- i + 1\n  }\n}\n\ndir_sums <- list()\n\nlists <- map_lgl(disk, is.list)\nunused_folders <- as.list(names(disk)[lists])\n\nrepeat {\n  if (length(unused_folders) == 0) break\n  path <- unused_folders[[1]]\n  lists <- map_lgl(disk[[path]], is.list)\n  if (any(lists)) {\n    new_lists <- names(lists)[lists]\n    for (new_list in new_lists) {\n      unused_folders <- c(list(c(path, new_list)), unused_folders)\n    }\n  } else {\n    dir_sum <- sum(unlist(disk[[path]]))\n    dir_sums[paste(path, collapse = \"_\")] <- dir_sum\n    disk[[path]] <- dir_sum\n    unused_folders[[1]] <- NULL\n  }\n}\n\ndir_sums$total <- sum(unlist(disk))\ndir_sums <- unlist(dir_sums)\n\ndir_sums[dir_sums >= (30000000 - (70000000 - dir_sums[\"total\"]))] |>\n  sort() |>\n  head(1)\n\n\n\n0.084 sec elapsed\n\nDay 8\nPart 1\n\n\nlibrary(tidyverse)\n\nread_matrix <- function(path, sep = \"\", fill = NA, type = identity) {\n  lines <- readLines(path)\n  tokens <- strsplit(lines, sep)\n  token_lengths <- lengths(tokens)\n  res <- matrix(fill, nrow = length(lines), ncol = max(token_lengths))\n\n  for (i in seq_along(lines)) {\n    res[i, seq_len(token_lengths[i])] <- type(tokens[[i]])\n  }\n  res\n}\n\ninput <- read_matrix(\"2022/08-input\", type = as.integer)\n\nres <- matrix(FALSE, nrow = nrow(input), ncol = ncol(input))\n\nn_row <- nrow(input)\nn_col <- ncol(input)\n\nfor (row in seq_len(n_row)) {\n  for (col in seq_len(n_col)) {\n    tree <- input[row, col]\n\n    # Edge\n    if (row == 1 || row == n_row || col == 1 || col == n_col) {\n      res[row, col] <- TRUE\n      next\n    }\n\n    # Above\n    above <- input[seq(1, row - 1), col]\n    if (all(tree > above)) {\n      res[row, col] <- TRUE\n      next\n    }\n\n    # below\n    below <- input[seq(n_row, row + 1), col]\n    if (all(tree > below)) {\n      res[row, col] <- TRUE\n      next\n    }\n\n    # left\n    left <- input[row, seq(1, col - 1)]\n    if (all(tree > left)) {\n      res[row, col] <- TRUE\n      next\n    }\n\n    # left\n    right <- input[row, seq(n_col, col + 1)]\n    if (all(tree > right)) {\n      res[row, col] <- TRUE\n      next\n    }\n  }\n}\n\nsum(res)\n\n\n\n0.132 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\nread_matrix <- function(path, sep = \"\", fill = NA, type = identity) {\n  lines <- readLines(path)\n  tokens <- strsplit(lines, sep)\n  token_lengths <- lengths(tokens)\n  res <- matrix(fill, nrow = length(lines), ncol = max(token_lengths))\n\n  for (i in seq_along(lines)) {\n    res[i, seq_len(token_lengths[i])] <- type(tokens[[i]])\n  }\n  res\n}\n\ninput <- read_matrix(\"2022/08-input\", type = as.integer)\n\nres <- matrix(0, nrow = nrow(input), ncol = ncol(input))\n\nn_row <- nrow(input)\nn_col <- ncol(input)\n\ndistances <- function(input, rows, cols) {\n  above <- input[rows, cols]\n  suppressWarnings(distance <- min(which(!(tree > above))))\n  if (distance == Inf) {\n    distance <- length(above)\n  }\n  distance\n}\n\nfor (row in seq_len(n_row)) {\n  for (col in seq_len(n_col)) {\n    tree <- input[row, col]\n    total <- 1\n\n    # Above\n    if (row > 1) {\n      distance <- distances(input, seq(row - 1, 1), col)\n      total <- total * distance\n    }\n\n    # below\n    if (row < n_row) {\n      distance <- distances(input, seq(row + 1, n_row), col)\n      total <- total * distance\n    }\n\n    # left\n    if (col > 1) {\n      distance <- distances(input, row, seq(col - 1, 1))\n      total <- total * distance\n    }\n\n    # right\n    if (col < n_col) {\n      distance <- distances(input, row, seq(col + 1, n_col))\n      total <- total * distance\n    }\n    res[row, col] <- total\n  }\n}\n\nmax(res)\n\n\n\n0.345 sec elapsed\n\nDay 9\nDay 10\nPart 1\n\n\ninput <- readLines(\"2022/10-input\")\n\nX <- 1\ncycles <- 0\n\nfor (i in input) {\n  if (i == \"noop\") {\n    cycles <- c(cycles, X)\n\n  } else {\n    cycles <- c(cycles, X)\n    cycles <- c(cycles, X)\n    val <- as.integer(substr(i, 6, nchar(i)))\n    X <- X + val\n  }\n}\n\ncycles <- cycles[-1]\n\nindex <- c(20, 60, 100, 140, 180, 220)\n\nsum(cycles[index] * index)\n\n\n\n0.004 sec elapsed\n\nPart 2\nDay 11\nDay 12\nDay 13\nDay 14\nDay 15\nDay 16\nDay 17\nDay 18\nDay 19\nDay 20\nDay 21\nDay 22\nDay 23\nDay 24\nDay 25\n\n\n\n\n",
      "last_modified": "2024-12-02T22:28:44-08:00"
    },
    {
      "path": "2023.html",
      "title": "My 2023 Solutions",
      "author": [],
      "contents": "\n\n\n\n\n\nDay 1\nPart 1\n\n\ninput <- readLines(\"2023/01-input\")\n\ninput |>\n  stringr::str_extract_all(\"\\\\d\") |>\n  purrr::map_chr(~ paste0(head(.x, 1), tail(.x, 1))) |>\n  as.integer() |>\n  sum()\n\n\n\n0.01 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2023/01-input\")\n\nnumbers <- c(\n  \"one\" = 1, \"two\" = 2, \"three\" = 3, \"four\" = 4, \"five\" = 5,\n  \"six\" = 6, \"seven\" = 7, \"eight\" = 8, \"nine\" = 9,\n  setNames(nm = 1:9)\n)\nsrebmun <- numbers\nnames(srebmun) <- stringi::stri_reverse(names(srebmun))\n\nget_digit <- function(x, ref) {\n  res <- x |>\n    stringr::str_extract(paste0(\"(\", paste0(names(ref), collapse = \"|\"), \")\"))\n\n  ref[res]\n}\n\nsum(\n  get_digit(input, numbers) * 10 +\n  get_digit(stringi::stri_reverse(input), srebmun)\n)\n\n\n\n0.006 sec elapsed\n\nDay 2\nPart 1\n\n\ninput <- readLines(\"2023/02-input\")\n\nblue <- function(x) {\n  x |>\n    stringr::str_extract(\"\\\\d+ blue\") |>\n    stringr::str_extract(\"\\\\d++\") |>\n    as.numeric()\n}\ngreen <- function(x) {\n  x |>\n    stringr::str_extract(\"\\\\d+ green\") |>\n    stringr::str_extract(\"\\\\d++\") |>\n    as.numeric()\n}\nred <- function(x) {\n  x |>\n    stringr::str_extract(\"\\\\d+ red\") |>\n    stringr::str_extract(\"\\\\d++\") |>\n    as.numeric()\n}\n\ncounts <- function(x) {\n  tibble::tibble(blue = blue(x), green = green(x), red = red(x))\n}\n\nlibrary(tidyverse)\n\ninput |>\n  stringr::str_remove(\"Game \\\\d+: \") |>\n  stringr::str_split(\"; \") |>\n  setNames(seq_along(input)) |>\n  purrr::map(counts) |>\n  purrr::list_rbind(names_to = \"id\") |>\n  summarize(\n    .by = id,\n    across(everything(), max, na.rm = TRUE)\n  ) |>\n  filter(red <= 12, green <= 13, blue <= 14) |>\n  summarise(sum(as.numeric(id)))\n\n\n\n0.385 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2023/02-input\")\n\nblue <- function(x) {\n  x |>\n    stringr::str_extract(\"\\\\d+ blue\") |>\n    stringr::str_extract(\"\\\\d++\") |>\n    as.numeric()\n}\ngreen <- function(x) {\n  x |>\n    stringr::str_extract(\"\\\\d+ green\") |>\n    stringr::str_extract(\"\\\\d++\") |>\n    as.numeric()\n}\nred <- function(x) {\n  x |>\n    stringr::str_extract(\"\\\\d+ red\") |>\n    stringr::str_extract(\"\\\\d++\") |>\n    as.numeric()\n}\n\ncounts <- function(x) {\n  tibble::tibble(blue = blue(x), green = green(x), red = red(x))\n}\n\nlibrary(tidyverse)\n\ninput |>\n  stringr::str_remove(\"Game \\\\d+: \") |>\n  stringr::str_split(\"; \") |>\n  setNames(seq_along(input)) |>\n  purrr::map(counts) |>\n  purrr::list_rbind(names_to = \"id\") |>\n  summarize(\n    .by = id,\n    across(everything(), max, na.rm = TRUE)\n  ) |>\n  mutate(power = blue * green * red) |>\n  summarize(sum(power))\n\n\n\n0.223 sec elapsed\n\nDay 3\nPart 1\n\n\nread_matrix <- function(path, sep = \"\", fill = NA, type = identity) {\n  lines <- readLines(path)\n  tokens <- strsplit(lines, sep)\n  token_lengths <- lengths(tokens)\n  res <- matrix(fill, nrow = length(lines), ncol = max(token_lengths))\n\n  for (i in seq_along(lines)) {\n    res[i, seq_len(token_lengths[i])] <- type(tokens[[i]])\n  }\n  res\n}\n\nmat <- read_matrix(\"2023/03-input\")\n\npartnumber <- matrix(FALSE, nrow = nrow(mat), ncol = ncol(mat))\n\nnumbers <- as.character(0:9)\n\ninvalids <- c(numbers, \".\")\n\naround <- function(x, y, x_max = nrow(mat), y_max = ncol(mat)) {\n  xs <- x + c(-1, 0, 1)\n  ys <- y + c(-1, 0, 1)\n\n  xs <- xs[xs > 0]\n  ys <- ys[ys > 0]\n  xs <- xs[xs <= x_max]\n  ys <- ys[ys <= y_max]\n\n\n  mat[xs, ys]\n}\n\nfor (i in seq_len(nrow(mat))) {\n  for (j in seq_len(ncol(mat))) {\n    partnumber[i, j] <- ifelse(\n      mat[i, j] %in% numbers,\n      any(!around(i, j) %in% invalids),\n      FALSE\n    )\n  }\n}\n\ngears <- reshape2::melt(mat == \"*\") |>\n  dplyr::filter(value)\n\ninput <- readLines(\"2023/03-input\")\n\nnumber_locs <- input |>\n  stringr::str_locate_all(\"\\\\d+\")\n\npartnumbers <- c()\n\nfor (i in seq_along(input)) {\n  rows <- number_locs[[i]]\n  for (row in seq_len(nrow(rows))) {\n    start <- rows[row, 1]\n    end <- rows[row, 2]\n    if (any(partnumber[i, seq(start, end)])) {\n      partnumbers <- c(partnumbers, stringr::str_sub(input[i], start, end))\n    }\n  }\n}\n\npartnumbers |>\n  as.numeric() |>\n  sum()\n\n\n\n0.075 sec elapsed\n\nPart 2\n\n\nread_matrix <- function(path, sep = \"\", fill = NA, type = identity) {\n  lines <- readLines(path)\n  tokens <- strsplit(lines, sep)\n  token_lengths <- lengths(tokens)\n  res <- matrix(fill, nrow = length(lines), ncol = max(token_lengths))\n\n  for (i in seq_along(lines)) {\n    res[i, seq_len(token_lengths[i])] <- type(tokens[[i]])\n  }\n  res\n}\n\nmat <- read_matrix(\"2023/03-input\")\n\npartnumber <- matrix(FALSE, nrow = nrow(mat), ncol = ncol(mat))\n\nnumbers <- as.character(0:9)\n\ninvalids <- c(numbers, \".\")\n\naround <- function(x, y, x_max = nrow(mat), y_max = ncol(mat), MAT = mat) {\n  xs <- x + c(-1, 0, 1)\n  ys <- y + c(-1, 0, 1)\n\n  xs <- xs[xs > 0]\n  ys <- ys[ys > 0]\n  xs <- xs[xs <= x_max]\n  ys <- ys[ys <= y_max]\n\n\n  MAT[xs, ys]\n}\n\nfor (i in seq_len(nrow(mat))) {\n  for (j in seq_len(ncol(mat))) {\n    partnumber[i, j] <- ifelse(\n      mat[i, j] %in% numbers,\n      any(!around(i, j) %in% invalids),\n      FALSE\n    )\n  }\n}\n\ngears <- reshape2::melt(mat == \"*\") |>\n  dplyr::filter(value)\n\ninput <- readLines(\"2023/03-input\")\n\nnumber_locs <- input |>\n  stringr::str_locate_all(\"\\\\d+\")\n\npartnumber_id <- matrix(nrow = nrow(mat), ncol = ncol(mat))\n\nid <- 0\npart_numbers_id <- c()\nfor (i in seq_along(input)) {\n  rows <- number_locs[[i]]\n  for (row in seq_len(nrow(rows))) {\n    start <- rows[row, 1]\n    end <- rows[row, 2]\n    if (any(partnumber[i, seq(start, end)])) {\n      id <- id + 1\n      partnumber_id[i, seq(start, end)] <- id\n      part_numbers_id <- c(\n        part_numbers_id,\n        paste0(mat[i, seq(start, end)], collapse = \"\")\n      )\n    }\n  }\n}\n\npart_numbers_id <- as.numeric(part_numbers_id)\n\nsums <- 0\nfor (i in seq_len(nrow(gears))) {\n  res <- around(gears[i, ]$Var1, gears[i, ]$Var2, MAT = partnumber_id)\n  neighbors <- unique(res[!is.na(res)])\n  if (length(neighbors) == 2) {\n    sums <- sums + prod(part_numbers_id[neighbors])\n  }\n}\n\nsums\n\n\n\n0.131 sec elapsed\n\nDay 4\nPart 1\n\n\ninput <- readLines(\"2023/04-input\")\n\ninput\n\nwinning <- input |>\n  stringr::str_extract(\"\\\\:.*\\\\|\") |>\n  stringr::str_extract_all(\"\\\\d+\") |>\n  lapply(as.integer)\n\nnumbers <- input |>\n  stringr::str_extract(\"\\\\|.*\") |>\n  stringr::str_extract_all(\"\\\\d+\") |>\n  lapply(as.integer)\n\nscore <- function(x) {\n  if (x == 0) {\n    return(0)\n  }\n\n  2 ^ (x - 1)\n}\n\npurrr::map2_int(winning, numbers, ~ score(sum(.x %in% .y))) |>\n  sum()\n\n\n\n0.007 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2023/04-input\")\n\ninput\n\nwinning <- input |>\n  stringr::str_extract(\"\\\\:.*\\\\|\") |>\n  stringr::str_extract_all(\"\\\\d+\") |>\n  lapply(as.integer)\n\nnumbers <- input |>\n  stringr::str_extract(\"\\\\|.*\") |>\n  stringr::str_extract_all(\"\\\\d+\") |>\n  lapply(as.integer)\n\ncards <- rep(1, length(input))\n\nfor (i in seq_along(cards)) {\n  if (i == 0) next\n  n <- cards[i]\n\n  wins <- sum(winning[[i]] %in% numbers[[i]])\n\n  cards[seq_len(wins) + i] <- cards[seq_len(wins) + i] + n\n}\n\nsum(cards)\n\n\n\n0.007 sec elapsed\n\nDay 5\nPart 1\n\n\ninput <- readLines(\"2023/05-input\")\n\n\n\n0 sec elapsed\n\nPart 2\n\n\n\n\n0 sec elapsed\n\nDay 6\nDay 7\nDay 8\nDay 9\nDay 10\nDay 11\nDay 12\nDay 13\nDay 14\nDay 15\nDay 16\nDay 17\nDay 18\nDay 19\nDay 20\nDay 21\nDay 22\nDay 23\nDay 24\nDay 25\n\n\n\n\n",
      "last_modified": "2024-12-02T22:28:45-08:00"
    },
    {
      "path": "2024.html",
      "title": "My 2024 Solutions",
      "author": [],
      "contents": "\n\n\n\n\n\nDay 1\nPart 1\n\n\ninput <- readr::read_delim(\n  \"2024/01-input\", \n  delim = \"   \", \n  col_names = FALSE,\n  show_col_types = FALSE\n)\n\nsum(abs(sort(input$X1) - sort(input$X2)))\n\n\n\n0.076 sec elapsed\n\nPart 2\n\n\ninput <- readr::read_delim(\n  \"2024/01-input\", \n  delim = \"   \", \n  col_names = FALSE,\n  show_col_types = FALSE\n)\n\ncounts <- table(input$X2)[as.character(input$X1)]\n\nsum(abs(input$X1 * counts), na.rm = TRUE)\n\n\n\n0.005 sec elapsed\n\nDay 2\nPart 1\n\n\nread_list <- function(path, sep = \"\", type = identity) {\n  lines <- readLines(path)\n  res <- strsplit(lines, sep)\n  res <- lapply(res, type)\n  res\n}\n\ninput <- read_list(\"2024/02-input\", \" \", as.integer)\n\nsafe <- function(x) {\n  diffs <- diff(x)\n  cond1 <- all(diffs > 0) || all(diffs < 0)\n  cond2 <- all(abs(diffs) >= 1) && all(abs(diffs) <= 3)\n  cond1 && cond2\n}\n\nvapply(input, safe, logical(1)) |>\n  sum()\n\n\n\n0.033 sec elapsed\n\nPart 2\n\n\nread_list <- function(path, sep = \"\", type = identity) {\n  lines <- readLines(path)\n  res <- strsplit(lines, sep)\n  res <- lapply(res, type)\n  res\n}\n\ninput <- read_list(\"2024/02-input\", \" \", as.integer)\n\nsafe <- function(x) {\n  diffs <- diff(x)\n  cond1 <- all(diffs > 0) || all(diffs < 0)\n  cond2 <- all(abs(diffs) >= 1) && all(abs(diffs) <= 3)\n  cond1 && cond2\n}\n\nskip_safe <- function(x) {\n  is_safe <- FALSE\n  for (i in seq_along(x)) {\n    if (safe(x[-i])) {\n      is_safe <- TRUE\n      break\n    }\n  }\n  is_safe\n}\n\nvapply(input, skip_safe, logical(1)) |>\n  sum()\n\n\n\n0.024 sec elapsed\n\nDay 3\nPart 1\n\n\ninput <- readLines(\"2024/03-input\") |>\n  paste0(collapse = \"\")\n\nmul <- function(x, y) x * y\n\nmy_eval <- function(x) eval(parse(text = x))\n\ninput |>\n  stringr::str_extract_all(\"mul\\\\(\\\\d+,\\\\d+\\\\)\") |>\n  unlist() |>\n  purrr::map_int(my_eval) |>\n  sum()\n\n\n\n0.024 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2024/03-input\") |>\n  paste0(collapse = \"\")\n\nmul <- function(x, y) x * y\n\ninput |>\n  stringr::str_remove_all(\"don't\\\\(\\\\).*?do\\\\(\\\\)\") |>\n  stringr::str_extract_all(\"mul\\\\(\\\\d+,\\\\d+\\\\)\") |>\n  unlist() |>\n  purrr::map_int(\\(x) eval(parse(text = x))) |>\n  sum()\n\n\n\n0.015 sec elapsed\n\nDay 4\nDay 5\nDay 6\nDay 7\nDay 8\nDay 9\nDay 10\nDay 11\nDay 12\nDay 13\nDay 14\nDay 15\nDay 16\nDay 17\nDay 18\nDay 19\nDay 20\nDay 21\nDay 22\nDay 23\nDay 24\nDay 25\n\n\n\n\n",
      "last_modified": "2024-12-02T22:28:46-08:00"
    },
    {
      "path": "index.html",
      "title": "R Advent Of Code",
      "description": "Emil Hvitfeldt's solutions\n",
      "author": [],
      "contents": "\nThis website is created using the emilhvitfeldt/rstats-adventofcode repository. I try to save all my solution in one place here.\nI don’t have any rules I follow. I will end up doing most solutions using base R because of the nature of the problems. I will be using both purrr and stringr when the need comes up, I don’t hate myself. I’m here to write code and have fun doing it.\nCompletion\n\n\n\nDay\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n2022\n2023\n2024\n1\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n2\n**\n**\n**\n**\n\n**\n**\n**\n**\n**\n3\n**\n**\n**\n**\n\n**\n**\n**\n**\n**\n4\n**\n**\n**\n**\n**\n**\n**\n**\n**\n\n5\n**\n**\n**\n**\n\n**\n**\n**\n**\n\n6\n**\n**\n**\n**\n\n**\n**\n**\n\n\n7\n**\n**\n**\n*\n\n**\n**\n**\n\n\n8\n**\n**\n**\n\n\n**\n**\n**\n\n\n9\n**\n**\n\n\n\n**\n**\n\n\n\n10\n**\n**\n\n\n\n**\n**\n*\n\n\n11\n**\n\n\n\n\n**\n**\n\n\n\n12\n**\n**\n\n\n\n**\n**\n\n\n\n13\n**\n**\n\n\n\n**\n**\n\n\n\n14\n**\n**\n\n\n\n*\n**\n\n\n\n15\n**\n**\n\n\n\n*\n\n\n\n\n16\n**\n**\n\n\n\n**\n\n\n\n\n17\n**\n\n\n\n\n**\n\n\n\n\n18\n**\n**\n\n\n\n**\n\n\n\n\n19\n**\n**\n\n\n\n**\n\n\n\n\n20\n**\n**\n\n\n\n**\n\n\n\n\n21\n**\n**\n\n\n\n**\n\n\n\n\n22\n\n*\n\n\n\n**\n\n\n\n\n23\n**\n\n\n\n\n**\n\n\n\n\n24\n**\n\n\n\n\n**\n\n\n\n\n25\n*\n\n\n\n\n*\n\n\n\n\n\n\n\n\n",
      "last_modified": "2024-12-02T22:28:47-08:00"
    }
  ],
  "collections": []
}
