{
  "articles": [
    {
      "path": "2015.html",
      "title": "My 2015 Solutions",
      "author": [],
      "contents": "\n\n\n.panel-tab {\n  flex: 1 0 20%;\n  text-align: center;\n}\n\n\nDay 1\nPart 1\n\n\ninput <- readLines(\"2015/01-input\")\nchars <- strsplit(input, \"\")[[1]]\n\nkey <- c(\"(\" = 1, \")\" = -1)\n\nsum(key[chars])\n\n\n\n\n[1] 74\n0.003 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/01-input\")\nchars <- strsplit(input, \"\")[[1]]\n\nkey <- c(\"(\" = 1, \")\" = -1)\n\nmin(which(cumsum(key[chars]) < 0))\n\n\n\n\n[1] 1795\n0.004 sec elapsed\n\nDay 2\nPart 1\n\n\ninput <- readLines(\"2015/02-input\")\n\nchars <- strsplit(input, \"x\")\n\npackage_surface <- function(x) {\n  x <- as.numeric(x)\n  side <- x[1] * x[2]\n  front <- x[1] * x[3]\n  top <- x[2] * x[3]\n\n  sum(2 * c(side, front, top), min(side, front, top))\n}\n\nsum(vapply(chars, package_surface, numeric(1)))\n\n\n\n\n[1] 1606483\n0.024 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/02-input\")\n\nchars <- strsplit(input, \"x\")\n\nribbon_length <- function(x) {\n  x <- as.numeric(x)\n  short_sides <- sort(x)[1:2]\n  sum(short_sides) * 2 + prod(x)\n}\n\nsum(vapply(chars, ribbon_length, numeric(1)))\n\n\n\n\n[1] 3842356\n0.115 sec elapsed\n\nDay 3\nPart 1\n\n\ninput <- readLines(\"2015/03-input\")\n\nchars <- strsplit(input, \"\")[[1]]\n\nx_key <- c(\"^\" = 0, \"v\" = 0, \">\" = 1, \"<\" = -1)\ny_key <- c(\"^\" = 1, \"v\" = -1, \">\" = 0, \"<\" = 0)\n\npath <- data.frame(\n  x = cumsum(x_key[chars]),\n  y = cumsum(y_key[chars])\n)\n\nnrow(unique(path))\n\n\n\n\n[1] 2565\n0.013 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/03-input\")\n\nchars <- strsplit(input, \"\")[[1]]\n\npath_santa <- data.frame(\n  x = cumsum(x_key[chars][seq_along(chars) %% 2 == 1]),\n  y = cumsum(y_key[chars][seq_along(chars) %% 2 == 1])\n)\n\npath_robosanta <- data.frame(\n  x = cumsum(x_key[chars][seq_along(chars) %% 2 == 0]),\n  y = cumsum(y_key[chars][seq_along(chars) %% 2 == 0])\n)\n\nnrow(unique(rbind(path_santa, path_robosanta)))\n\n\n\n\n[1] 2639\n0.016 sec elapsed\n\nDay 4\nPart 1\n\n\ninput <- \"ckczppom\"\nnumber <- seq_len(1000000)\n\nmd5 <- digest::getVDigest()\n\nhash <- vapply(\n  paste0(input, number),\n  md5,\n  FUN.VALUE = character(1),\n  serialize = FALSE\n)\n\nwhich(substr(hash, 1, 5) == \"00000\")\n\n\n\n\nckczppom117946 \n        117946 \n10.485 sec elapsed\n\nPart 2\n\n\ninput <- \"ckczppom\"\nnumber <- seq(3000000, 4000000)\n\nmd5 <- digest::getVDigest()\n\nhash <- vapply(\n  paste0(input, number),\n  md5,\n  FUN.VALUE = character(1),\n  serialize = FALSE\n)\n\nwhich(substr(hash, 1, 6) == \"000000\")\n\n\n\n\nckczppom3938038 \n         938039 \n11.336 sec elapsed\n\nDay 5\nPart 1\n\n\ninput <- readLines(\"2015/05-input\")\n\ncon1 <- stringr::str_count(input, \"[aeiou]\") >= 3\n\nfind_repeat <- function(x) {\n  any(rle(x)$lengths > 1)\n}\n\ncon2 <- vapply(strsplit(input, \"\"), find_repeat, logical(1))\ncon3 <- !(grepl(\"ab\", input)) &\n  !(grepl(\"cd\", input)) &\n  !(grepl(\"pq\", input)) &\n  !(grepl(\"xy\", input))\n\nsum(con1 & con2 & con3)\n\n\n\n\n[1] 236\n0.023 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/05-input\")\n\npairs <- tokenizers::tokenize_character_shingles(input, n = 2)\n\nx <- pairs[[1]]\n\ncon1_fun <- function(x) {\n  pairs <- names(which(table(x)>1))\n\n  if (length(pairs) == 0) return(FALSE)\n\n  for (i in seq_along(pairs)) {\n    if (any(diff(which(pairs[i] == x)) > 1)) return(TRUE)\n  }\n\n  FALSE\n}\n\ncon1 <- vapply(pairs, con1_fun, FUN.VALUE = logical(1))\n\ntriplets <- tokenizers::tokenize_character_shingles(input, n = 3)\n\ncon2_fun <- function(x) {\n  any(substr(x, 1, 1) == substr(x, 3, 3))\n}\n\ncon2 <- vapply(triplets, con2_fun, FUN.VALUE = logical(1))\n\nsum(con1 & con2)\n\n\n\n\n[1] 50\n0.765 sec elapsed\n\nDay 6\nPart 1\n\n\ninput <- readLines(\"2015/06-input\")\n\nmat <- matrix(FALSE, 1000, 1000)\n\nfor (direction in input) {\n  coord <- stringr::str_extract_all(direction, \"[0-9]+\")[[1]]\n  coord <- as.numeric(coord) + 1\n\n  command <- stringr::str_extract(direction, \"(turn on|toggle|turn off)\")\n\n  x_range <- coord[1]:coord[3]\n  y_range <- coord[2]:coord[4]\n\n  if (command == \"toggle\") {\n    mat[x_range, y_range] <-!mat[x_range, y_range]\n  } else if (command == \"turn on\") {\n    mat[x_range, y_range] <- TRUE\n  } else if (command == \"turn off\") {\n    mat[x_range, y_range] <- FALSE\n  }\n}\n\nsum(mat)\n\n\n\n\n[1] 569999\n0.178 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/06-input\")\n\nmat <- matrix(0, 1000, 1000)\n\nfor (direction in input) {\n  coord <- stringr::str_extract_all(direction, \"[0-9]+\")[[1]]\n  coord <- as.numeric(coord) + 1\n\n  command <- stringr::str_extract(direction, \"(turn on|toggle|turn off)\")\n\n  x_range <- coord[1]:coord[3]\n  y_range <- coord[2]:coord[4]\n\n  if (command == \"toggle\") {\n    mat[x_range, y_range] <- mat[x_range, y_range] + 2\n  } else if (command == \"turn on\") {\n    mat[x_range, y_range] <- mat[x_range, y_range] + 1\n  } else if (command == \"turn off\") {\n    mat[x_range, y_range] <- pmax(mat[x_range, y_range] - 1, 0)\n  }\n}\n\nsum(mat)\n\n\n\n\n[1] 17836115\n0.97 sec elapsed\n\nDay 7\nPart 1\n\n\nlibrary(magrittr)\nlibrary(stringr)\n\ninput <- readLines(\"2015/07-input\")\n\nint_2_16 <- function(x) {\n  as.logical(intToBits(x)[1:16])\n}\n\nint_2_16_rev <- function(x) {\n  sum(2 ^ (0:15) * x)\n}\n\n`%AND%` <- function(x, y) {\n  int_2_16_rev(int_2_16(x) & int_2_16(y))\n}\n\n`%OR%` <- function(x, y) {\n  int_2_16_rev(int_2_16(x) | int_2_16(y))\n}\n\n`%LSHIFT%` <- function(x, y) {\n  int_2_16_rev(c(rep(FALSE, y), int_2_16(x)[seq(1, 16 - y)]))\n}\n\n`%RSHIFT%` <- function(x, y) {\n  int_2_16_rev(c(int_2_16(x)[seq(y + 1, 16)], rep(FALSE, y)))\n}\n\n`%NOT%` <- function(temp, x) {\n  int_2_16_rev(!int_2_16(x))\n}\n\neval_fun <- function(x) {\n  as.character(eval(parse(text = x)))\n}\n\ninstructions <- strsplit(input, \" -> \")\n\nlhs <- purrr::map_chr(instructions, ~.x[1]) %>%\n  str_replace_all(\n    c(\n      \"OR\" = \"%OR%\",\n      \"AND\" = \"%AND%\",\n      \"RSHIFT\" = \"%RSHIFT%\",\n      \"LSHIFT\" = \"%LSHIFT%\",\n      \"NOT\" = \"1 %NOT%\"\n    )\n  ) %>%\n  paste0(\"( \", ., \" )\")\n\nlhs[which(str_detect(lhs, \"^\\\\( [0-9]* \\\\)$\"))] <- str_extract(\n  lhs[which(str_detect(lhs, \"^\\\\( [0-9]* \\\\)$\"))],\n  \"[0-9]+\"\n)\n\nrhs <- purrr::map_chr(instructions, ~.x[2])\n\nrepeat {\n  numbers_ind <- which(str_detect(lhs, \"^[0-9]*$\"))\n\n  if (length(numbers_ind) == length(lhs)) break\n\n  replacement <- str_extract(lhs[numbers_ind], \"[0-9]+\")\n  names(replacement) <- paste0(\" \", rhs[numbers_ind], \" \")\n\n  lhs <- lhs %>%\n    str_replace_all(replacement)\n\n  can_evaluate <- !lhs %>% str_detect(\"[a-z]+\")\n\n  lhs[can_evaluate] <- purrr::map_chr(lhs[can_evaluate], eval_fun)\n}\n\nlhs[rhs == \"a\"]\n\n\n\n\n[1] \"956\"\n5.678 sec elapsed\n\nPart 2\n\n\nlibrary(magrittr)\nlibrary(stringr)\n\ninput <- readLines(\"2015/07-input\")\n\nint_2_16 <- function(x) {\n  as.logical(intToBits(x)[1:16])\n}\n\nint_2_16_rev <- function(x) {\n  sum(2 ^ (0:15) * x)\n}\n\n`%AND%` <- function(x, y) {\n  int_2_16_rev(int_2_16(x) & int_2_16(y))\n}\n\n`%OR%` <- function(x, y) {\n  int_2_16_rev(int_2_16(x) | int_2_16(y))\n}\n\n`%LSHIFT%` <- function(x, y) {\n  int_2_16_rev(c(rep(FALSE, y), int_2_16(x)[seq(1, 16 - y)]))\n}\n\n`%RSHIFT%` <- function(x, y) {\n  int_2_16_rev(c(int_2_16(x)[seq(y + 1, 16)], rep(FALSE, y)))\n}\n\n`%NOT%` <- function(temp, x) {\n  int_2_16_rev(!int_2_16(x))\n}\n\neval_fun <- function(x) {\n  as.character(eval(parse(text = x)))\n}\n\n\ninstructions <- strsplit(input, \" -> \")\n\nlhs <- purrr::map_chr(instructions, ~.x[1]) %>%\n  str_replace_all(\n    c(\n      \"OR\" = \"%OR%\",\n      \"AND\" = \"%AND%\",\n      \"RSHIFT\" = \"%RSHIFT%\",\n      \"LSHIFT\" = \"%LSHIFT%\",\n      \"NOT\" = \"1 %NOT%\"\n    )\n  ) %>%\n  paste0(\"( \", ., \" )\")\n\nlhs[which(str_detect(lhs, \"^\\\\( [0-9]* \\\\)$\"))] <- str_extract(\n  lhs[which(str_detect(lhs, \"^\\\\( [0-9]* \\\\)$\"))],\n  \"[0-9]+\"\n)\n\nrhs <- purrr::map_chr(instructions, ~.x[2])\n\nlhs[rhs == \"b\"] <- \"956\"\n\nrepeat {\n  numbers_ind <- which(str_detect(lhs, \"^[0-9]*$\"))\n\n  if (length(numbers_ind) == length(lhs)) break\n\n  replacement <- str_extract(lhs[numbers_ind], \"[0-9]+\")\n  names(replacement) <- paste0(\" \", rhs[numbers_ind], \" \")\n\n  lhs <- lhs %>%\n    str_replace_all(replacement)\n\n  can_evaluate <- !lhs %>% str_detect(\"[a-z]+\")\n\n  lhs[can_evaluate] <- purrr::map_chr(lhs[can_evaluate], eval_fun)\n}\n\nlhs[rhs == \"a\"]\n\n\n\n\n[1] \"40149\"\n5.447 sec elapsed\n\nDay 8\nPart 1\n\n\ninput <- readLines(\"2015/08-input\")\n\nsum(purrr::map_int(input, nchar)) -\n  sum(purrr::map_int(input, ~nchar(eval(parse(text = .x)), type = \"bytes\")))\n\n\n\n\n[1] 1333\n0.007 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/08-input\")\n\nsum(purrr::map_int(stringi::stri_escape_unicode(input), nchar) + 2) -\n  sum(purrr::map_int(input, nchar))\n\n\n\n\n[1] 2046\n0.004 sec elapsed\n\nDay 9\nPart 1\n\n\ninput <- readLines(\"2015/09-input\")\n\nlibrary(dplyr)\nlibrary(tidyr)\n\ninput_tbl <- tibble(input) %>%\n  separate(input, c(\"destinations\", \"distance\"), \" = \", convert = TRUE) %>%\n  separate(destinations, c(\"to\", \"from\"), \" to \")\n\nall_paths <- input_tbl %>%\n  select(-distance) %>%\n  unlist() %>%\n  unique() %>%\n  combinat::permn()\n\ndistances <- bind_rows(\n  input_tbl,\n  input_tbl %>% rename(from = to, to = from)\n)\n\ncalc_distance <- function(x) {\n  tibble(\n    from = x[-length(x)],\n    to = x[-1]\n  ) %>%\n    left_join(distances, by = c(\"from\", \"to\")) %>%\n    summarise(sum = sum(distance)) %>%\n    pull(sum)\n}\n\npurrr::map_int(all_paths, calc_distance) %>%\n  min()\n\n\n\n\n[1] 207\n185.082 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/09-input\")\n\nlibrary(dplyr)\nlibrary(tidyr)\n\ninput_tbl <- tibble(input) %>%\n  separate(input, c(\"destinations\", \"distance\"), \" = \", convert = TRUE) %>%\n  separate(destinations, c(\"to\", \"from\"), \" to \")\n\nall_paths <- input_tbl %>%\n  select(-distance) %>%\n  unlist() %>%\n  unique() %>%\n  combinat::permn()\n\ndistances <- bind_rows(\n  input_tbl,\n  input_tbl %>% rename(from = to, to = from)\n)\n\ncalc_distance <- function(x) {\n  tibble(\n    from = x[-length(x)],\n    to = x[-1]\n  ) %>%\n    left_join(distances, by = c(\"from\", \"to\")) %>%\n    summarise(sum = sum(distance)) %>%\n    pull(sum)\n}\n\npurrr::map_int(all_paths, calc_distance) %>%\n  max()\n\n\n\n\n[1] 804\n181.645 sec elapsed\n\nDay 10\nPart 1\n\n\ninput <- \"1113122113\"\n\nlook_and_say <- function(x) {\n  x <- strsplit(x, \"\")[[1]]\n  x <- rle(x)\n  x <- unlist(x)\n  x <- matrix(x, nrow = 2, byrow = TRUE)\n  x <- as.numeric(x)\n  paste0(x, collapse = \"\")\n}\n\nfor (i in seq_len(40)) {\n  input <- look_and_say(input)\n}\n\nnchar(input)\n\n\n\n\n[1] 360154\n1.364 sec elapsed\n\nPart 2\n\n\ninput <- \"1113122113\"\n\nlook_and_say <- function(x) {\n  x <- strsplit(x, \"\")[[1]]\n  x <- rle(x)\n  x <- unlist(x)\n  x <- matrix(x, nrow = 2, byrow = TRUE)\n  x <- as.numeric(x)\n  paste0(x, collapse = \"\")\n}\n\nfor (i in seq_len(50)) {\n  input <- look_and_say(input)\n}\nnchar(input)\n\n\n\n\n[1] 5103798\n27.016 sec elapsed\n\nDay 11\nPart 1\n\n\ninput <- \"hxbxwxba\"\n\npass <- match(strsplit(input, \"\")[[1]], letters)\n\nincrement0 <- function(x, i) {\n\n  x[i] <- x[i] + 1\n\n  if (any(x %in% c(9, 15, 12))) {\n\n    which_min <- min(which(x %in% c(9, 15, 12)))\n\n    x[which_min] <- x[which_min] + 1\n    if (which_min < 8) {\n      x[seq(min(which_min + 1, 8), 8)] <- 1\n    }\n  }\n\n  if (x[i] == 27) {\n\n    x[i] <- 1\n    if (i > 1) {\n      x <- increment0(x, i - 1)\n    }\n\n  }\n  x\n}\n\nchecker <- function(x) {\n  rle1 <- rle(diff(x))\n\n  check1 <- any(rle1$lengths[rle1$values == 1] >= 2)\n  check2 <- all(!c(9, 15, 12) %in% x)\n  check3 <- sum(rle(x)$lengths >= 2) >= 2\n\n  check1 & check2 & check3\n}\n\nrepeat {\n  pass <- increment0(pass, 8)\n  if (checker(pass)) break\n}\n\npaste0(letters[pass], collapse = \"\")\n\n\n\n\n[1] \"hxbxxyzz\"\n0.576 sec elapsed\n\nPart 2\n\n\ninput <- \"hxbxxyzz\" # My answer from Part 1\n\npass <- match(strsplit(input, \"\")[[1]], letters)\n\nincrement0 <- function(x, i) {\n\n  x[i] <- x[i] + 1\n\n  if (any(x %in% c(9, 15, 12))) {\n\n    which_min <- min(which(x %in% c(9, 15, 12)))\n\n    x[which_min] <- x[which_min] + 1\n    if (which_min < 8) {\n      x[seq(min(which_min + 1, 8), 8)] <- 1\n    }\n  }\n\n  if (x[i] == 27) {\n\n    x[i] <- 1\n    if (i > 1) {\n      x <- increment0(x, i - 1)\n    }\n\n  }\n  x\n}\n\nchecker <- function(x) {\n  rle1 <- rle(diff(x))\n\n  check1 <- any(rle1$lengths[rle1$values == 1] >= 2)\n  check2 <- all(!c(9, 15, 12) %in% x)\n  check3 <- sum(rle(x)$lengths >= 2) >= 2\n\n  check1 & check2 & check3\n}\n\nruns <- 0\n\nrepeat {\n  pass <- increment0(pass, 8)\n  if (checker(pass)) break\n}\n\npaste0(letters[pass], collapse = \"\")\n\n\n\n\n[1] \"hxcaabcc\"\n25.853 sec elapsed\n\nDay 12\nPart 1\n\n\ninput <- readLines(\"2015/12_input\")\nnumbers <- stringr::str_extract_all(input, pattern = \"-{0,1}[0-9]+\")[[1]]\n\nsum(as.numeric(numbers))\n\n\n\n\n[1] 156366\n0.004 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/12_input\")\n\nlibrary(stringr)\n\ncheck_red <- function(x) {\n  if (length(x) > 1) return(FALSE)\n\n  if (is.list(x)) return(FALSE)\n\n  x == \"red\"\n}\n\nparse_red <- function(input) {\n  repeat {\n    end <- str_locate(input, \"\\\\}\")[1, 1]\n\n    if (all(is.na(end))) break\n\n    starts <- str_locate_all(input, \"\\\\{\")[[1]][, 1]\n    start <- max(starts[starts < end])\n\n    extraction <- str_sub(input, start, end)\n\n    json <- jsonlite::parse_json(extraction)\n\n    if (!any(purrr::map_lgl(json, check_red))) {\n      res <- str_extract_all(extraction, \"-{0,1}[0-9]+\")[[1]]\n      res <- sum(as.numeric(res), na.rm = TRUE)\n    } else {\n      res <- 0\n    }\n\n    str_sub(input, start, end) <- res\n  }\n\n  res <- str_extract_all(input, \"-{0,1}[0-9]+\")[[1]]\n  res <- sum(as.numeric(res), na.rm = TRUE)\n  res\n}\n\nparse_red(input)\n\n\n\n\n[1] 96852\n0.192 sec elapsed\n\nDay 13\nPart 1\n\n\ninput <- readLines(\"2015/13-input\")\n\nlibrary(dplyr)\nlibrary(stringr)\n\nfrom <- str_extract(input, \"\\\\w*\")\nto <- str_extract(input, \"\\\\w*\\\\.$\")\nto <- str_remove(to, \"\\\\.\")\nhappiness <- as.numeric(str_extract(input, \"[0-9]+\"))\nnegative <- str_detect(input, \"lose\")\n\ninput_df <- data.frame(\n  from,\n  to,\n  happiness = happiness * ifelse(negative, -1, 1)\n)\n\nall_perms <- combinat::permn(unique(from), m = length(unique(from)))\n\ntable_happiness <- function(x) {\n  seq_x <- seq_along(x)\n  len_x <- length(x)\n\n  data.frame(\n    from = c(x, x),\n    to = c(x[c(seq_x[-1], 1)], x[c(len_x, seq_x[-len_x])])\n  ) %>%\n    left_join(input_df, by = c(\"from\", \"to\")) %>%\n    summarize(sum = sum(happiness, na.rm = TRUE)) %>%\n    pull(sum)\n}\n\nperm_values <- vapply(all_perms, table_happiness, numeric(1))\nmax(perm_values)\n\n\n\n\n[1] 664\n112.873 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/13-input\")\n\nlibrary(dplyr)\nlibrary(stringr)\n\nfrom <- str_extract(input, \"\\\\w*\")\nto <- str_extract(input, \"\\\\w*\\\\.$\")\nto <- str_remove(to, \"\\\\.\")\nhappiness <- as.numeric(str_extract(input, \"[0-9]+\"))\nnegative <- str_detect(input, \"lose\")\n\ninput_df <- data.frame(\n  from,\n  to,\n  happiness = happiness * ifelse(negative, -1, 1)\n)\n\ntable_happiness <- function(x) {\n  seq_x <- seq_along(x)\n  len_x <- length(x)\n\n  data.frame(\n    from = c(x, x),\n    to = c(x[c(seq_x[-1], 1)], x[c(len_x, seq_x[-len_x])])\n  ) %>%\n    left_join(input_df, by = c(\"from\", \"to\")) %>%\n    summarize(sum = sum(happiness, na.rm = TRUE)) %>%\n    pull(sum)\n}\n\nnew_from <- c(unique(from), \"me\")\nnew_perms <- combinat::permn(unique(new_from), m = length(unique(new_from)))\nperm_values <- vapply(new_perms, table_happiness, numeric(1))\nmax(perm_values)\n\n\n\n\n[1] 640\n968.753 sec elapsed\n\nDay 14\nPart 1\n\n\ninput <- readLines(\"2015/14-input\")\n\nlibrary(stringr)\nlibrary(purrr)\n\nflying_distance <- function(speed, speed_dur, rest_dur, time) {\n  sum(rep(c(rep(speed, speed_dur), rep(0, rest_dur)), length.out = time))\n}\n\nnumbers <- str_extract_all(input, \"[0-9]+\")\nnumbers <- map(numbers, as.numeric)\nnames(numbers) <- str_extract(input, \"\\\\w*\")\n\nditances <- map_dbl(numbers, ~ flying_distance(.x[1], .x[2], .x[3], 2503))\nsort(ditances, decreasing = TRUE)[1]\n\n\n\n\nCupid \n 2696 \n0.019 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/14-input\")\n\nlibrary(stringr)\nlibrary(purrr)\nlibrary(dplyr)\n\nflying_distance_cumsum <- function(speed, speed_dur, rest_dur, time) {\n  cumsum(rep(c(rep(speed, speed_dur), rep(0, rest_dur)), length.out = time))\n}\n\nnumbers <- str_extract_all(input, \"[0-9]+\")\nnumbers <- map(numbers, as.numeric)\nnames(numbers) <- str_extract(input, \"\\\\w*\")\n\nditances <- map2_dfr(\n  numbers,\n  names(numbers),\n  ~ data.frame(\n      location = flying_distance_cumsum(.x[1], .x[2], .x[3], 2503),\n      time = seq_len(2503),\n      reindeer = .y\n    )\n)\n\nditances %>%\n  group_by(time) %>%\n  slice_max(location, n = 1) %>%\n  ungroup() %>%\n  count(reindeer, sort = TRUE)\n\n\n\n\n# A tibble: 7 × 2\n  reindeer     n\n  <chr>    <int>\n1 Rudolph   1084\n2 Cupid      838\n3 Donner     277\n4 Dancer     199\n5 Comet      121\n6 Prancer     24\n7 Vixen       13\n0.39 sec elapsed\n\nDay 15\nPart 1\n\n\nlibrary(dplyr)\n\n# Hand imported input\nvalues <- list(\n  Sprinkles =    c(capacity = 5, durability =-1, flavor = 0, texture = 0, calories = 5),\n  PeanutButter = c(capacity =-1, durability = 3, flavor = 0, texture = 0, calories = 1),\n  Frosting =     c(capacity = 0, durability =-1, flavor = 4, texture = 0, calories = 6),\n  Sugar =        c(capacity =-1, durability = 0, flavor = 0, texture = 2, calories = 8)\n)\n\nfourway_sum <- function(n) {\n  expand.grid(Sprinkles = 0:100,\n              PeanutButter = 0:100,\n              Frosting = 0:100) %>%\n    filter(Sprinkles + PeanutButter + Frosting == n) %>%\n    mutate(Sugar = 100 - n)\n}\n\ncombinations <- purrr::map_dfr(0:100, fourway_sum)\n\nbatter_mizer <- function(Sprinkles, PeanutButter, Frosting, Sugar) {\n  sum <- values[[\"Sprinkles\"]] * Sprinkles +\n         values[[\"PeanutButter\"]] * PeanutButter +\n         values[[\"Frosting\"]] * Frosting +\n         values[[\"Sugar\"]] * Sugar\n\n  sum <- pmax(sum, 0)\n\n  prod(sum[1:4])\n}\n\nres <- purrr::pmap_dbl(combinations, batter_mizer)\nmax(res)\n\n\n\n\n[1] 13882464\n10.841 sec elapsed\n\nPart 2\n\n\nlibrary(dplyr)\n\n# Hand imported input\nvalues <- list(\n  Sprinkles =    c(capacity = 5, durability =-1, flavor = 0, texture = 0, calories = 5),\n  PeanutButter = c(capacity =-1, durability = 3, flavor = 0, texture = 0, calories = 1),\n  Frosting =     c(capacity = 0, durability =-1, flavor = 4, texture = 0, calories = 6),\n  Sugar =        c(capacity =-1, durability = 0, flavor = 0, texture = 2, calories = 8)\n)\n\nbatter_mizer_500_cal <- function(Sprinkles, PeanutButter, Frosting, Sugar) {\n  sum <- values[[\"Sprinkles\"]] * Sprinkles +\n    values[[\"PeanutButter\"]] * PeanutButter +\n    values[[\"Frosting\"]] * Frosting +\n    values[[\"Sugar\"]] * Sugar\n\n  sum <- pmax(sum, 0)\n\n  if (sum[5] != 500) return(0)\n\n  prod(sum[1:4])\n}\n\nres <- purrr::pmap_dbl(combinations, batter_mizer_500_cal)\nmax(res)\n\n\n\n\n[1] 11171160\n3.21 sec elapsed\n\nDay 16\nPart 1\n\n\nlibrary(magrittr)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\n\ninput <- readLines(\"2015/16-input\")\n\nsues <- input %>%\n  str_remove(\"^Sue [0-9]*: \")\n\nthings <- sues %>%\n  str_remove_all(\": [0-9]*\") %>%\n  str_split(\", \") %>%\n  unlist()\n\nvalues <- sues %>%\n  str_extract_all(\"[0-9]+\") %>%\n  unlist() %>%\n  as.numeric()\n\ntibble(sue = rep(seq_len(length(input)), each = 3),\n       things, values) %>%\n  pivot_wider(names_from = things,values_from = values) %>%\n  filter(\n    children == 3 | is.na(children),\n    cats == 7 | is.na(cats),\n    samoyeds == 2 | is.na(samoyeds),\n    pomeranians == 3 | is.na(pomeranians),\n    akitas == 0 | is.na(akitas),\n    vizslas == 0 | is.na(vizslas),\n    goldfish == 5 | is.na(goldfish),\n    trees == 3 | is.na(trees),\n    cars == 2 | is.na(cars),\n    perfumes == 1 | is.na(perfumes)\n  )\n\n\n\n\n# A tibble: 1 × 11\n    sue goldfish trees akitas  cars perfumes vizslas children  cats\n  <int>    <dbl> <dbl>  <dbl> <dbl>    <dbl>   <dbl>    <dbl> <dbl>\n1   103        5    NA     NA     2        1      NA       NA    NA\n# … with 2 more variables: pomeranians <dbl>, samoyeds <dbl>\n0.029 sec elapsed\n\nPart 2\n\n\nlibrary(magrittr)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\n\ninput <- readLines(\"2015/16-input\")\n\nsues <- input %>%\n  str_remove(\"^Sue [0-9]*: \")\n\nthings <- sues %>%\n  str_remove_all(\": [0-9]*\") %>%\n  str_split(\", \") %>%\n  unlist()\n\nvalues <- sues %>%\n  str_extract_all(\"[0-9]+\") %>%\n  unlist() %>%\n  as.numeric()\n\ntibble(sue = rep(seq_len(length(input)), each = 3),\n       things, values) %>%\n  pivot_wider(names_from = things,values_from = values) %>%\n  filter(\n    children == 3 | is.na(children),\n    cats > 7 | is.na(cats),\n    samoyeds == 2 | is.na(samoyeds),\n    pomeranians < 3 | is.na(pomeranians),\n    akitas == 0 | is.na(akitas),\n    vizslas == 0 | is.na(vizslas),\n    goldfish < 5 | is.na(goldfish),\n    trees > 3 | is.na(trees),\n    cars == 2 | is.na(cars),\n    perfumes == 1 | is.na(perfumes)\n  )\n\n\n\n\n# A tibble: 1 × 11\n    sue goldfish trees akitas  cars perfumes vizslas children  cats\n  <int>    <dbl> <dbl>  <dbl> <dbl>    <dbl>   <dbl>    <dbl> <dbl>\n1   405       NA     8     NA     2        1      NA       NA    NA\n# … with 2 more variables: pomeranians <dbl>, samoyeds <dbl>\n0.023 sec elapsed\n\nDay 17\nPart 1\n\n\ninput <- readLines(\"2015/17-input\")\n\ninput <- as.numeric(input)\n\nall_sets <- expand.grid(purrr::map(seq_along(input), ~c(F, T)))\n\nmatrix_vals <- t(t(as.matrix(all_sets)) * input)\n\nsum(rowSums(matrix_vals) == 150)\n\n\n\n\n[1] 654\n1.788 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/17-input\")\n\ninput <- as.numeric(input)\n\nall_sets <- expand.grid(purrr::map(seq_along(input), ~c(F, T)))\n\nmatrix_vals <- t(t(as.matrix(all_sets)) * input)\n\nnum_containers <- rowSums(matrix_vals[rowSums(matrix_vals) == 150, ] > 0)\n\ntable(num_containers)[1]\n\n\n\n\n 4 \n57 \n1.604 sec elapsed\n\nDay 18\nPart 1\n\n\ninput <- readLines(\"2015/18-input\")\n\nlibrary(magrittr)\n\nmat <- strsplit(input, \"\") %>%\n  purrr::map(~.x == \"#\") %>%\n  Reduce(rbind, .)\n\nrownames(mat) <- NULL\n\nmat_update <- matrix(NA, nrow = nrow(mat), ncol = ncol(mat))\n\nmax_row <- nrow(mat)\nmax_col <- ncol(mat)\n\nfor (i in seq_len(100)) {\n  for (row in seq_len(nrow(mat_update))) {\n    for (col in seq_len(ncol(mat_update))) {\n\n      keep <- mat[row, col]\n\n      mat[row, col] <- NA\n\n      neighbors <- sum(na.rm = TRUE,\n                       mat[\n                         seq(max(row - 1, 1), min(row + 1, max_row)),\n                         seq(max(col - 1, 1), min(col + 1, max_col))\n                       ]\n      )\n\n      if (keep) {\n        mat_update[row, col] <- neighbors %in% c(2, 3)\n      } else {\n        mat_update[row, col] <- neighbors == 3\n      }\n\n      mat[row, col] <- keep\n\n    }\n  }\n\n  mat <- mat_update\n}\n\nsum(mat)\n\n\n\n\n[1] 814\n13.285 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2015/18-input\")\nlibrary(magrittr)\n\nmat <- strsplit(input, \"\") %>%\n  purrr::map(~.x == \"#\") %>%\n  Reduce(rbind, .)\n\nrownames(mat) <- NULL\n\nmat_update <- matrix(TRUE, nrow = nrow(mat), ncol = ncol(mat))\n\nmax_row <- nrow(mat)\nmax_col <- ncol(mat)\n\nmat[1, 1] <- TRUE\nmat[1, max_col] <- TRUE\nmat[max_row, 1] <- TRUE\nmat[max_row, max_col] <- TRUE\n\nfor (i in seq_len(100)) {\n  for (row in seq_len(nrow(mat_update))) {\n    for (col in seq_len(ncol(mat_update))) {\n\n      if ((row == 1 & col == 1) |\n          (row == 1 & col == max_col) |\n          (row == max_row & col == 1) |\n          (row == max_row & col == max_col)) next\n\n      keep <- mat[row, col]\n\n      mat[row, col] <- NA\n\n      neighbors <- sum(na.rm = TRUE,\n                       mat[\n                         seq(max(row - 1, 1), min(row + 1, max_row)),\n                         seq(max(col - 1, 1), min(col + 1, max_col))\n                       ]\n      )\n\n      if (keep) {\n        mat_update[row, col] <- neighbors %in% c(2, 3)\n      } else {\n        mat_update[row, col] <- neighbors == 3\n      }\n\n      mat[row, col] <- keep\n\n    }\n  }\n\n  mat <- mat_update\n}\n\nsum(mat)\n\n\n\n\n[1] 924\n15.308 sec elapsed\n\nDay 19\nPart 1\n\n\ninput <- readLines(\"2015/19-input\")\n\nmolecules <- input[length(input)]\n\nkey <- input[-length(input)]\nkey <- key[key != \"\"]\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\n\nkey_tbl <- tibble(key) %>%\n  separate(key, c(\"from\", \"to\"), \" => \")\n\nkeys <- split(key_tbl$to, key_tbl$from)\n\nres <- character()\n\nfor (k in seq_along(keys)) {\n  k <- keys[k]\n\n  locs <- str_locate_all(molecules, names(k))[[1]]\n\n  for (i in seq_len(nrow(locs))) {\n    new_mole <- molecules\n\n    str_sub(new_mole, locs[i, \"start\"], locs[i, \"end\"]) <- k[[1]]\n\n    res <- c(res, new_mole)\n  }\n}\n\nlength(unique(res))\n\n\n\n\n[1] 535\n0.013 sec elapsed\n\nPart 2\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\n\ninput <- readLines(\"2015/19-input\")\n\nmolecules <- input[length(input)]\n\nkey <- input[-length(input)]\nkey <- key[key != \"\"]\n\nkey_tbl <- tibble(key) %>%\n  separate(key, c(\"from\", \"to\"), \" => \")\n\nrev_keys <- split(key_tbl$from, key_tbl$to)\ncount <- 0\n\nrepeat {\n  if (molecules == \"e\") break\n\n  r_key <- sample(rev_keys, 1)\n\n\n  if (str_detect(molecules, names(r_key))) {\n    count <- count + str_count(molecules, names(r_key))\n    molecules <- str_replace_all(molecules, names(r_key), r_key[[1]])\n  }\n\n}\n\ncount\n\n\n\n\n[1] 212\n0.023 sec elapsed\n\nDay 20\nPart 1\n\n\ninput <- 34000000\n\nlibrary(numbers)\n\ni <- 0\n\nrepeat {\n  i <- i + 1\n  if (sum(divisors(i)) * 10 >= input) break\n}\ni\n\n\n\n\n[1] 786240\n218.098 sec elapsed\n\nPart 2\n\n\ninput <- 34000000\n\nlibrary(numbers)\n\nregister <- numeric(input)\n\ni <- 0\n\nrepeat {\n  i <- i + 1\n\n  divs <- divisors(i)\n\n  register[divs] <- register[divs] + 1\n\n  if (sum((register[divs] <= 50) * divs) * 11 >= input) break\n\n}\ni\n\n\n\n\n[1] 831600\n230.441 sec elapsed\n\nDay 21\nPart 1\n\n\nweapon_tbl <- tibble::tribble(\n  ~Cost, ~Damage, ~Armor,\n  8,     4,       0,\n  10,    5,       0,\n  25,    6,       0,\n  40,    7,       0,\n  74,    8,       0\n)\n\narmor_tbl <- tibble::tribble(\n  ~Cost, ~Damage, ~Armor,\n  13,    0,       1,\n  31,    0,       2,\n  53,    0,       3,\n  75,    0,       4,\n  102,   0,       5,\n  0,     0,       0\n)\n\nring_tbl <- tibble::tribble(\n  ~Cost, ~Damage, ~Armor,\n  25,    1,       0,\n  50,    2,       0,\n  100,   3,       0,\n  20,    0,       1,\n  40,    0,       2,\n  80,    0,       3,\n  0,     0,       0\n)\n\nrings <- rbind(as.data.frame(t(combn(7, 2))), c(7, 7))\nnames(rings) <- c(\"ring1\", \"ring2\")\n\noutfits <- tidyr::expand_grid(rings,\n                              weapon = 1:5,\n                              armor = 1:6)\n\nbattle <- function(player_atk, player_armor, player_hp = 100,\n                   boss_hp = 103, boss_atk = 9, boss_armor = 2) {\n  repeat {\n    damage <- max(player_atk - boss_armor, 1)\n    boss_hp <- boss_hp - damage\n\n    if (boss_hp <= 0) return(TRUE)\n\n    damage <- max(boss_atk - player_armor, 1)\n    player_hp <- player_hp - damage\n\n    if (player_hp <= 0) return(FALSE)\n\n  }\n}\n\npre_battle <- function(ring1, ring2, weapon, armor) {\n  outfit <- dplyr::bind_rows(\n    ring_tbl[c(ring1, ring2), ],\n    weapon_tbl[weapon, ],\n    armor_tbl[armor, ]\n  )\n\n  if (battle(sum(outfit$Damage), sum(outfit$Armor))) {\n    return(sum(outfit$Cost))\n  } else {\n    return(NA)\n  }\n}\n\nmin(purrr::pmap_dbl(outfits, pre_battle), na.rm = TRUE)\n\n\n\n\n[1] 121\n0.153 sec elapsed\n\nPart 2\n\n\nweapon_tbl <- tibble::tribble(\n  ~Cost, ~Damage, ~Armor,\n  8,     4,       0,\n  10,    5,       0,\n  25,    6,       0,\n  40,    7,       0,\n  74,    8,       0\n)\n\narmor_tbl <- tibble::tribble(\n  ~Cost, ~Damage, ~Armor,\n  13,    0,       1,\n  31,    0,       2,\n  53,    0,       3,\n  75,    0,       4,\n  102,   0,       5,\n  0,     0,       0\n)\n\nring_tbl <- tibble::tribble(\n  ~Cost, ~Damage, ~Armor,\n  25,    1,       0,\n  50,    2,       0,\n  100,   3,       0,\n  20,    0,       1,\n  40,    0,       2,\n  80,    0,       3,\n  0,     0,       0\n)\n\nrings <- rbind(as.data.frame(t(combn(7, 2))), c(7, 7))\nnames(rings) <- c(\"ring1\", \"ring2\")\n\noutfits <- tidyr::expand_grid(rings,\n                              weapon = 1:5,\n                              armor = 1:6)\n\n\nbattle <- function(player_atk, player_armor, player_hp = 100,\n                   boss_hp = 103, boss_atk = 9, boss_armor = 2) {\n  repeat {\n    damage <- max(player_atk - boss_armor, 1)\n    boss_hp <- boss_hp - damage\n\n    if (boss_hp <= 0) return(TRUE)\n\n    damage <- max(boss_atk - player_armor, 1)\n    player_hp <- player_hp - damage\n\n    if (player_hp <= 0) return(FALSE)\n\n  }\n}\n\npre_battle <- function(ring1, ring2, weapon, armor) {\n  outfit <- dplyr::bind_rows(\n    ring_tbl[c(ring1, ring2), ],\n    weapon_tbl[weapon, ],\n    armor_tbl[armor, ]\n  )\n\n  if (battle(sum(outfit$Damage), sum(outfit$Armor))) {\n    return(NA)\n  } else {\n    return(sum(outfit$Cost))\n  }\n}\n\nmax(purrr::pmap_dbl(outfits, pre_battle), na.rm = TRUE)\n\n\n\n\n[1] 201\n0.16 sec elapsed\n\nDay 22\nDay 23\nPart 1\n\n\nlibrary(stringr)\nlibrary(magrittr)\nlibrary(bit64)\n\ninput <- readLines(\"2015/23-input\")\n\ncomputer <- function(a, b, input) {\n  loc <- 1\n  reg <- list(a = as.integer64(a), b = as.integer64(b))\n  repeat {\n    if (loc > length(input)) break\n    ins <- stringr::str_sub(input[loc], 1, 3)\n\n    if (ins == \"jio\") {\n      parts <- str_remove(input[loc], \".{4}\") %>%\n        str_split(\", \\\\+{0,1}\") %>%\n        .[[1]]\n\n      if (reg[[parts[1]]] == 1) {\n        loc <- loc + as.numeric(parts[2])\n      } else {\n        loc <- loc + 1\n      }\n\n    } else if (ins == \"inc\") {\n      regis_id <- str_remove(input[loc], \".{4}\")\n      reg[[regis_id]] <-reg[[regis_id]] + 1\n      loc <- loc + 1\n    } else if (ins == \"tpl\") {\n\n      regis_id <- str_remove(input[loc], \".{4}\")\n      reg[[regis_id]] <- reg[[regis_id]] * 3\n      loc <- loc + 1\n    } else if (ins == \"jmp\") {\n      offset <- str_remove(input[loc], \"jmp \\\\+{0,1}\")\n      loc <- loc + as.numeric(offset)\n    } else if (ins == \"jie\") {\n      parts <- str_remove(input[loc], \".{4}\") %>%\n        str_split(\", \\\\+{0,1}\") %>%\n        .[[1]]\n\n      if((reg[[parts[1]]] %% 2) == 0) {\n        loc <- loc + as.numeric(parts[2])\n      } else {\n        loc <- loc + 1\n      }\n    } else if (ins == \"hlf\") {\n      regis_id <- str_remove(input[loc], \".{4}\")\n      reg[[regis_id]] <- reg[[regis_id]] / 2\n      loc <- loc + 1\n    }\n  }\n\n  reg$b\n}\n\ncomputer(0, 0, input)\n\n\n\n\ninteger64\n[1] 255\n0.24 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\nlibrary(magrittr)\nlibrary(bit64)\n\ninput <- readLines(\"2015/23-input\")\n\ncomputer <- function(a, b, input) {\n  loc <- 1\n  reg <- list(a = as.integer64(a), b = as.integer64(b))\n  repeat {\n    if (loc > length(input)) break\n    ins <- stringr::str_sub(input[loc], 1, 3)\n\n    if (ins == \"jio\") {\n      parts <- str_remove(input[loc], \".{4}\") %>%\n        str_split(\", \\\\+{0,1}\") %>%\n        .[[1]]\n\n      if (reg[[parts[1]]] == 1) {\n        loc <- loc + as.numeric(parts[2])\n      } else {\n        loc <- loc + 1\n      }\n\n    } else if (ins == \"inc\") {\n      regis_id <- str_remove(input[loc], \".{4}\")\n      reg[[regis_id]] <-reg[[regis_id]] + 1\n      loc <- loc + 1\n    } else if (ins == \"tpl\") {\n\n      regis_id <- str_remove(input[loc], \".{4}\")\n      reg[[regis_id]] <- reg[[regis_id]] * 3\n      loc <- loc + 1\n    } else if (ins == \"jmp\") {\n      offset <- str_remove(input[loc], \"jmp \\\\+{0,1}\")\n      loc <- loc + as.numeric(offset)\n    } else if (ins == \"jie\") {\n      parts <- str_remove(input[loc], \".{4}\") %>%\n        str_split(\", \\\\+{0,1}\") %>%\n        .[[1]]\n\n      if((reg[[parts[1]]] %% 2) == 0) {\n        loc <- loc + as.numeric(parts[2])\n      } else {\n        loc <- loc + 1\n      }\n    } else if (ins == \"hlf\") {\n      regis_id <- str_remove(input[loc], \".{4}\")\n      reg[[regis_id]] <- reg[[regis_id]] / 2\n      loc <- loc + 1\n    }\n  }\n\n  reg$b\n}\n\ncomputer(1, 0, input)\n\n\n\n\ninteger64\n[1] 334\n0.296 sec elapsed\n\nDay 24\nPart 1\n\n\ninput <- as.numeric(readLines(\"2015/24-input\"))\n\ntotal <- sum(input) / 3\n\nsplit_vec <- function(input, total) {\n  res <- list()\n  for (i in seq_along(input)) {\n    combs <- combn(input, i)\n    colsum_combs <- colSums(combs)\n    if (any(colsum_combs == total)) {\n      res <- c(res, list(combs[, which(colsum_combs == total)]))\n      break\n    }\n  }\n  res\n}\n\nfirst_group <- split_vec(input, total)\n\nsplit_vec(setdiff(input, first_group[[1]][, 1]), total)\n\norder(apply(first_group[[1]], 2, prod))\n\nprod(first_group[[1]][, 1])\n\n\n\n\n[1] 10439961859\n1.104 sec elapsed\n\nPart 2\n\n\ninput <- as.numeric(readLines(\"2015/24-input\"))\n\ntotal <- sum(input) / 4\n\nsplit_vec <- function(input, total) {\n  res <- list()\n  for (i in seq_along(input)) {\n    combs <- combn(input, i)\n    colsum_combs <- colSums(combs)\n    if (any(colsum_combs == total)) {\n      res <- c(res, list(combs[, which(colsum_combs == total)]))\n      break\n    }\n  }\n  res\n}\n\nfirst_group <- split_vec(input, total)\n\nsplit_vec(setdiff(input, first_group[[1]][, 1]), total)\n\norder(apply(first_group[[1]], 2, prod))\n\nprod(first_group[[1]][, 1])\n\n\n\n\n[1] 72050269\n0.108 sec elapsed\n\nDay 25\nPart 1\n\n\nvalue <- 20151125\n\nx <- 1\ny <- 1\n\nrepeat {\n  if (y == 1) {\n    y <- x + 1\n    x <- 1\n  } else {\n    y <- y - 1\n    x <- x + 1\n  }\n  value <- (value * 252533) %% 33554393\n  if (x == 3075 & y == 2981) break\n}\n\nvalue\n\n\n\n\n[1] 9132360\n7.474 sec elapsed\n\n\n\n\n\n",
      "last_modified": "2021-11-25T12:36:19-08:00"
    },
    {
      "path": "2020.html",
      "title": "My 2020 Solutions",
      "author": [],
      "contents": "\n\n\n.panel-tab {\n  flex: 1 0 20%;\n  text-align: center;\n}\n\n\nDay 1\nPart 1\n\n\ninput <- as.numeric(readLines(\"2020/01-input\"))\n\nsum2 <- function(input, target) {\n  for (i in input) {\n    for (j in input) {\n      if (i + j == target) {\n        return(i * j)\n      }\n    }\n  }\n}\n\nsum2(input, 2020)\n\n\n\n\n[1] 691771\n0.01 sec elapsed\n\nPart 2\n\n\ninput <- as.numeric(readLines(\"2020/01-input\"))\n\nsum3 <- function(input, target) {\n  for (i in input) {\n    for (j in input) {\n      for (l in input) {\n        if (i + j + l == target) {\n          return(i * j * l)\n        }\n      }\n    }\n  }\n}\n\nsum3(input, 2020)\n\n\n\n\n[1] 232508760\n0.043 sec elapsed\n\nDay 2\nPart 1\n\n\nlibrary(purrr)\nlibrary(stringr)\n\ninput <- readLines(\"2020/02-input\")\n\npassword_check <- function(x) {\n  numbers <- as.numeric(str_extract_all(x, \"[0-9]+\")[[1]])\n  chars <- str_extract_all(x, \"[a-z]+\")[[1]]\n\n  count <- str_count(chars[2], chars[1])\n  (numbers[1] <= count) & (numbers[2] >= count)\n}\n\nsum(map_lgl(input, password_check))\n\n\n\n\n[1] 439\n0.078 sec elapsed\n\nPart 2\n\n\nlibrary(purrr)\nlibrary(stringr)\n\ninput <- readLines(\"2020/02-input\")\n\npassword_check_2 <- function(x) {\n  numbers <- as.numeric(str_extract_all(x, \"[0-9]+\")[[1]])\n  chars <- str_extract_all(x, \"[a-z]+\")[[1]]\n\n  loc1 <- str_sub(chars[2], numbers[1], numbers[1])\n  loc2 <- str_sub(chars[2], numbers[2], numbers[2])\n\n  sum(loc1 == chars[1], loc2 == chars[1]) == 1\n\n}\n\nsum(map_lgl(input, password_check_2))\n\n\n\n\n[1] 584\n0.063 sec elapsed\n\nDay 3\nPart 1\n\n\nlibrary(purrr)\n\ninput <- readLines(\"2020/03-input\")\n\n# turn input into logical matrix\nmat <- strsplit(input, \"\") %>%\n  map(~.x == \"#\") %>%\n  reduce(rbind)\n\ntraverse <- function(mat, right, down) {\n  x <- y <- 1\n\n  height <- nrow(mat)\n  width <- ncol(mat)\n\n  # Check tree collision\n  trees <- 0\n  repeat {\n    y <- y + down\n    x <- (x + right) %% width\n    x <- ifelse(x == 0, width, x)\n    trees <- trees + mat[y, x]\n    if (y >= height) break\n  }\n  trees\n}\n\ntraverse(mat, 3, 1)\n\n\n\n\nelt \n214 \n0.017 sec elapsed\n\nPart 2\n\n\nlibrary(purrr)\n\ninput <- readLines(\"2020/03-input\")\n\n# turn input into logical matrix\nmat <- strsplit(input, \"\") %>%\n  map(~.x == \"#\") %>%\n  reduce(rbind)\n\ntraverse <- function(mat, right, down) {\n  x <- y <- 1\n\n  height <- nrow(mat)\n  width <- ncol(mat)\n\n  # Check tree collision\n  trees <- 0\n  repeat {\n    y <- y + down\n    x <- (x + right) %% width\n    x <- ifelse(x == 0, width, x)\n    trees <- trees + mat[y, x]\n    if (y >= height) break\n  }\n  trees\n}\n\nprod(\n  traverse(mat, 1, 1),\n  traverse(mat, 3, 1),\n  traverse(mat, 5, 1),\n  traverse(mat, 7, 1),\n  traverse(mat, 1, 2)\n)\n\n\n\n\n[1] 8336352024\n0.016 sec elapsed\n\nDay 4\nPart 1\n\n\nlibrary(purrr)\nlibrary(stringr)\nlibrary(magrittr)\n\ninput <- readLines(\"2020/04-input\")\n\npassports <- str_split(paste(input, collapse = \"\\n\"), \"\\n\\n\")[[1]]\n\nmatches <- c(\"byr\", \"iyr\", \"eyr\", \"hgt\", \"hcl\", \"ecl\", \"pid\")\n\nvalid <- str_extract_all(passports, paste0(matches, collapse = \"|\")) %>%\n  map_lgl(~all(matches %in% .x))\n\nsum(valid)\n\n\n\n\n[1] 182\n0.013 sec elapsed\n\nPart 2\n\n\nlibrary(purrr)\nlibrary(stringr)\nlibrary(magrittr)\n\ninput <- readLines(\"2020/04-input\")\n\npassports <- str_split(paste(input, collapse = \"\\n\"), \"\\n\\n\")[[1]]\n\nmatches <- c(\"byr\", \"iyr\", \"eyr\", \"hgt\", \"hcl\", \"ecl\", \"pid\")\n\nvalid <- str_extract_all(passports, paste0(matches, collapse = \"|\")) %>%\n  map_lgl(~all(matches %in% .x))\n\ncreate_list <- function(x) {\n  x <- str_split(x, \"[ \\n]\")[[1]]\n  x_split <- str_split(x, \":\")\n\n  setNames(map(x_split, 2), map(x_split, 1))\n}\n\npassword_df <- passports[valid] %>%\n  map_dfr(create_list)\n\nint <- as.integer\n\ncheck_byr <- function(x) int(x) >= 1920 & int(x) <= 2002\n\ncheck_iyr <- function(x) int(x) >= 2010 & int(x) <= 2020\n\ncheck_eyr <- function(x) int(x) >= 2020 & int(x) <= 2030\n\ncheck_hgt <- function(x) {\n  value <- as.numeric(str_extract(x, \"[0-9]+\"))\n  unit <- str_remove(x, \"[0-9]+\")\n\n  if_else(\n    unit %in% c(\"in\", \"cm\"),\n    if_else(\n      unit == \"in\",\n      value >= 59 & value <= 76,\n      value >= 150 & value <= 193\n    ),\n    FALSE\n  )\n}\n\ncheck_hcl <- function(x) {\n  str_detect(x, \"#[0-9a-f]{6}\")\n}\n\ncheck_ecl <- function(x) {\n  x %in% c(\"amb\", \"blu\", \"brn\", \"gry\", \"grn\", \"hzl\", \"oth\")\n}\n\ncheck_pid <- function(x) {\n  str_detect(x, \"^[0-9]{9}$\")\n}\n\nlibrary(dplyr)\n\npassword_df %>%\n  filter(\n    check_hgt(hgt),\n    check_byr(byr),\n    check_hcl(hcl),\n    check_ecl(ecl),\n    check_pid(pid),\n    check_iyr(iyr),\n    check_eyr(eyr)\n  ) %>%\n  nrow()\n\n\n\n\n[1] 109\n0.093 sec elapsed\n\nDay 5\nPart 1\n\n\ninput <- readLines(\"2020/05-input\")\n\ninput <- gsub(c(\"[FL]\"), c(\"0\"), input)\ninput <- gsub(c(\"[BR]\"), c(\"1\"), input)\n\nid <- strtoi(input, base = 2)\n\nmax(id)\n\n\n\n\n[1] 888\n0.006 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2020/05-input\")\n\ninput <- gsub(c(\"[FL]\"), c(\"0\"), input)\ninput <- gsub(c(\"[BR]\"), c(\"1\"), input)\n\nid <- strtoi(input, base = 2)\n\nsetdiff(seq(min(id), max(id)), id)\n\n\n\n\n[1] 522\n0.007 sec elapsed\n\nDay 6\nPart 1\n\n\nlibrary(tidyverse)\nlibrary(tidytext)\n\nanswers <- read_file(\"2020/06-input\") %>%\n  tibble(input = .) %>%\n  unnest_paragraphs(text, input) %>%\n  rowid_to_column(\"group_id\") %>%\n  unnest_tokens(text, text) %>%\n  rowid_to_column(\"person_id\") %>%\n  unnest_characters(text, text)\n\nanswers %>%\n  count(group_id, text) %>%\n  nrow()\n\n\n\n\n[1] 6542\n1.752 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\nlibrary(tidytext)\n\nanswers <- read_file(\"2020/06-input\") %>%\n  tibble(input = .) %>%\n  unnest_paragraphs(text, input) %>%\n  rowid_to_column(\"group_id\") %>%\n  unnest_tokens(text, text) %>%\n  rowid_to_column(\"person_id\") %>%\n  unnest_characters(text, text)\n\nanswers %>%\n  group_by(group_id) %>%\n  mutate(group_size = n_distinct(person_id)) %>%\n  count(group_size, text) %>%\n  filter(group_size == n) %>%\n  nrow()\n\n\n\n\n[1] 3299\n0.103 sec elapsed\n\nDay 7\nPart 1\n\n\nlibrary(stringr)\ninput <- readLines(\"2020/07-input\")\n\ncontaining_bag <- function(x) {\n  str_extract(str_subset(input, paste0(\".+\", x)), \"^.+?bag\")\n}\n\nused_bags <- c()\n\nnew_bags <- \"shiny gold bag\"\n\nrepeat {\n  newer_bags <- unique(unlist(lapply(new_bags, containing_bag)))\n\n  if (length(newer_bags) == 0) {\n    used_bags <- c(used_bags, new_bags)\n    break\n  }\n\n  used_bags <- c(used_bags, new_bags)\n\n  new_bags <- setdiff(newer_bags, used_bags)\n}\n\nlength(setdiff(used_bags, \"shiny gold bag\"))\n\n\n\n\n[1] 238\n5.546 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\ninput <- readLines(\"2020/07-input\")\n\nbags <- str_extract_all(input, \"(?<=[0-9] ).*?bag\")\nnumber <- str_extract_all(input, \"[0-9]+\")\nnumber <- lapply(number, as.integer)\nnames(number) <- names(bags) <- str_extract(input, \"^.+?bag\")\n\nfind_size <- function(x, n) {\n  contains <- bags[[x]]\n  if (length(contains) == 0) return(n)\n  n_bags <- map2_int(contains, number[[x]], find_size)\n  sum(c(n_bags, 1L) * n)\n}\n\nfind_size(x = \"shiny gold bag\", n = 1) - 1\n\n\n\n\n[1] 82930\n0.016 sec elapsed\n\nDay 8\nPart 1\n\n\ninput <- readLines(\"2020/08-input\")\n\nrun <- function(input, part2 = FALSE) {\n  len <- length(input)\n  n_times <- integer(len)\n\n  accumulator <- 0\n\n  i <- 1\n\n  repeat {\n    x <- strsplit(input[i], \" \")[[1]]\n\n    n_times[i] <- n_times[i] + 1\n\n    if (i > len) {\n      return(accumulator)\n    }\n    if (n_times[i] == 2) {\n      if (part2) {\n        return(NA)\n      } else {\n        return(accumulator)\n      }\n    }\n\n    if (x[1] == \"nop\") {\n      i <- i + 1\n    } else if (x[1] == \"acc\") {\n      accumulator <- accumulator + readr::parse_number(x[2])\n      i <- i + 1\n    } else if (x[1] == \"jmp\") {\n      i <- i + readr::parse_number(x[2])\n    }\n  }\n}\n\nrun(input)\n\n\n\n\n[1] 1654\n0.224 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\n\ninput <- readLines(\"2020/08-input\")\n\nrun <- function(input, part2 = FALSE) {\n  len <- length(input)\n  n_times <- integer(len)\n\n  accumulator <- 0\n\n  i <- 1\n\n  repeat {\n    x <- strsplit(input[i], \" \")[[1]]\n\n    n_times[i] <- n_times[i] + 1\n\n    if (i > len) {\n      return(accumulator)\n    }\n    if (n_times[i] == 2) {\n      if (part2) {\n        return(NA)\n      } else {\n        return(accumulator)\n      }\n    }\n\n    if (x[1] == \"nop\") {\n      i <- i + 1\n    } else if (x[1] == \"acc\") {\n      accumulator <- accumulator + readr::parse_number(x[2])\n      i <- i + 1\n    } else if (x[1] == \"jmp\") {\n      i <- i + readr::parse_number(x[2])\n    }\n  }\n}\n\nfor (i in seq_along(input)) {\n  input0 <- input\n  if (str_detect(input0[i], \"acc\")) next\n\n  if (str_detect(input0[i], \"nop\")) {\n    input0[i] <- str_replace(input0[i], \"nop\", \"jmp\")\n  } else {\n    input0[i] <- str_replace(input0[i], \"jmp\", \"nop\")\n  }\n\n  res <- run(input0, part2 = TRUE)\n  if(!is.na(res)) break\n}\nres\n\n\n\n\n[1] 833\n17.011 sec elapsed\n\nDay 9\nPart 1\n\n\ninput <- as.numeric(readLines(\"2020/09-input\"))\n\ni <- 1\n\nrepeat {\n  sums <- colSums(combn(input[seq(i, i + 24)], 2))\n  if(!any(input[i + 25] == sums)) break\n  i <- i + 1\n}\n\ninput[i + 25]\n\n\n\n\n[1] 1930745883\n0.162 sec elapsed\n\nPart 2\n\n\ninput <- as.numeric(readLines(\"2020/09-input\"))\n\ni <- 1\n\nrepeat {\n  sums <- colSums(combn(input[seq(i, i + 24)], 2))\n  if(!any(input[i + 25] == sums)) break\n  i <- i + 1\n}\n\ntarget <- input[i + 25]\n\ni <- 1\nstep <- 1\n\nrepeat {\n  res <- sum(input[seq(i, i + step)])\n\n  if (res == target) break\n\n  if (res > target) {\n    i <- i + 1\n    step <- 1\n    next\n  }\n  step <- step + 1\n}\n\nsum(range(input[seq(i, i + step)]))\n\n\n\n\n[1] 268878261\n1.353 sec elapsed\n\nDay 10\nPart 1\n\n\ninput <- as.integer(readLines(\"2020/10-input\"))\n\nres <- table(diff(sort(input)))\n\nprod(res + 1)\n\n\n\n\n[1] 1984\n0.002 sec elapsed\n\nPart 2\n\n\ninput <- sort(as.integer(readLines(\"2020/10-input\")))\n\nruns <- rle(c(diff(c(0, input))))\nweights <- c(1, 2, 4, 7)\n\noptions(scipen = 999)\nprod(weights[runs$lengths[runs$values == 1]])\n\n\n\n\n[1] 3543369523456\n0.002 sec elapsed\n\nDay 11\nPart 1\n\n\ninput <- readLines(\"2020/11-input\")\n\n# turn input into logical matrix\nmat <- strsplit(input, \"\") %>%\n  reduce(rbind)\n\nreplace <- mat\n\nrepeat {\n  for (i in seq_len(nrow(mat))) {\n    for (j in seq_len(ncol(mat))) {\n      if (mat[i, j] == \".\") next\n\n      temp_mat <- mat\n      temp_mat[i, j] <- \"\"\n\n      conv <- temp_mat[seq(max(i-1, 1), min(i+1, nrow(mat))),\n                       seq(max(j-1, 1), min(j+1, ncol(mat)))]\n\n      if (mat[i, j] == \"L\") {\n        if (all(conv != \"#\")) {\n          replace[i, j] <- \"#\"\n        }\n      }\n\n      if (mat[i, j] == \"#\") {\n        if (sum(conv == \"#\") >= 4) {\n          replace[i, j] <- \"L\"\n        }\n      }\n    }\n  }\n\n  if (identical(mat, replace)) break\n  mat <- replace\n}\n\nsum(mat == \"#\")\n\n\n\n\n[1] 2113\n35.157 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2020/11-input\")\n\n# turn input into logical matrix\nmat <- strsplit(input, \"\") %>%\n  reduce(rbind)\n\nfind_neighbor <- function(mat, i, j, x, y) {\n  res <- \".\"\n  i <- i + y\n  j <- j + x\n  while (i > 0 & j > 0 & j <= ncol(mat) & i <= nrow(mat)) {\n    value <- mat[i,j]\n    if (value != \".\") {\n      res <- value\n      break\n    }\n    i <- i + y\n    j <- j + x\n  }\n  res\n}\n\nfind_all_neighbors <- function(mat, i, j) {\n\n  up <-   find_neighbor(mat, i, j, 0, -1)\n  down <- find_neighbor(mat, i, j, 0, 1)\n  right <- find_neighbor(mat, i, j, -1, 0)\n  left <-  find_neighbor(mat, i, j, 1, 0)\n\n  upright <- find_neighbor(mat, i, j, 1, -1)\n  upleft <- find_neighbor(mat, i, j, -1, -1)\n  downright <- find_neighbor(mat, i, j, 1, 1)\n  downleft <- find_neighbor(mat, i, j, -1, 1)\n\n  c(up, down, right, left, upright, upleft, downright, downleft)\n}\n\nreplace <- mat\n\nrepeat {\n  for (i in seq_len(nrow(mat))) {\n    for (j in seq_len(ncol(mat))) {\n      if (mat[i, j] == \".\") next\n\n      conv <- find_all_neighbors(mat, i, j)\n\n      if (mat[i, j] == \"L\") {\n        if (all(conv != \"#\")) {\n          replace[i, j] <- \"#\"\n        }\n      }\n\n      if (mat[i, j] == \"#\") {\n        if (sum(conv == \"#\") >= 5) {\n          replace[i, j] <- \"L\"\n        }\n      }\n    }\n  }\n\n  if (identical(mat, replace)) break\n\n  mat <- replace\n}\n\nsum(mat == \"#\")\n\n\n\n\n[1] 1865\n18.343 sec elapsed\n\nDay 12\nPart 1\n\n\ninput <- readLines(\"2020/12-input\")\n\nship <- c(0, 0)\ndirection <- c(1, 0)\n\nrotate <- function(x, phi) {\n  c(x[1] * cos(phi * pi / 180) - x[2] * sin(phi * pi / 180),\n    x[1] * sin(phi * pi / 180) + x[2] * cos(phi * pi / 180))\n}\n\nfor (i in input) {\n  value <- as.numeric(str_extract(i, \"[0-9]+\"))\n  switch(\n    substr(i, 1, 1),\n    N = {ship[2] <- ship[2] + value},\n    S = {ship[2] <- ship[2] - value},\n    E = {ship[1] <- ship[1] + value},\n    W = {ship[1] <- ship[1] - value},\n    L = {direction <- rotate(direction, value)},\n    R = { direction <- rotate(direction, -value)},\n    F = {ship <- ship + direction * value}\n  )\n}\n\nsum(abs(ship))\n\n\n\n\n[1] 1496\n0.033 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2020/12-input\")\n\nship <- c(0, 0)\n\nwaypoint <- c(10, 1)\n\nrotate <- function(x, phi) {\n  c(x[1] * cos(phi * pi / 180) - x[2] * sin(phi * pi / 180),\n    x[1] * sin(phi * pi / 180) + x[2] * cos(phi * pi / 180))\n}\n\nfor (i in input) {\n  value <- as.numeric(str_extract(i, \"[0-9]+\"))\n\n  switch(\n    substr(i, 1, 1),\n    N = {waypoint[2] <- waypoint[2] + value},\n    S = {waypoint[2] <- waypoint[2] - value},\n    E = {waypoint[1] <- waypoint[1] + value},\n    W = {waypoint[1] <- waypoint[1] - value},\n    L = {waypoint <- rotate(waypoint, value)},\n    R = {waypoint <- rotate(waypoint, -value)},\n    F = {ship <- ship + waypoint * value}\n  )\n}\n\nsum(abs(ship))\n\n\n\n\n[1] 63843\n0.024 sec elapsed\n\nDay 13\nPart 1\n\n\ninput <- readLines(\"2020/13-input\")\n\ntarget <- as.integer(input[1])\nids <- as.integer(str_extract_all(input[2], \"[0-9]+\")[[1]])\n\ntime_past <- ceiling(target / ids) * ids\nwhich_min <- min(time_past) == time_past\n\n(time_past[which_min] - target) * ids[which_min]\n\n\n\n\n[1] 2845\n0.002 sec elapsed\n\nPart 2\n\n\ninput <- readLines(\"2020/13-input\")\n\nids <- as.numeric(str_split(input[2], \",\")[[1]])\noffset <- seq_along(ids) - 1\noffset <- offset[!is.na(ids)]\nids <- ids[!is.na(ids)]\n\ntimestamp <- 1\nstep <- 1\n\nfor (i in seq_along(ids)) {\n  repeat {\n    if ((timestamp + offset[i]) %% ids[i] == 0) break\n    timestamp <- timestamp + step\n  }\n\n  step <- prod(ids[seq_len(i)])\n}\n\noptions(scipen = 999)\ntimestamp\n\n\n\n\n[1] 487905974205117\n0.007 sec elapsed\n\nDay 14\nPart 1\n\n\nlibrary(stringr)\n\ninput <- readLines(\"2020/14-input\")\n\nintTo36 <- function(x) {\n  as.character(c(rep(0, 4), rev(as.integer(intToBits(x)))))\n}\n\n`[<-.memory` <- function(x, i, value) {\n  res <- intTo36(value)\n  res[mask != \"X\"] <- mask[mask != \"X\"]\n  x[[i]] <- res\n  x\n}\n\nmem <- list()\nattr(mem, \"class\") <- \"memory\"\n\nfor (line in input) {\n  if (grepl(\"^mask\", line)) {\n    mask <- strsplit(str_extract(line, \"[X0-9]+\"), \"\")[[1]]\n    next\n  }\n  eval(parse(text = line))\n}\n\noptions(scipen = 999)\nsum(map_dbl(mem, ~ sum(as.numeric(.x) * (2 ^ seq(35, 0)))))\n\n\n\n\n[1] 15514035145260\n0.831 sec elapsed\n\nPart 2\nDay 15\nPart 1\n\n\ninput <- c(16,1,0,18,12,14,19)\n\nres <- rep(-1, 2020)\nres[seq_along(input)] <- input\nfor (i in 8:2020) {\n  if (sum(res == res[i- 1]) == 1) {\n    res[i] <- 0\n  } else {\n    last_calls <- which(res == res[i- 1])\n    res[i] <- last_calls[length(last_calls)] - last_calls[length(last_calls) - 1]\n  }\n}\nrev(res)[1]\n\n\n\n\n[1] 929\n0.056 sec elapsed\n\nPart 2\nDay 16\nPart 1\n\n\nlibrary(tidyverse)\ninput <- readLines(\"2020/16-input\")\nbreaks <- which(input == \"\")\n\nvalid_values <- input[seq(1, min(breaks) - 1)] %>%\n  str_extract_all(\"[0-9]+\") %>%\n  map(as.numeric) %>%\n  map(~ c(seq(.x[1], .x[2]), seq(.x[3], .x[4])))\n\ntickets <- read.csv(\"2020/16-input\", header = FALSE,\n                    skip = which(input == \"nearby tickets:\"))\n\nall_valid_values <- unlist(valid_values)\n\ncheck_value <- function(x, ref) {\n  map_dbl(x, ~ ifelse(.x %in% ref, NA, .x))\n}\n\nwrong <- apply(tickets, 2, check_value, all_valid_values)\n\nsum(wrong, na.rm = TRUE)\n\n\n\n\n[1] 20060\n0.359 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\ninput <- readLines(\"2020/16-input\")\nbreaks <- which(input == \"\")\n\nvalid_values <- input[seq(1, min(breaks) - 1)] %>%\n  str_extract_all(\"[0-9]+\") %>%\n  map(as.numeric) %>%\n  map(~ c(seq(.x[1], .x[2]), seq(.x[3], .x[4])))\n\ntickets <- read.csv(\"2020/16-input\", header = FALSE,\n                    skip = which(input == \"nearby tickets:\"))\n\nall_valid_values <- unlist(valid_values)\n\ncheck_value <- function(x, ref) {\n  map_dbl(x, ~ ifelse(.x %in% ref, NA, .x))\n}\n\nwrong <- apply(tickets, 2, check_value, all_valid_values)\n\nvalid_ticket <- tickets[rowSums(!is.na(wrong)) == 0, ]\n\ncan_be <- function(x) {\n  which(map_lgl(valid_values, ~all(x %in% .x)))\n}\n\npos <- numeric(length(valid_values))\n\ncandidates <- map(valid_ticket, can_be)\n\nrepeat {\n  variable_ind <- which(lengths(candidates) == 1)\n  if(length(variable_ind) == 0) break\n\n  ref_ind <- candidates[[variable_ind]]\n\n  pos[variable_ind] <- ref_ind\n\n  candidates <- map(candidates, setdiff, ref_ind)\n}\n\nmy_ticket <- as.numeric(str_split(input[min(breaks) + 2], \",\")[[1]])\n\nfields <- input[seq(1, min(breaks) - 1)] %>%\n  str_detect(\"^departure\")\n\noptions(scipen = 999)\nprod(my_ticket[fields[pos]])\n\n\n\n\n[1] 2843534243843\n0.249 sec elapsed\n\nDay 17\nPart 1\n\n\nlibrary(dplyr)\nlibrary(tidyr)\n\ninput <- readLines(\"2020/17-input\")\n\nstart <- tibble(\n  x = rep(seq(7, 14), 8),\n  y = rev(rep(seq(7, 14), each = 8)),\n  z = 10,\n  state = strsplit(input, \"\") %>% unlist()\n)\n\nspace <- expand_grid(x = seq(1, 20), y = seq(1, 20), z = seq(1, 20)) %>%\n  left_join(start, by = c(\"x\", \"y\", \"z\")) %>%\n  mutate(state = if_else(is.na(state), \".\", state)) %>%\n  mutate(row = row_number())\n\nfind_neighbors <- function(dat) {\n  space %>%\n    filter(abs(x - dat$x) <= 1, abs(y - dat$y) <= 1, abs(z - dat$z) <= 1,\n           !(x == dat$x & y == dat$y & z == dat$z)) %>%\n    pull(row)\n}\n\nall_neighbors <- map(seq_len(nrow(space)), ~find_neighbors(space[.x, ]))\n\nnext_state <- function(x, nbs) {\n  if (x == \"#\") {\n    if (sum(nbs == \"#\") %in% c(2, 3)) {\n      return(\"#\")\n    } else {\n      return(\".\")\n    }\n  } else {\n    if (sum(nbs == \"#\") == 3) {\n      return(\"#\")\n    } else {\n      return(\".\")\n    }\n  }\n}\n\nfor(iter in 1:6) {\n  all_neighbors_states <- map(all_neighbors, ~ space$state[.x])\n  space$state <- map2_chr(space$state, all_neighbors_states, next_state)\n}\n\nsum(space$state == \"#\")\n\n\n\n\n[1] 280\n18.453 sec elapsed\n\nPart 2\n\n\nlibrary(dplyr)\nlibrary(tidyr)\ninput <- readLines(\"2020/17-input\")\n\n\nstart <- tibble(\n  x = rep(seq(7, 14), 8),\n  y = rev(rep(seq(7, 14), each = 8)),\n  z = 0,\n  w = 0,\n  state = strsplit(input, \"\") %>% unlist()\n)\n\nspace <- expand_grid(x = seq(1, 20),\n                     y = seq(1, 20),\n                     z = seq(-6, 6),\n                     w = seq(-6, 6)) %>%\n  left_join(start, by = c(\"x\", \"y\", \"z\", \"w\")) %>%\n  mutate(state = if_else(is.na(state), \".\", state)) %>%\n  mutate(row = row_number())\n\nfind_neighbors <- function(dat) {\n  space %>%\n    filter(abs(x - dat$x) <= 1,\n           abs(y - dat$y) <= 1,\n           abs(z - dat$z) <= 1,\n           abs(w - dat$w) <= 1,\n           !(x == dat$x & y == dat$y & z == dat$z & w == dat$w)) %>%\n    pull(row)\n}\n\nall_neighbors <- map(seq_len(nrow(space)), ~find_neighbors(space[.x, ]))\n\nnext_state <- function(x, nbs) {\n  if (x == \"#\") {\n    if (sum(nbs == \"#\") %in% c(2, 3)) {\n      return(\"#\")\n    } else {\n      return(\".\")\n    }\n  } else {\n    if (sum(nbs == \"#\") == 3) {\n      return(\"#\")\n    } else {\n      return(\".\")\n    }\n  }\n}\n\nfor(iter in 1:6) {\n  all_neighbors_states <- map(all_neighbors, ~ space$state[.x])\n  space$state <- map2_chr(space$state, all_neighbors_states, next_state)\n}\n\nsum(space$state == \"#\")\n\n\n\n\n[1] 1696\n442.808 sec elapsed\n\nDay 18\nPart 1\n\n\nlibrary(stringr)\nlibrary(purrr)\ninput <- readLines(\"2020/18-input\")\n\n`%+%` <- function(a, b) a + b\n`%*%` <- function(a, b) a * b\n\neval_string <- function(x) {\n  map_dbl(x, ~eval(parse(text = .x)))\n}\n\noptions(scipen = 999)\ninput %>%\n  str_replace_all(c(\"\\\\+\" = \"%\\\\+%\", \"\\\\*\" = \"%\\\\*%\")) %>%\n  eval_string() %>%\n  sum()\n\n\n\n\n[1] 8298263963837\n0.014 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\nlibrary(purrr)\ninput <- readLines(\"2020/18-input\")\n\neval_string_rev <- function(x) {\n  rev_env <- new.env()\n  rev_env$`+` <- function(a, b) base::`*`(a, b)\n  rev_env$`*` <- function(a, b) base::`+`(a, b)\n  map_dbl(x, ~eval(parse(text = .x), envir = rev_env))\n}\n\noptions(scipen = 999)\ninput %>%\n  str_replace_all(c(\"\\\\+\" = \"temp\", \"\\\\*\" = \"+\", \"temp\" = \"*\")) %>%\n  eval_string_rev() %>%\n  sum()\n\n\n\n\n[1] 145575710203332\n0.01 sec elapsed\n\nDay 19\nPart 1\n\n\nlibrary(stringr)\nlibrary(purrr)\ninput <- readLines(\"2020/19-input\")\nbreak_point <- which(input == \"\")\n\nrules_raw <- input[seq(1, break_point - 1)]\nrules_raw <- str_remove_all(rules_raw, \"\\\"\")\nrules_raw <- str_split(rules_raw, \": \")\nrules <- map_chr(rules_raw, 2)\nrules <- map_chr(str_split(rules, \" \"), ~paste(glue::glue(\"_{.x}_\"),collapse = \"\"))\nrules <- str_replace_all(rules, c(\"_\\\\|_\" = \"\\\\|\", \"_a_\" = \"a\", \"_b_\" = \"b\"))\nrules <- paste0(\"(\", rules, \")\")\nnames(rules) <- paste0(\"_\", map(rules_raw, 1), \"_\")\n\nmessages <- input[seq(break_point + 1, length(input))]\n\nmaster <- \"_0_\"\nwhile(str_detect(master, \"[0-9]\")) {\n  master <- str_replace_all(master, rules)\n}\n\nsum(str_detect(messages, glue::glue(\"^{master}$\")))\n\n\n\n\n[1] 162\n0.115 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\nlibrary(purrr)\ninput <- readLines(\"2020/19-input\")\nbreak_point <- which(input == \"\")\n\nrules_raw <- input[seq(1, break_point - 1)]\nrules_raw <- str_remove_all(rules_raw, \"\\\"\")\nrules_raw <- str_split(rules_raw, \": \")\nrules <- map_chr(rules_raw, 2)\nrules <- map_chr(str_split(rules, \" \"), ~paste(glue::glue(\"_{.x}_\"),collapse = \"\"))\nrules <- str_replace_all(rules, c(\"_\\\\|_\" = \"\\\\|\", \"_a_\" = \"a\", \"_b_\" = \"b\"))\nrules <- paste0(\"(\", rules, \")\")\nnames(rules) <- paste0(\"_\", map(rules_raw, 1), \"_\")\nrules[\"_8_\"] <- \"(_42_+)\"\nrules[\"_11_\"] <- \"(_42__31_|_42__42__31__31_|_42__42__42__31__31__31_|_42__42__42__42__31__31__31__31_|_42__42__42__42__42__31__31__31__31__31_|_42__42__42__42__42__42__42__31__31__31__31__31__31__31_)\"\n\nmessages <- input[seq(break_point + 1, length(input))]\n\nmaster <- \"_0_\"\nwhile(str_detect(master, \"[0-9]\")) {\n  master <- str_replace_all(master, rules)\n}\n\nsum(grepl(glue::glue(\"^{master}$\"), messages))\n\n\n\n\n[1] 267\n0.282 sec elapsed\n\nDay 20\nPart 1\n\n\nlibrary(tidyverse)\n\ninput <- read_file(\"2020/20-input\")\ninput <- str_remove(input, \"\\n$\")\n\ntiles <- str_split(input, \"\\n\\n\")[[1]]\n\ntile_info <- function(x) {\n  lines <- str_split(x, \"\\n\")[[1]]\n\n  id <- str_extract(lines[1], \"[0-9]+\")\n  grid <- lines[-1]\n\n  sides <- c(\n    paste0(str_sub(grid, 1, 1), collapse = \"\"),\n    paste0(str_sub(grid, length(grid), length(grid)), collapse = \"\"),\n    grid[c(1, length(grid))]\n  )\n\n  tibble(id, side = c(sides, stringi::stri_reverse(sides)))\n}\n\ntile_sides <- map_dfr(tiles, tile_info)\n\noptions(scipen = 999)\njoints <- inner_join(tile_sides, tile_sides, by = \"side\") %>%\n  filter(id.x != id.y) %>%\n  transmute(pair = map2_chr(id.x, id.y, ~\n                              paste(sort(c(.x, .y)), collapse = \" \")\n  )) %>%\n  distinct() %>%\n  separate(pair, c(\"a\", \"b\"), \" \")\n\njoints %>%\n  pivot_longer(everything()) %>%\n  count(value) %>%\n  filter(n == 2) %>%\n  summarize(res = prod(as.numeric(value))) %>%\n  pull(res)\n\n\n\n\n[1] 18482479935793\n0.227 sec elapsed\n\nPart 2\n\n\nlibrary(tidyverse)\n\ninput <- read_file(\"2020/20-input\")\ninput <- str_remove(input, \"\\n$\")\n\ntiles <- str_split(input, \"\\n\\n\")[[1]]\n\ntile_info <- function(x) {\n  lines <- str_split(x, \"\\n\")[[1]]\n\n  id <- str_extract(lines[1], \"[0-9]+\")\n  grid <- lines[-1]\n\n  sides <- c(\n    paste0(str_sub(grid, 1, 1), collapse = \"\"),\n    paste0(str_sub(grid, length(grid), length(grid)), collapse = \"\"),\n    grid[c(1, length(grid))]\n  )\n\n  tibble(id, side = c(sides, stringi::stri_reverse(sides)))\n}\n\ntile_sides <- map_dfr(tiles, tile_info)\n\noptions(scipen = 999)\njoints <- inner_join(tile_sides, tile_sides, by = \"side\") %>%\n  filter(id.x != id.y) %>%\n  transmute(pair = map2_chr(id.x, id.y, ~\n                              paste(sort(c(.x, .y)), collapse = \" \")\n  )) %>%\n  distinct() %>%\n  separate(pair, c(\"a\", \"b\"), \" \")\n\ncurrent <- joints %>%\n  pivot_longer(everything()) %>%\n  count(value) %>%\n  filter(n == 2) %>%\n  slice(1) %>%\n  pull(value)\n\nmiddle <- joints %>%\n  pivot_longer(everything()) %>%\n  count(value) %>%\n  filter(n == 4) %>%\n  pull(value)\n\nnon_middle <- joints %>%\n  filter(!a %in% middle, !b %in% middle)\n\nplaces <- matrix(NA, 12, 12)\n\nused <- c()\nround <- c()\n\nrepeat {\n  round <- c(round, current)\n\n  next_tile <- non_middle %>%\n    filter(a %in% current | b %in% current, !a %in% used, !b %in% used) %>%\n    slice(1) %>%\n    unlist() %>%\n    setdiff(current)\n\n  if(length(next_tile) == 0) break\n  used <- c(used, current)\n  current <- next_tile\n}\n\nplaces[1, 1:12] <- round[1:12]\nplaces[2:12, 12] <- round[13:23]\nplaces[12, 11:1] <- round[24:34]\nplaces[11:2, 1] <- round[35:44]\n\nfor (i in 2:11) {\n  for (j in 2:11) {\n    partners <- c(places[i-1, j], places[i, j-1])\n\n    places[i, j] <- intersect(\n      joints %>%\n        filter(a %in% partners[1] | b %in% partners[1]) %>%\n        unlist() %>%\n        setdiff(partners[1]),\n      joints %>%\n        filter(a %in% partners[2] | b %in% partners[2]) %>%\n        unlist() %>%\n        setdiff(partners[1])\n    ) %>%\n      setdiff(places[i - 1, j - 1])\n  }\n}\n\nextract_full_grid <- function(x) {\n  str_split(x, \"\\n\")[[1]][-1] %>%\n    str_split(\"\") %>%\n    unlist() %>%\n    matrix(nrow = 10, byrow = TRUE)\n}\n\nfull_tiles <- map(tiles, extract_full_grid)\nnames(full_tiles) <- str_extract(tiles, \"[0-9]+\")\n\nrotate <- function(x) t(apply(x, 2, rev))\n\nall_tiles <- map(1:12, ~map(1:12, ~list()))\n\nall_tiles[[1]][[1]] <- full_tiles[[places[1, 1]]][, 10:1]\n\nall_symmmetries <- list(\n  function(x) x,\n  function(x) rotate(x),\n  function(x) rotate(rotate(x)),\n  function(x) rotate(rotate(rotate(x))),\n  function(x) x[, 10:1],\n  function(x) rotate(x[, 10:1]),\n  function(x) rotate(rotate(x[, 10:1])),\n  function(x) rotate(rotate(rotate(x[, 10:1])))\n)\n\nfor (i in 2:12) {\n  tile <- full_tiles[[places[1, i]]]\n\n  tile_symmetries <- map(all_symmmetries, ~.x(tile))\n\n  tile_which <- map_lgl(tile_symmetries, ~ all(all_tiles[[1]][[i - 1]][, 10] == .x[, 1]))\n\n  all_tiles[[1]][[i]] <- tile_symmetries[[which(tile_which)]]\n}\n\nfor (j in 2:12) {\n  for (i in 1:12) {\n    tile <- full_tiles[[places[j, i]]]\n\n    tile_symmetries <- map(all_symmmetries, ~.x(tile))\n\n    tile_which <- map_lgl(tile_symmetries, ~ all(all_tiles[[j - 1]][[i]][10, ] == .x[1, ]))\n\n    all_tiles[[j]][[i]] <- tile_symmetries[[which(tile_which)]]\n  }\n}\n\nx <- all_tiles[[1]][[1]]\n\nget_inner <- function(x) {\n  x[2:9, 2:9]\n}\n\nlake <- reduce(map(all_tiles, ~reduce(map(.x, get_inner), cbind)), rbind)\n\nmonster <- c(\n  \"                  # \",\n  \"#    ##    ##    ###\",\n  \" #  #  #  #  #  #   \"\n) %>%\n  str_split(\"\") %>%\n  unlist() %>%\n  matrix(nrow = 3, byrow = TRUE)\n\n\nfor (turn in 1:8) {\n  for (i in 1:94) {\n    for (j in 1:77) {\n      inlake <- lake[seq(i, i + 2), seq(j, j + 19)][monster == \"#\"]\n\n      if (all(inlake %in% c(\"#\", \"0\"))) {\n        lake[seq(i, i + 2), seq(j, j + 19)][monster == \"#\"] <- \"0\"\n      }\n    }\n  }\n  lake <- rotate(lake)\n  if(turn == 4) {\n    lake <- lake[, seq_len(nrow(lake))]\n  }\n}\n\nsum(lake == \"#\")\n\n\n\n\n[1] 2118\n1.719 sec elapsed\n\nDay 21\nPart 1\n\n\nlibrary(stringr)\nlibrary(purrr)\n\ninput <- readLines(\"2020/21-input\")\n\nallergies <- str_extract(input, \"\\\\(.*\")\nallergies <- str_remove(allergies, \"\\\\(contains \")\nallergies <- str_remove(allergies, \"\\\\)\")\nallergies <- str_split(allergies, \", \")\n\ningredient <- str_extract(input, \"[ a-z]+\")\ningredient <- str_extract_all(ingredient, \"[a-z]+\")\n\nall_allergies <- unique(unlist(allergies))\nall_ingredient <- character(length(all_allergies))\n\nrepeat {\n  res <- length(unlist(ingredient))\n\n  for (i in seq_along(all_allergies)) {\n    x <- all_allergies[i]\n\n    x_foods <- ingredient[map_lgl(allergies, ~any(.x %in% x))]\n\n    candidates <- reduce(x_foods, intersect)\n    if (length(candidates) != 1) next\n    all_ingredient[i] <- candidates\n    ingredient <- map(ingredient, setdiff, all_ingredient)\n  }\n\n  new_res <- length(unlist(ingredient))\n\n  if (res == new_res) break\n  res <- new_res\n}\n\nlength(unlist(ingredient))\n\n\n\n\n[1] 2724\n0.04 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\nlibrary(purrr)\n\ninput <- readLines(\"2020/21-input\")\n\nallergies <- str_extract(input, \"\\\\(.*\")\nallergies <- str_remove(allergies, \"\\\\(contains \")\nallergies <- str_remove(allergies, \"\\\\)\")\nallergies <- str_split(allergies, \", \")\n\ningredient <- str_extract(input, \"[ a-z]+\")\ningredient <- str_extract_all(ingredient, \"[a-z]+\")\n\nall_allergies <- unique(unlist(allergies))\nall_ingredient <- character(length(all_allergies))\n\nrepeat {\n  res <- length(unlist(ingredient))\n\n  for (i in seq_along(all_allergies)) {\n    x <- all_allergies[i]\n\n    x_foods <- ingredient[map_lgl(allergies, ~any(.x %in% x))]\n\n    candidates <- reduce(x_foods, intersect)\n    if (length(candidates) != 1) next\n    all_ingredient[i] <- candidates\n    ingredient <- map(ingredient, setdiff, all_ingredient)\n  }\n\n  new_res <- length(unlist(ingredient))\n\n  if (res == new_res) break\n  res <- new_res\n}\n\npaste(all_ingredient[order(all_allergies)], collapse = \",\")\n\n\n\n\n[1] \"xlxknk,cskbmx,cjdmk,bmhn,jrmr,tzxcmr,fmgxh,fxzh\"\n0.028 sec elapsed\n\nDay 22\nPart 1\n\n\ninput <- readLines(\"2020/22-input\")\n\nbp <- which(input == \"\")\n\nplayer1 <- as.numeric(input[seq(2, bp-1)])\nplayer2 <- as.numeric(input[seq(bp + 2, length(input))])\n\nrepeat {\n  if (player1[1] > player2[1]) {\n    player1 <- c(player1[-1], player1[1], player2[1])\n    player2 <- player2[-1]\n  } else {\n    player2 <- c(player2[-1], player2[1], player1[1])\n    player1 <- player1[-1]\n  }\n  if (length(player1) == 0 | length(player2) == 0) break\n}\n\nsum(player1 * rev(seq_along(player1))) +\n  sum(player2 * rev(seq_along(player2)))\n\n\n\n\n[1] 32472\n0.011 sec elapsed\n\nPart 2\n\n\nlibrary(purrr)\n\ninput <- readLines(\"2020/22-input\")\n\nbp <- which(input == \"\")\n\nplayer1 <- as.numeric(input[seq(2, bp - 1)])\nplayer2 <- as.numeric(input[seq(bp + 2, length(input))])\n\nplay_game <- function(hand1, hand2, subgame = FALSE) {\n  previous_hands1 <- list()\n  previous_hands2 <- list()\n  repeat {\n    if (any(map_lgl(previous_hands1, ~identical(.x, hand1))) &\n        any(map_lgl(previous_hands2, ~identical(.x, hand2)))) {\n      if (subgame) {\n        return(TRUE)\n      } else {\n        return(sum(hand1 * rev(seq_along(hand1))) +\n                 sum(hand2 * rev(seq_along(hand2))))\n      }\n    }\n\n    draw1 <- hand1[1]\n    draw2 <- hand2[1]\n\n    optim <- (max(hand1) > max(hand2)) &\n      max(hand1) > (length(c(hand1, hand2))) &\n      subgame\n    if(optim) {\n      return(TRUE)\n    }\n\n    if (draw1 < length(hand1) & draw2 < length(hand2)) {\n      winner <- play_game(hand1[seq_len(draw1) + 1],\n                          hand2[seq_len(draw2) + 1], subgame = TRUE)\n    } else {\n      winner <- hand1[1] > hand2[1]\n    }\n\n    previous_hands1 <- c(previous_hands1, list(hand1))\n    previous_hands2 <- c(previous_hands2, list(hand2))\n\n    if (winner) {\n      hand1 <- c(hand1[-1], hand1[1], hand2[1])\n      hand2 <- hand2[-1]\n    } else {\n      hand2 <- c(hand2[-1], hand2[1], hand1[1])\n      hand1 <- hand1[-1]\n    }\n    if (length(hand1) == 0 | length(hand2) == 0) break\n  }\n\n  if (subgame) {\n    return(length(hand2) == 0)\n  } else {\n    return(sum(hand1 * rev(seq_along(hand1))) +\n           sum(hand2 * rev(seq_along(hand2))))\n  }\n}\n\nplay_game(player1, player2)\n\n\n\n\n[1] 36463\n17.005 sec elapsed\n\nDay 23\nPart 1\n\n\ninput <- c(4, 7, 6, 1, 3, 8, 2, 5, 9)\ncurrent <- input[1]\n\na <- numeric(length(input))\n\ninput_len <- length(input)\n\nfor (i in seq_along(a)) {\n  which_i <- which(input == i)\n  if (which_i == input_len) {\n    a[i] <- input[1]\n  } else {\n    a[i] <- input[which_i + 1]\n  }\n}\n\nfor (i in 1:100) {\n\n  pick1 <- a[current]\n  pick2 <- a[pick1]\n  pick3 <- a[pick2]\n  pick4 <- a[pick3]\n\n  a[current] <- pick4\n\n  dest <- current - 1\n\n  if (dest == 0) {\n    dest <- input_len\n  }\n\n  while (dest %in% c(pick1, pick2, pick3)) {\n    dest <- dest - 1\n  }\n\n  if (dest == 0) {\n    dest <- input_len\n  }\n\n  while (dest %in% c(pick1, pick2, pick3)) {\n    dest <- dest - 1\n  }\n\n  end <- a[dest]\n\n  a[pick3] <- end\n  a[dest] <- pick1\n\n  current <- a[current]\n}\n\nres <- numeric(length(a))\nres[1] <- 1\n\nfor (i in 2:length(a)) {\n  res[i] <- a[res[i-1]]\n}\n\npaste0(res[-1], collapse = \"\")\n\n\n\n\n[1] \"97245386\"\n0.029 sec elapsed\n\nPart 2\n\n\ninput <- c(4, 7, 6, 1, 3, 8, 2, 5, 9)\ncurrent <- input[1]\n\na <- numeric(length(input))\n\ninput_len <- length(input)\n\na <- c(3, 5, 8, 7, 9, 1, 6, 2, 10,  seq(11, 1000000), 4)\n\ntictoc::tic()\nfor (i in 1:10000000) {\n\n  pick1 <- a[current]\n  pick2 <- a[pick1]\n  pick3 <- a[pick2]\n  pick4 <- a[pick3]\n\n  a[current] <- pick4\n\n  dest <- current - 1\n\n  if (dest == 0) {\n    dest <- input_len\n  }\n\n  while (dest %in% c(pick1, pick2, pick3)) {\n    dest <- dest - 1\n  }\n\n  if (dest == 0) {\n    dest <- input_len\n  }\n\n  while (dest %in% c(pick1, pick2, pick3)) {\n    dest <- dest - 1\n  }\n\n  end <- a[dest]\n\n  a[pick3] <- end\n  a[dest] <- pick1\n\n  current <- a[current]\n}\ntictoc::toc()\n\na[1] * a[a[1]]\n\n\n\n\n25.478 sec elapsed\n[1] 43717931544\n25.49 sec elapsed\n\nDay 24\nPart 1\n\n\nlibrary(stringr)\nlibrary(purrr)\n\ninput <- readLines(\"2020/24-input\")\n\nmoves <- c(\n  e = 1 + 0i,\n  se = 0 - 1i,\n  sw = -1 - 1i,\n  w = -1 + 0i,\n  nw = 0 + 1i,\n  ne = 1 + 1i\n)\nflips <- input %>%\n  str_extract_all(\"[ns]?[ew]\") %>%\n  map(~moves[.x]) %>%\n  map(sum) %>%\n  reduce(c)\n\nflips %>%\n  table() %>%\n  {sum(. %% 2 == 1)}\n\n\n\n\n[1] 386\n0.013 sec elapsed\n\nPart 2\n\n\nlibrary(stringr)\nlibrary(purrr)\n\ninput <- readLines(\"2020/24-input\")\n\nmoves <- c(\n  e = 1 + 0i,\n  se = 0 - 1i,\n  sw = -1 - 1i,\n  w = -1 + 0i,\n  nw = 0 + 1i,\n  ne = 1 + 1i\n)\nflips <- input %>%\n  str_extract_all(\"[ns]?[ew]\") %>%\n  map(~moves[.x]) %>%\n  map(sum) %>%\n  reduce(c)\n\nn_neighbors <- function(x, y, moves) {\n  rowSums(matrix(outer(x, moves, `+`) %in% y, ncol = length(moves)))\n}\nblack <- as.complex(names(table(flips)[table(flips) %% 2 == 1]))\n\nfor (i in 1:100) {\n  stay_black <- n_neighbors(black, black, moves) == 1\n\n  white_candidates <- map(black, ~.x + moves) %>%\n    unlist() %>%\n    unique()\n\n  new_black_ind <- n_neighbors(white_candidates, black, moves) == 2\n\n  new_black <- white_candidates[new_black_ind]\n\n  black <- c(black[stay_black], new_black)\n}\n\nlength(black)\n\n\n\n\n[1] 4214\n1.635 sec elapsed\n\nDay 25\nPart 1\n\n\ndiv <- 20201227\n\ncard_public <- 10943862\ndoor_public <- 12721030\n\ntransform <- function(subject, lpt) {\n  value <- 1\n  c <- 0\n  while (c < lpt) {\n    value <- value * subject\n    value <- value %% div\n    c <- c + 1\n  }\n  value\n}\n\nbruteforce <- function(value_goal) {\n  lpt <- 1\n  value <- 1\n  repeat {\n    value <- value * 7\n    value <- value %% div\n    if (value == value_goal) {\n      return(lpt)\n    }\n    lpt <- lpt + 1\n  }\n}\n\ncard_lpt_size <- bruteforce(card_public)\ndoor_lpt_size <- bruteforce(door_public)\n\ntransform(door_public, card_lpt_size)\n\n\n\n\n[1] 5025281\n8.838 sec elapsed\n\n\n\n\n\n",
      "last_modified": "2021-11-25T12:36:35-08:00"
    },
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-11-25T12:36:35-08:00"
    },
    {
      "path": "index.html",
      "title": "R Advent Of Code",
      "description": "Emil Hvitfeldt's solutions\n",
      "author": [],
      "contents": "\nThis website is created using the emilhvitfeldt/rstats-adventofcode repository. I try to save all my solution in one place here.\nI don’t have any rules I follow. I will end up doing most solutions using base R because of the nanture of the problems. I will be using both purrr and stringr when the need comes up, I don’t hate myself. I’m here to write code and have fun doing it.\n\n\n\n",
      "last_modified": "2021-11-25T12:36:36-08:00"
    }
  ],
  "collections": []
}
